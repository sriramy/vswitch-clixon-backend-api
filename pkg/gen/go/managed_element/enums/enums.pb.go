// managed_element.enums is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - yang/openconfig-system.yang
// Include paths:
//   - models/...

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: managed_element/enums/enums.proto

package enums

import (
	_ "github.com/openconfig/ygot/proto/yext"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// IETFInterfacesInterfaceType represents an enumerated type generated for the YANG identity interface-type.
type IETFInterfacesInterfaceType int32

const (
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_UNSET                         IETFInterfacesInterfaceType = 0
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_vmwareVirtualNic              IETFInterfacesInterfaceType = 1565006
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_sdsl                          IETFInterfacesInterfaceType = 6510195
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_radsl                         IETFInterfacesInterfaceType = 6740905
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_x86Laps                       IETFInterfacesInterfaceType = 6820753
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_localTalk                     IETFInterfacesInterfaceType = 8569638
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_dlsw                          IETFInterfacesInterfaceType = 9975993
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_idsl                          IETFInterfacesInterfaceType = 11625257
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_nfas                          IETFInterfacesInterfaceType = 15826611
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_bridge                        IETFInterfacesInterfaceType = 16268636
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_docsCableScte55d2UsOob        IETFInterfacesInterfaceType = 26367302
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ieee80216WMAN                 IETFInterfacesInterfaceType = 27144395
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_tr008                         IETFInterfacesInterfaceType = 29978951
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_dvbRccUpstream                IETFInterfacesInterfaceType = 32753636
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_propDocsWirelessDownstream    IETFInterfacesInterfaceType = 33042753
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_frf16MfrBundle                IETFInterfacesInterfaceType = 33466019
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_actelisMetaLOOP               IETFInterfacesInterfaceType = 33876615
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_virtualIpAddress              IETFInterfacesInterfaceType = 34837125
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_hdsl2                         IETFInterfacesInterfaceType = 35292480
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_virtualTg                     IETFInterfacesInterfaceType = 36505915
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_pdnEtherLoop1                 IETFInterfacesInterfaceType = 39592732
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_pdnEtherLoop2                 IETFInterfacesInterfaceType = 39592735
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_docsCableUpstream             IETFInterfacesInterfaceType = 40317714
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_msdsl                         IETFInterfacesInterfaceType = 42288188
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_fddi                          IETFInterfacesInterfaceType = 45545244
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_gfp                           IETFInterfacesInterfaceType = 46876684
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_propWirelessP2P               IETFInterfacesInterfaceType = 47272810
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_fibreChannel                  IETFInterfacesInterfaceType = 48464202
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_propBWAp2Mp                   IETFInterfacesInterfaceType = 53391395
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_mpls                          IETFInterfacesInterfaceType = 59594435
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_fast                          IETFInterfacesInterfaceType = 62764217
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_voiceEM                       IETFInterfacesInterfaceType = 68512445
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_rfc1483                       IETFInterfacesInterfaceType = 71949014
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_opticalTransport              IETFInterfacesInterfaceType = 72145124
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ipSwitch                      IETFInterfacesInterfaceType = 75335244
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_frameRelayService             IETFInterfacesInterfaceType = 76605298
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_docsCableDownstream           IETFInterfacesInterfaceType = 82085109
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_smdsDxi                       IETFInterfacesInterfaceType = 82940545
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_x213                          IETFInterfacesInterfaceType = 86923325
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_dvbRcsTdma                    IETFInterfacesInterfaceType = 87219061
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_reachDSL                      IETFInterfacesInterfaceType = 94937173
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_iso88025Fiber                 IETFInterfacesInterfaceType = 95814573
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ces                           IETFInterfacesInterfaceType = 96608266
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_isdns                         IETFInterfacesInterfaceType = 98224960
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_isdnu                         IETFInterfacesInterfaceType = 98224966
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ciscoISLvlan                  IETFInterfacesInterfaceType = 98611879
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_e1                            IETFInterfacesInterfaceType = 98947197
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_other                         IETFInterfacesInterfaceType = 102886491
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_propMultiplexor               IETFInterfacesInterfaceType = 104872999
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_iso88025CRFPInt               IETFInterfacesInterfaceType = 107406283
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_opticalChannelGroup           IETFInterfacesInterfaceType = 113721035
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_dtm                           IETFInterfacesInterfaceType = 113840220
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_frameRelayInterconnect        IETFInterfacesInterfaceType = 114395621
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_vdsl2                         IETFInterfacesInterfaceType = 114521030
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_escon                         IETFInterfacesInterfaceType = 115055825
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_rfc877x25                     IETFInterfacesInterfaceType = 115857711
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_x25mlp                        IETFInterfacesInterfaceType = 123303819
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_docsCableMaclayer             IETFInterfacesInterfaceType = 123379145
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_bgppolicyaccounting           IETFInterfacesInterfaceType = 123979459
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_a12MppSwitch                  IETFInterfacesInterfaceType = 124516534
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_rs232                         IETFInterfacesInterfaceType = 125504151
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ifVfiType                     IETFInterfacesInterfaceType = 125597175
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_atmVirtual                    IETFInterfacesInterfaceType = 126930162
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ds0                           IETFInterfacesInterfaceType = 130617844
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ds1                           IETFInterfacesInterfaceType = 130617845
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ds3                           IETFInterfacesInterfaceType = 130617847
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_usb                           IETFInterfacesInterfaceType = 133030655
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_xboxWireless                  IETFInterfacesInterfaceType = 134112364
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_l2vlan                        IETFInterfacesInterfaceType = 136888738
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_aluGponOnu                    IETFInterfacesInterfaceType = 142838813
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ibm370parChan                 IETFInterfacesInterfaceType = 144282644
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_if_gsn                        IETFInterfacesInterfaceType = 144667633
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_propVirtual                   IETFInterfacesInterfaceType = 151318645
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_docsCableUpstreamRfPort       IETFInterfacesInterfaceType = 152154307
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_gr303IDT                      IETFInterfacesInterfaceType = 152588497
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_dvbTdm                        IETFInterfacesInterfaceType = 154146406
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_hyperchannel                  IETFInterfacesInterfaceType = 154271532
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_x25ple                        IETFInterfacesInterfaceType = 154740499
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_fastEther                     IETFInterfacesInterfaceType = 154868491
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_adsl                          IETFInterfacesInterfaceType = 159068577
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_stackToStack                  IETFInterfacesInterfaceType = 159738210
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_adsl2plus                     IETFInterfacesInterfaceType = 161466077
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ipForward                     IETFInterfacesInterfaceType = 164396743
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_imt                           IETFInterfacesInterfaceType = 164717531
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ip                            IETFInterfacesInterfaceType = 166057704
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_pip                           IETFInterfacesInterfaceType = 166131694
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_x25huntGroup                  IETFInterfacesInterfaceType = 167843534
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_aluEpon                       IETFInterfacesInterfaceType = 168357285
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_aluEponPhysicalUni            IETFInterfacesInterfaceType = 173089984
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_propCnls                      IETFInterfacesInterfaceType = 175632828
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_capwapDot11Profile            IETFInterfacesInterfaceType = 178725861
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_voiceDID                      IETFInterfacesInterfaceType = 179978682
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_cnr                           IETFInterfacesInterfaceType = 180496426
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_hdh1822                       IETFInterfacesInterfaceType = 181667598
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_atmDxi                        IETFInterfacesInterfaceType = 185164750
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_arcnetPlus                    IETFInterfacesInterfaceType = 185743218
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ipOverCdlc                    IETFInterfacesInterfaceType = 187706792
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_linegroup                     IETFInterfacesInterfaceType = 188639782
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_dvbRccMacLayer                IETFInterfacesInterfaceType = 190229931
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_frameRelay                    IETFInterfacesInterfaceType = 192403649
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_isdn                          IETFInterfacesInterfaceType = 193369057
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_voiceOverCable                IETFInterfacesInterfaceType = 193481284
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_arap                          IETFInterfacesInterfaceType = 194889541
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_eon                           IETFInterfacesInterfaceType = 197568375
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_sonetOverheadChannel          IETFInterfacesInterfaceType = 198587275
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_sixToFour                     IETFInterfacesInterfaceType = 198588222
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_pos                           IETFInterfacesInterfaceType = 199686839
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ethernetCsmacd                IETFInterfacesInterfaceType = 200640927
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ds0Bundle                     IETFInterfacesInterfaceType = 201568324
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_atmLogical                    IETFInterfacesInterfaceType = 209365342
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_radioMAC                      IETFInterfacesInterfaceType = 210946377
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_propDocsWirelessMaclayer      IETFInterfacesInterfaceType = 212348549
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_pon622                        IETFInterfacesInterfaceType = 214224204
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_nsip                          IETFInterfacesInterfaceType = 215039369
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_modem                         IETFInterfacesInterfaceType = 220777299
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_otnOdu                        IETFInterfacesInterfaceType = 221697026
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_iso88024TokenBus              IETFInterfacesInterfaceType = 226662339
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_coffee                        IETFInterfacesInterfaceType = 228642743
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_docsCableUpstreamChannel      IETFInterfacesInterfaceType = 230766155
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_atmFuni                       IETFInterfacesInterfaceType = 231177305
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_lmp                           IETFInterfacesInterfaceType = 232563358
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_adsl2                         IETFInterfacesInterfaceType = 233775169
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_cableDownstreamRfPort         IETFInterfacesInterfaceType = 235031767
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_dvbRccDownstream              IETFInterfacesInterfaceType = 237186979
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_mediaMailOverIp               IETFInterfacesInterfaceType = 237300945
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_basicISDN                     IETFInterfacesInterfaceType = 240798305
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_plc                           IETFInterfacesInterfaceType = 250019614
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_propDocsWirelessUpstream      IETFInterfacesInterfaceType = 259946614
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_teLink                        IETFInterfacesInterfaceType = 263561362
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_pon155                        IETFInterfacesInterfaceType = 265689965
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_transpHdlc                    IETFInterfacesInterfaceType = 266205262
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_sonetVT                       IETFInterfacesInterfaceType = 269056588
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_digitalWrapperOverheadChannel IETFInterfacesInterfaceType = 269831139
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_voiceFGDEANA                  IETFInterfacesInterfaceType = 271377999
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_primaryISDN                   IETFInterfacesInterfaceType = 274718125
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_sdci                          IETFInterfacesInterfaceType = 274951974
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_regular1822                   IETFInterfacesInterfaceType = 275236866
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_aal5                          IETFInterfacesInterfaceType = 276070712
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_aal2                          IETFInterfacesInterfaceType = 276070719
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_sonetPath                     IETFInterfacesInterfaceType = 278556471
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_mplsTunnel                    IETFInterfacesInterfaceType = 280402025
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_atm                           IETFInterfacesInterfaceType = 280868081
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_sonet                         IETFInterfacesInterfaceType = 281707114
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_econet                        IETFInterfacesInterfaceType = 282809795
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_l3ipvlan                      IETFInterfacesInterfaceType = 283365084
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_iso88026Man                   IETFInterfacesInterfaceType = 284539790
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_gfast                         IETFInterfacesInterfaceType = 284732616
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_capwapDot11Bss                IETFInterfacesInterfaceType = 287119162
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_async                         IETFInterfacesInterfaceType = 288480505
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_digitalPowerline              IETFInterfacesInterfaceType = 290391966
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ethernet3Mbit                 IETFInterfacesInterfaceType = 293951679
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_g703at64k                     IETFInterfacesInterfaceType = 295222342
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_aluGponPhysicalUni            IETFInterfacesInterfaceType = 299181714
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_homepna                       IETFInterfacesInterfaceType = 299867081
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_sip                           IETFInterfacesInterfaceType = 300512605
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_eplrs                         IETFInterfacesInterfaceType = 301064637
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_propAtm                       IETFInterfacesInterfaceType = 301594276
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_proteon10Mbit                 IETFInterfacesInterfaceType = 302514551
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_docsCableScte55d1FwdOob       IETFInterfacesInterfaceType = 303230600
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_iso88022llc                   IETFInterfacesInterfaceType = 303441265
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_fastEtherFX                   IETFInterfacesInterfaceType = 305592941
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_atmRadio                      IETFInterfacesInterfaceType = 305823410
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_cblVectaStar                  IETFInterfacesInterfaceType = 307390607
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_para                          IETFInterfacesInterfaceType = 310683645
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_tunnel                        IETFInterfacesInterfaceType = 310831889
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_voiceOverIp                   IETFInterfacesInterfaceType = 311289458
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_opticalChannel                IETFInterfacesInterfaceType = 314028106
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_q2931                         IETFInterfacesInterfaceType = 315546603
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_mvl                           IETFInterfacesInterfaceType = 316291514
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ppp                           IETFInterfacesInterfaceType = 317130169
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_frForward                     IETFInterfacesInterfaceType = 317625102
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ieee1394                      IETFInterfacesInterfaceType = 318235148
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_aflane8025                    IETFInterfacesInterfaceType = 319364675
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_aflane8023                    IETFInterfacesInterfaceType = 319364677
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_arcnet                        IETFInterfacesInterfaceType = 319683734
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_voiceEncap                    IETFInterfacesInterfaceType = 320085758
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_atmVciEndPt                   IETFInterfacesInterfaceType = 321577928
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_iso88023Csmacd                IETFInterfacesInterfaceType = 323108786
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_docsCableMCmtsDownstream      IETFInterfacesInterfaceType = 324059589
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_fastdsl                       IETFInterfacesInterfaceType = 327234998
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_frDlciEndPt                   IETFInterfacesInterfaceType = 331858766
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_aluEponLogicalLink            IETFInterfacesInterfaceType = 335068882
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_mocaVersion1                  IETFInterfacesInterfaceType = 336028310
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_mfSigLink                     IETFInterfacesInterfaceType = 337561425
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_g9981                         IETFInterfacesInterfaceType = 346881905
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_g9982                         IETFInterfacesInterfaceType = 346881906
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_g9983                         IETFInterfacesInterfaceType = 346881907
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_gtp                           IETFInterfacesInterfaceType = 348860930
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_mpc                           IETFInterfacesInterfaceType = 349846687
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_dvbAsiIn                      IETFInterfacesInterfaceType = 352651815
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_hiperlan2                     IETFInterfacesInterfaceType = 353249714
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_hssi                          IETFInterfacesInterfaceType = 353395016
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_voiceEMFGD                    IETFInterfacesInterfaceType = 356893880
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_sdlc                          IETFInterfacesInterfaceType = 358840141
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_frameRelayMPI                 IETFInterfacesInterfaceType = 361654039
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ifPwType                      IETFInterfacesInterfaceType = 363685441
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_channel                       IETFInterfacesInterfaceType = 365660696
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_proteon80Mbit                 IETFInterfacesInterfaceType = 368321000
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_v11                           IETFInterfacesInterfaceType = 368423037
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_interleave                    IETFInterfacesInterfaceType = 370817552
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_voiceOverFrameRelay           IETFInterfacesInterfaceType = 370951175
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_docsCableNdr                  IETFInterfacesInterfaceType = 371051115
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_docsCableNdf                  IETFInterfacesInterfaceType = 371051135
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ipOverClaw                    IETFInterfacesInterfaceType = 373553475
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_iso88025TokenRing             IETFInterfacesInterfaceType = 374087486
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_capwapWtpVirtualRadio         IETFInterfacesInterfaceType = 377882412
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ieee80211                     IETFInterfacesInterfaceType = 379872273
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ieee80212                     IETFInterfacesInterfaceType = 379872274
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_hostPad                       IETFInterfacesInterfaceType = 382837620
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_smdsIcip                      IETFInterfacesInterfaceType = 383911039
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ptm                           IETFInterfacesInterfaceType = 384240760
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_srp                           IETFInterfacesInterfaceType = 384387804
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_gigabitEthernet               IETFInterfacesInterfaceType = 384522045
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_dvbAsiOut                     IETFInterfacesInterfaceType = 385064858
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_macSecControlledIF            IETFInterfacesInterfaceType = 385408320
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_gr303RDT                      IETFInterfacesInterfaceType = 386381018
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_pppMultilinkBundle            IETFInterfacesInterfaceType = 389808788
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_starLan                       IETFInterfacesInterfaceType = 392045632
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_voiceFXO                      IETFInterfacesInterfaceType = 398407724
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_voiceFXS                      IETFInterfacesInterfaceType = 398407728
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_dcn                           IETFInterfacesInterfaceType = 399059610
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_docsCableScte55d2DsOob        IETFInterfacesInterfaceType = 401060431
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_v36                           IETFInterfacesInterfaceType = 401978180
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_v37                           IETFInterfacesInterfaceType = 401978181
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_v35                           IETFInterfacesInterfaceType = 401978183
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_voiceFGDOS                    IETFInterfacesInterfaceType = 403182892
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ds1FDL                        IETFInterfacesInterfaceType = 405008209
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_h323Proxy                     IETFInterfacesInterfaceType = 405322027
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_softwareLoopback              IETFInterfacesInterfaceType = 405615795
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_lapf                          IETFInterfacesInterfaceType = 407559920
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_lapd                          IETFInterfacesInterfaceType = 407559922
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_lapb                          IETFInterfacesInterfaceType = 407559924
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_qllc                          IETFInterfacesInterfaceType = 408677579
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_termPad                       IETFInterfacesInterfaceType = 408914436
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_bits                          IETFInterfacesInterfaceType = 410011967
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ddnX25                        IETFInterfacesInterfaceType = 411155170
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ieee8023adLag                 IETFInterfacesInterfaceType = 413161059
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_g703at2mb                     IETFInterfacesInterfaceType = 413279788
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_gpon                          IETFInterfacesInterfaceType = 416724613
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_iso88025Dtr                   IETFInterfacesInterfaceType = 420258513
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_atmSubInterface               IETFInterfacesInterfaceType = 420647634
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_vdsl                          IETFInterfacesInterfaceType = 428082364
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_docsOfdmaUpstream             IETFInterfacesInterfaceType = 428242326
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_vmwareNicTeam                 IETFInterfacesInterfaceType = 430304464
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ieee802154                    IETFInterfacesInterfaceType = 432639291
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_l3ipxvlan                     IETFInterfacesInterfaceType = 434730178
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_atmIma                        IETFInterfacesInterfaceType = 437373544
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_macSecUncontrolledIF          IETFInterfacesInterfaceType = 438273729
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_fcipLink                      IETFInterfacesInterfaceType = 441424349
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_slip                          IETFInterfacesInterfaceType = 443995157
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_sipSig                        IETFInterfacesInterfaceType = 444909704
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_mpegTransport                 IETFInterfacesInterfaceType = 444910235
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_isup                          IETFInterfacesInterfaceType = 445020348
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_cctEmul                       IETFInterfacesInterfaceType = 448544526
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ultra                         IETFInterfacesInterfaceType = 451132219
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_iana_interface_type           IETFInterfacesInterfaceType = 455303077
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_tdlc                          IETFInterfacesInterfaceType = 458492100
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_voiceOverAtm                  IETFInterfacesInterfaceType = 460680391
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_aluEponOnu                    IETFInterfacesInterfaceType = 461328495
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_rsrb                          IETFInterfacesInterfaceType = 467591542
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_shdsl                         IETFInterfacesInterfaceType = 469979751
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_propPointToPointSerial        IETFInterfacesInterfaceType = 469979921
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_docsCableScte55d1RetOob       IETFInterfacesInterfaceType = 477583546
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_myrinet                       IETFInterfacesInterfaceType = 477828023
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_h323Gatekeeper                IETFInterfacesInterfaceType = 487014318
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ipOverAtm                     IETFInterfacesInterfaceType = 487580074
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_otnOtu                        IETFInterfacesInterfaceType = 490139090
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_aluELP                        IETFInterfacesInterfaceType = 491118442
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_compositeLink                 IETFInterfacesInterfaceType = 499352976
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_qam                           IETFInterfacesInterfaceType = 501537006
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_infiniband                    IETFInterfacesInterfaceType = 502195319
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_hippi                         IETFInterfacesInterfaceType = 504532095
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_dvbRcsMacLayer                IETFInterfacesInterfaceType = 505127867
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_atmbond                       IETFInterfacesInterfaceType = 507519306
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ilan                          IETFInterfacesInterfaceType = 513673897
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_ss7SigLink                    IETFInterfacesInterfaceType = 513812603
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_docsOfdmDownstream            IETFInterfacesInterfaceType = 516003680
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_aviciOpticalEther             IETFInterfacesInterfaceType = 516076235
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_rpr                           IETFInterfacesInterfaceType = 518755753
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_sipTg                         IETFInterfacesInterfaceType = 526983982
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_wwanPP                        IETFInterfacesInterfaceType = 527365956
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_hippiInterface                IETFInterfacesInterfaceType = 529837048
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_wwanPP2                       IETFInterfacesInterfaceType = 531578942
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_voiceEBS                      IETFInterfacesInterfaceType = 532084325
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_bsc                           IETFInterfacesInterfaceType = 532973469
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_miox25                        IETFInterfacesInterfaceType = 535720499
	IETFInterfacesInterfaceType_IETFINTERFACESINTERFACETYPE_hdlc                          IETFInterfacesInterfaceType = 536418624
)

// Enum value maps for IETFInterfacesInterfaceType.
var (
	IETFInterfacesInterfaceType_name = map[int32]string{
		0:         "IETFINTERFACESINTERFACETYPE_UNSET",
		1565006:   "IETFINTERFACESINTERFACETYPE_vmwareVirtualNic",
		6510195:   "IETFINTERFACESINTERFACETYPE_sdsl",
		6740905:   "IETFINTERFACESINTERFACETYPE_radsl",
		6820753:   "IETFINTERFACESINTERFACETYPE_x86Laps",
		8569638:   "IETFINTERFACESINTERFACETYPE_localTalk",
		9975993:   "IETFINTERFACESINTERFACETYPE_dlsw",
		11625257:  "IETFINTERFACESINTERFACETYPE_idsl",
		15826611:  "IETFINTERFACESINTERFACETYPE_nfas",
		16268636:  "IETFINTERFACESINTERFACETYPE_bridge",
		26367302:  "IETFINTERFACESINTERFACETYPE_docsCableScte55d2UsOob",
		27144395:  "IETFINTERFACESINTERFACETYPE_ieee80216WMAN",
		29978951:  "IETFINTERFACESINTERFACETYPE_tr008",
		32753636:  "IETFINTERFACESINTERFACETYPE_dvbRccUpstream",
		33042753:  "IETFINTERFACESINTERFACETYPE_propDocsWirelessDownstream",
		33466019:  "IETFINTERFACESINTERFACETYPE_frf16MfrBundle",
		33876615:  "IETFINTERFACESINTERFACETYPE_actelisMetaLOOP",
		34837125:  "IETFINTERFACESINTERFACETYPE_virtualIpAddress",
		35292480:  "IETFINTERFACESINTERFACETYPE_hdsl2",
		36505915:  "IETFINTERFACESINTERFACETYPE_virtualTg",
		39592732:  "IETFINTERFACESINTERFACETYPE_pdnEtherLoop1",
		39592735:  "IETFINTERFACESINTERFACETYPE_pdnEtherLoop2",
		40317714:  "IETFINTERFACESINTERFACETYPE_docsCableUpstream",
		42288188:  "IETFINTERFACESINTERFACETYPE_msdsl",
		45545244:  "IETFINTERFACESINTERFACETYPE_fddi",
		46876684:  "IETFINTERFACESINTERFACETYPE_gfp",
		47272810:  "IETFINTERFACESINTERFACETYPE_propWirelessP2P",
		48464202:  "IETFINTERFACESINTERFACETYPE_fibreChannel",
		53391395:  "IETFINTERFACESINTERFACETYPE_propBWAp2Mp",
		59594435:  "IETFINTERFACESINTERFACETYPE_mpls",
		62764217:  "IETFINTERFACESINTERFACETYPE_fast",
		68512445:  "IETFINTERFACESINTERFACETYPE_voiceEM",
		71949014:  "IETFINTERFACESINTERFACETYPE_rfc1483",
		72145124:  "IETFINTERFACESINTERFACETYPE_opticalTransport",
		75335244:  "IETFINTERFACESINTERFACETYPE_ipSwitch",
		76605298:  "IETFINTERFACESINTERFACETYPE_frameRelayService",
		82085109:  "IETFINTERFACESINTERFACETYPE_docsCableDownstream",
		82940545:  "IETFINTERFACESINTERFACETYPE_smdsDxi",
		86923325:  "IETFINTERFACESINTERFACETYPE_x213",
		87219061:  "IETFINTERFACESINTERFACETYPE_dvbRcsTdma",
		94937173:  "IETFINTERFACESINTERFACETYPE_reachDSL",
		95814573:  "IETFINTERFACESINTERFACETYPE_iso88025Fiber",
		96608266:  "IETFINTERFACESINTERFACETYPE_ces",
		98224960:  "IETFINTERFACESINTERFACETYPE_isdns",
		98224966:  "IETFINTERFACESINTERFACETYPE_isdnu",
		98611879:  "IETFINTERFACESINTERFACETYPE_ciscoISLvlan",
		98947197:  "IETFINTERFACESINTERFACETYPE_e1",
		102886491: "IETFINTERFACESINTERFACETYPE_other",
		104872999: "IETFINTERFACESINTERFACETYPE_propMultiplexor",
		107406283: "IETFINTERFACESINTERFACETYPE_iso88025CRFPInt",
		113721035: "IETFINTERFACESINTERFACETYPE_opticalChannelGroup",
		113840220: "IETFINTERFACESINTERFACETYPE_dtm",
		114395621: "IETFINTERFACESINTERFACETYPE_frameRelayInterconnect",
		114521030: "IETFINTERFACESINTERFACETYPE_vdsl2",
		115055825: "IETFINTERFACESINTERFACETYPE_escon",
		115857711: "IETFINTERFACESINTERFACETYPE_rfc877x25",
		123303819: "IETFINTERFACESINTERFACETYPE_x25mlp",
		123379145: "IETFINTERFACESINTERFACETYPE_docsCableMaclayer",
		123979459: "IETFINTERFACESINTERFACETYPE_bgppolicyaccounting",
		124516534: "IETFINTERFACESINTERFACETYPE_a12MppSwitch",
		125504151: "IETFINTERFACESINTERFACETYPE_rs232",
		125597175: "IETFINTERFACESINTERFACETYPE_ifVfiType",
		126930162: "IETFINTERFACESINTERFACETYPE_atmVirtual",
		130617844: "IETFINTERFACESINTERFACETYPE_ds0",
		130617845: "IETFINTERFACESINTERFACETYPE_ds1",
		130617847: "IETFINTERFACESINTERFACETYPE_ds3",
		133030655: "IETFINTERFACESINTERFACETYPE_usb",
		134112364: "IETFINTERFACESINTERFACETYPE_xboxWireless",
		136888738: "IETFINTERFACESINTERFACETYPE_l2vlan",
		142838813: "IETFINTERFACESINTERFACETYPE_aluGponOnu",
		144282644: "IETFINTERFACESINTERFACETYPE_ibm370parChan",
		144667633: "IETFINTERFACESINTERFACETYPE_if_gsn",
		151318645: "IETFINTERFACESINTERFACETYPE_propVirtual",
		152154307: "IETFINTERFACESINTERFACETYPE_docsCableUpstreamRfPort",
		152588497: "IETFINTERFACESINTERFACETYPE_gr303IDT",
		154146406: "IETFINTERFACESINTERFACETYPE_dvbTdm",
		154271532: "IETFINTERFACESINTERFACETYPE_hyperchannel",
		154740499: "IETFINTERFACESINTERFACETYPE_x25ple",
		154868491: "IETFINTERFACESINTERFACETYPE_fastEther",
		159068577: "IETFINTERFACESINTERFACETYPE_adsl",
		159738210: "IETFINTERFACESINTERFACETYPE_stackToStack",
		161466077: "IETFINTERFACESINTERFACETYPE_adsl2plus",
		164396743: "IETFINTERFACESINTERFACETYPE_ipForward",
		164717531: "IETFINTERFACESINTERFACETYPE_imt",
		166057704: "IETFINTERFACESINTERFACETYPE_ip",
		166131694: "IETFINTERFACESINTERFACETYPE_pip",
		167843534: "IETFINTERFACESINTERFACETYPE_x25huntGroup",
		168357285: "IETFINTERFACESINTERFACETYPE_aluEpon",
		173089984: "IETFINTERFACESINTERFACETYPE_aluEponPhysicalUni",
		175632828: "IETFINTERFACESINTERFACETYPE_propCnls",
		178725861: "IETFINTERFACESINTERFACETYPE_capwapDot11Profile",
		179978682: "IETFINTERFACESINTERFACETYPE_voiceDID",
		180496426: "IETFINTERFACESINTERFACETYPE_cnr",
		181667598: "IETFINTERFACESINTERFACETYPE_hdh1822",
		185164750: "IETFINTERFACESINTERFACETYPE_atmDxi",
		185743218: "IETFINTERFACESINTERFACETYPE_arcnetPlus",
		187706792: "IETFINTERFACESINTERFACETYPE_ipOverCdlc",
		188639782: "IETFINTERFACESINTERFACETYPE_linegroup",
		190229931: "IETFINTERFACESINTERFACETYPE_dvbRccMacLayer",
		192403649: "IETFINTERFACESINTERFACETYPE_frameRelay",
		193369057: "IETFINTERFACESINTERFACETYPE_isdn",
		193481284: "IETFINTERFACESINTERFACETYPE_voiceOverCable",
		194889541: "IETFINTERFACESINTERFACETYPE_arap",
		197568375: "IETFINTERFACESINTERFACETYPE_eon",
		198587275: "IETFINTERFACESINTERFACETYPE_sonetOverheadChannel",
		198588222: "IETFINTERFACESINTERFACETYPE_sixToFour",
		199686839: "IETFINTERFACESINTERFACETYPE_pos",
		200640927: "IETFINTERFACESINTERFACETYPE_ethernetCsmacd",
		201568324: "IETFINTERFACESINTERFACETYPE_ds0Bundle",
		209365342: "IETFINTERFACESINTERFACETYPE_atmLogical",
		210946377: "IETFINTERFACESINTERFACETYPE_radioMAC",
		212348549: "IETFINTERFACESINTERFACETYPE_propDocsWirelessMaclayer",
		214224204: "IETFINTERFACESINTERFACETYPE_pon622",
		215039369: "IETFINTERFACESINTERFACETYPE_nsip",
		220777299: "IETFINTERFACESINTERFACETYPE_modem",
		221697026: "IETFINTERFACESINTERFACETYPE_otnOdu",
		226662339: "IETFINTERFACESINTERFACETYPE_iso88024TokenBus",
		228642743: "IETFINTERFACESINTERFACETYPE_coffee",
		230766155: "IETFINTERFACESINTERFACETYPE_docsCableUpstreamChannel",
		231177305: "IETFINTERFACESINTERFACETYPE_atmFuni",
		232563358: "IETFINTERFACESINTERFACETYPE_lmp",
		233775169: "IETFINTERFACESINTERFACETYPE_adsl2",
		235031767: "IETFINTERFACESINTERFACETYPE_cableDownstreamRfPort",
		237186979: "IETFINTERFACESINTERFACETYPE_dvbRccDownstream",
		237300945: "IETFINTERFACESINTERFACETYPE_mediaMailOverIp",
		240798305: "IETFINTERFACESINTERFACETYPE_basicISDN",
		250019614: "IETFINTERFACESINTERFACETYPE_plc",
		259946614: "IETFINTERFACESINTERFACETYPE_propDocsWirelessUpstream",
		263561362: "IETFINTERFACESINTERFACETYPE_teLink",
		265689965: "IETFINTERFACESINTERFACETYPE_pon155",
		266205262: "IETFINTERFACESINTERFACETYPE_transpHdlc",
		269056588: "IETFINTERFACESINTERFACETYPE_sonetVT",
		269831139: "IETFINTERFACESINTERFACETYPE_digitalWrapperOverheadChannel",
		271377999: "IETFINTERFACESINTERFACETYPE_voiceFGDEANA",
		274718125: "IETFINTERFACESINTERFACETYPE_primaryISDN",
		274951974: "IETFINTERFACESINTERFACETYPE_sdci",
		275236866: "IETFINTERFACESINTERFACETYPE_regular1822",
		276070712: "IETFINTERFACESINTERFACETYPE_aal5",
		276070719: "IETFINTERFACESINTERFACETYPE_aal2",
		278556471: "IETFINTERFACESINTERFACETYPE_sonetPath",
		280402025: "IETFINTERFACESINTERFACETYPE_mplsTunnel",
		280868081: "IETFINTERFACESINTERFACETYPE_atm",
		281707114: "IETFINTERFACESINTERFACETYPE_sonet",
		282809795: "IETFINTERFACESINTERFACETYPE_econet",
		283365084: "IETFINTERFACESINTERFACETYPE_l3ipvlan",
		284539790: "IETFINTERFACESINTERFACETYPE_iso88026Man",
		284732616: "IETFINTERFACESINTERFACETYPE_gfast",
		287119162: "IETFINTERFACESINTERFACETYPE_capwapDot11Bss",
		288480505: "IETFINTERFACESINTERFACETYPE_async",
		290391966: "IETFINTERFACESINTERFACETYPE_digitalPowerline",
		293951679: "IETFINTERFACESINTERFACETYPE_ethernet3Mbit",
		295222342: "IETFINTERFACESINTERFACETYPE_g703at64k",
		299181714: "IETFINTERFACESINTERFACETYPE_aluGponPhysicalUni",
		299867081: "IETFINTERFACESINTERFACETYPE_homepna",
		300512605: "IETFINTERFACESINTERFACETYPE_sip",
		301064637: "IETFINTERFACESINTERFACETYPE_eplrs",
		301594276: "IETFINTERFACESINTERFACETYPE_propAtm",
		302514551: "IETFINTERFACESINTERFACETYPE_proteon10Mbit",
		303230600: "IETFINTERFACESINTERFACETYPE_docsCableScte55d1FwdOob",
		303441265: "IETFINTERFACESINTERFACETYPE_iso88022llc",
		305592941: "IETFINTERFACESINTERFACETYPE_fastEtherFX",
		305823410: "IETFINTERFACESINTERFACETYPE_atmRadio",
		307390607: "IETFINTERFACESINTERFACETYPE_cblVectaStar",
		310683645: "IETFINTERFACESINTERFACETYPE_para",
		310831889: "IETFINTERFACESINTERFACETYPE_tunnel",
		311289458: "IETFINTERFACESINTERFACETYPE_voiceOverIp",
		314028106: "IETFINTERFACESINTERFACETYPE_opticalChannel",
		315546603: "IETFINTERFACESINTERFACETYPE_q2931",
		316291514: "IETFINTERFACESINTERFACETYPE_mvl",
		317130169: "IETFINTERFACESINTERFACETYPE_ppp",
		317625102: "IETFINTERFACESINTERFACETYPE_frForward",
		318235148: "IETFINTERFACESINTERFACETYPE_ieee1394",
		319364675: "IETFINTERFACESINTERFACETYPE_aflane8025",
		319364677: "IETFINTERFACESINTERFACETYPE_aflane8023",
		319683734: "IETFINTERFACESINTERFACETYPE_arcnet",
		320085758: "IETFINTERFACESINTERFACETYPE_voiceEncap",
		321577928: "IETFINTERFACESINTERFACETYPE_atmVciEndPt",
		323108786: "IETFINTERFACESINTERFACETYPE_iso88023Csmacd",
		324059589: "IETFINTERFACESINTERFACETYPE_docsCableMCmtsDownstream",
		327234998: "IETFINTERFACESINTERFACETYPE_fastdsl",
		331858766: "IETFINTERFACESINTERFACETYPE_frDlciEndPt",
		335068882: "IETFINTERFACESINTERFACETYPE_aluEponLogicalLink",
		336028310: "IETFINTERFACESINTERFACETYPE_mocaVersion1",
		337561425: "IETFINTERFACESINTERFACETYPE_mfSigLink",
		346881905: "IETFINTERFACESINTERFACETYPE_g9981",
		346881906: "IETFINTERFACESINTERFACETYPE_g9982",
		346881907: "IETFINTERFACESINTERFACETYPE_g9983",
		348860930: "IETFINTERFACESINTERFACETYPE_gtp",
		349846687: "IETFINTERFACESINTERFACETYPE_mpc",
		352651815: "IETFINTERFACESINTERFACETYPE_dvbAsiIn",
		353249714: "IETFINTERFACESINTERFACETYPE_hiperlan2",
		353395016: "IETFINTERFACESINTERFACETYPE_hssi",
		356893880: "IETFINTERFACESINTERFACETYPE_voiceEMFGD",
		358840141: "IETFINTERFACESINTERFACETYPE_sdlc",
		361654039: "IETFINTERFACESINTERFACETYPE_frameRelayMPI",
		363685441: "IETFINTERFACESINTERFACETYPE_ifPwType",
		365660696: "IETFINTERFACESINTERFACETYPE_channel",
		368321000: "IETFINTERFACESINTERFACETYPE_proteon80Mbit",
		368423037: "IETFINTERFACESINTERFACETYPE_v11",
		370817552: "IETFINTERFACESINTERFACETYPE_interleave",
		370951175: "IETFINTERFACESINTERFACETYPE_voiceOverFrameRelay",
		371051115: "IETFINTERFACESINTERFACETYPE_docsCableNdr",
		371051135: "IETFINTERFACESINTERFACETYPE_docsCableNdf",
		373553475: "IETFINTERFACESINTERFACETYPE_ipOverClaw",
		374087486: "IETFINTERFACESINTERFACETYPE_iso88025TokenRing",
		377882412: "IETFINTERFACESINTERFACETYPE_capwapWtpVirtualRadio",
		379872273: "IETFINTERFACESINTERFACETYPE_ieee80211",
		379872274: "IETFINTERFACESINTERFACETYPE_ieee80212",
		382837620: "IETFINTERFACESINTERFACETYPE_hostPad",
		383911039: "IETFINTERFACESINTERFACETYPE_smdsIcip",
		384240760: "IETFINTERFACESINTERFACETYPE_ptm",
		384387804: "IETFINTERFACESINTERFACETYPE_srp",
		384522045: "IETFINTERFACESINTERFACETYPE_gigabitEthernet",
		385064858: "IETFINTERFACESINTERFACETYPE_dvbAsiOut",
		385408320: "IETFINTERFACESINTERFACETYPE_macSecControlledIF",
		386381018: "IETFINTERFACESINTERFACETYPE_gr303RDT",
		389808788: "IETFINTERFACESINTERFACETYPE_pppMultilinkBundle",
		392045632: "IETFINTERFACESINTERFACETYPE_starLan",
		398407724: "IETFINTERFACESINTERFACETYPE_voiceFXO",
		398407728: "IETFINTERFACESINTERFACETYPE_voiceFXS",
		399059610: "IETFINTERFACESINTERFACETYPE_dcn",
		401060431: "IETFINTERFACESINTERFACETYPE_docsCableScte55d2DsOob",
		401978180: "IETFINTERFACESINTERFACETYPE_v36",
		401978181: "IETFINTERFACESINTERFACETYPE_v37",
		401978183: "IETFINTERFACESINTERFACETYPE_v35",
		403182892: "IETFINTERFACESINTERFACETYPE_voiceFGDOS",
		405008209: "IETFINTERFACESINTERFACETYPE_ds1FDL",
		405322027: "IETFINTERFACESINTERFACETYPE_h323Proxy",
		405615795: "IETFINTERFACESINTERFACETYPE_softwareLoopback",
		407559920: "IETFINTERFACESINTERFACETYPE_lapf",
		407559922: "IETFINTERFACESINTERFACETYPE_lapd",
		407559924: "IETFINTERFACESINTERFACETYPE_lapb",
		408677579: "IETFINTERFACESINTERFACETYPE_qllc",
		408914436: "IETFINTERFACESINTERFACETYPE_termPad",
		410011967: "IETFINTERFACESINTERFACETYPE_bits",
		411155170: "IETFINTERFACESINTERFACETYPE_ddnX25",
		413161059: "IETFINTERFACESINTERFACETYPE_ieee8023adLag",
		413279788: "IETFINTERFACESINTERFACETYPE_g703at2mb",
		416724613: "IETFINTERFACESINTERFACETYPE_gpon",
		420258513: "IETFINTERFACESINTERFACETYPE_iso88025Dtr",
		420647634: "IETFINTERFACESINTERFACETYPE_atmSubInterface",
		428082364: "IETFINTERFACESINTERFACETYPE_vdsl",
		428242326: "IETFINTERFACESINTERFACETYPE_docsOfdmaUpstream",
		430304464: "IETFINTERFACESINTERFACETYPE_vmwareNicTeam",
		432639291: "IETFINTERFACESINTERFACETYPE_ieee802154",
		434730178: "IETFINTERFACESINTERFACETYPE_l3ipxvlan",
		437373544: "IETFINTERFACESINTERFACETYPE_atmIma",
		438273729: "IETFINTERFACESINTERFACETYPE_macSecUncontrolledIF",
		441424349: "IETFINTERFACESINTERFACETYPE_fcipLink",
		443995157: "IETFINTERFACESINTERFACETYPE_slip",
		444909704: "IETFINTERFACESINTERFACETYPE_sipSig",
		444910235: "IETFINTERFACESINTERFACETYPE_mpegTransport",
		445020348: "IETFINTERFACESINTERFACETYPE_isup",
		448544526: "IETFINTERFACESINTERFACETYPE_cctEmul",
		451132219: "IETFINTERFACESINTERFACETYPE_ultra",
		455303077: "IETFINTERFACESINTERFACETYPE_iana_interface_type",
		458492100: "IETFINTERFACESINTERFACETYPE_tdlc",
		460680391: "IETFINTERFACESINTERFACETYPE_voiceOverAtm",
		461328495: "IETFINTERFACESINTERFACETYPE_aluEponOnu",
		467591542: "IETFINTERFACESINTERFACETYPE_rsrb",
		469979751: "IETFINTERFACESINTERFACETYPE_shdsl",
		469979921: "IETFINTERFACESINTERFACETYPE_propPointToPointSerial",
		477583546: "IETFINTERFACESINTERFACETYPE_docsCableScte55d1RetOob",
		477828023: "IETFINTERFACESINTERFACETYPE_myrinet",
		487014318: "IETFINTERFACESINTERFACETYPE_h323Gatekeeper",
		487580074: "IETFINTERFACESINTERFACETYPE_ipOverAtm",
		490139090: "IETFINTERFACESINTERFACETYPE_otnOtu",
		491118442: "IETFINTERFACESINTERFACETYPE_aluELP",
		499352976: "IETFINTERFACESINTERFACETYPE_compositeLink",
		501537006: "IETFINTERFACESINTERFACETYPE_qam",
		502195319: "IETFINTERFACESINTERFACETYPE_infiniband",
		504532095: "IETFINTERFACESINTERFACETYPE_hippi",
		505127867: "IETFINTERFACESINTERFACETYPE_dvbRcsMacLayer",
		507519306: "IETFINTERFACESINTERFACETYPE_atmbond",
		513673897: "IETFINTERFACESINTERFACETYPE_ilan",
		513812603: "IETFINTERFACESINTERFACETYPE_ss7SigLink",
		516003680: "IETFINTERFACESINTERFACETYPE_docsOfdmDownstream",
		516076235: "IETFINTERFACESINTERFACETYPE_aviciOpticalEther",
		518755753: "IETFINTERFACESINTERFACETYPE_rpr",
		526983982: "IETFINTERFACESINTERFACETYPE_sipTg",
		527365956: "IETFINTERFACESINTERFACETYPE_wwanPP",
		529837048: "IETFINTERFACESINTERFACETYPE_hippiInterface",
		531578942: "IETFINTERFACESINTERFACETYPE_wwanPP2",
		532084325: "IETFINTERFACESINTERFACETYPE_voiceEBS",
		532973469: "IETFINTERFACESINTERFACETYPE_bsc",
		535720499: "IETFINTERFACESINTERFACETYPE_miox25",
		536418624: "IETFINTERFACESINTERFACETYPE_hdlc",
	}
	IETFInterfacesInterfaceType_value = map[string]int32{
		"IETFINTERFACESINTERFACETYPE_UNSET":                         0,
		"IETFINTERFACESINTERFACETYPE_vmwareVirtualNic":              1565006,
		"IETFINTERFACESINTERFACETYPE_sdsl":                          6510195,
		"IETFINTERFACESINTERFACETYPE_radsl":                         6740905,
		"IETFINTERFACESINTERFACETYPE_x86Laps":                       6820753,
		"IETFINTERFACESINTERFACETYPE_localTalk":                     8569638,
		"IETFINTERFACESINTERFACETYPE_dlsw":                          9975993,
		"IETFINTERFACESINTERFACETYPE_idsl":                          11625257,
		"IETFINTERFACESINTERFACETYPE_nfas":                          15826611,
		"IETFINTERFACESINTERFACETYPE_bridge":                        16268636,
		"IETFINTERFACESINTERFACETYPE_docsCableScte55d2UsOob":        26367302,
		"IETFINTERFACESINTERFACETYPE_ieee80216WMAN":                 27144395,
		"IETFINTERFACESINTERFACETYPE_tr008":                         29978951,
		"IETFINTERFACESINTERFACETYPE_dvbRccUpstream":                32753636,
		"IETFINTERFACESINTERFACETYPE_propDocsWirelessDownstream":    33042753,
		"IETFINTERFACESINTERFACETYPE_frf16MfrBundle":                33466019,
		"IETFINTERFACESINTERFACETYPE_actelisMetaLOOP":               33876615,
		"IETFINTERFACESINTERFACETYPE_virtualIpAddress":              34837125,
		"IETFINTERFACESINTERFACETYPE_hdsl2":                         35292480,
		"IETFINTERFACESINTERFACETYPE_virtualTg":                     36505915,
		"IETFINTERFACESINTERFACETYPE_pdnEtherLoop1":                 39592732,
		"IETFINTERFACESINTERFACETYPE_pdnEtherLoop2":                 39592735,
		"IETFINTERFACESINTERFACETYPE_docsCableUpstream":             40317714,
		"IETFINTERFACESINTERFACETYPE_msdsl":                         42288188,
		"IETFINTERFACESINTERFACETYPE_fddi":                          45545244,
		"IETFINTERFACESINTERFACETYPE_gfp":                           46876684,
		"IETFINTERFACESINTERFACETYPE_propWirelessP2P":               47272810,
		"IETFINTERFACESINTERFACETYPE_fibreChannel":                  48464202,
		"IETFINTERFACESINTERFACETYPE_propBWAp2Mp":                   53391395,
		"IETFINTERFACESINTERFACETYPE_mpls":                          59594435,
		"IETFINTERFACESINTERFACETYPE_fast":                          62764217,
		"IETFINTERFACESINTERFACETYPE_voiceEM":                       68512445,
		"IETFINTERFACESINTERFACETYPE_rfc1483":                       71949014,
		"IETFINTERFACESINTERFACETYPE_opticalTransport":              72145124,
		"IETFINTERFACESINTERFACETYPE_ipSwitch":                      75335244,
		"IETFINTERFACESINTERFACETYPE_frameRelayService":             76605298,
		"IETFINTERFACESINTERFACETYPE_docsCableDownstream":           82085109,
		"IETFINTERFACESINTERFACETYPE_smdsDxi":                       82940545,
		"IETFINTERFACESINTERFACETYPE_x213":                          86923325,
		"IETFINTERFACESINTERFACETYPE_dvbRcsTdma":                    87219061,
		"IETFINTERFACESINTERFACETYPE_reachDSL":                      94937173,
		"IETFINTERFACESINTERFACETYPE_iso88025Fiber":                 95814573,
		"IETFINTERFACESINTERFACETYPE_ces":                           96608266,
		"IETFINTERFACESINTERFACETYPE_isdns":                         98224960,
		"IETFINTERFACESINTERFACETYPE_isdnu":                         98224966,
		"IETFINTERFACESINTERFACETYPE_ciscoISLvlan":                  98611879,
		"IETFINTERFACESINTERFACETYPE_e1":                            98947197,
		"IETFINTERFACESINTERFACETYPE_other":                         102886491,
		"IETFINTERFACESINTERFACETYPE_propMultiplexor":               104872999,
		"IETFINTERFACESINTERFACETYPE_iso88025CRFPInt":               107406283,
		"IETFINTERFACESINTERFACETYPE_opticalChannelGroup":           113721035,
		"IETFINTERFACESINTERFACETYPE_dtm":                           113840220,
		"IETFINTERFACESINTERFACETYPE_frameRelayInterconnect":        114395621,
		"IETFINTERFACESINTERFACETYPE_vdsl2":                         114521030,
		"IETFINTERFACESINTERFACETYPE_escon":                         115055825,
		"IETFINTERFACESINTERFACETYPE_rfc877x25":                     115857711,
		"IETFINTERFACESINTERFACETYPE_x25mlp":                        123303819,
		"IETFINTERFACESINTERFACETYPE_docsCableMaclayer":             123379145,
		"IETFINTERFACESINTERFACETYPE_bgppolicyaccounting":           123979459,
		"IETFINTERFACESINTERFACETYPE_a12MppSwitch":                  124516534,
		"IETFINTERFACESINTERFACETYPE_rs232":                         125504151,
		"IETFINTERFACESINTERFACETYPE_ifVfiType":                     125597175,
		"IETFINTERFACESINTERFACETYPE_atmVirtual":                    126930162,
		"IETFINTERFACESINTERFACETYPE_ds0":                           130617844,
		"IETFINTERFACESINTERFACETYPE_ds1":                           130617845,
		"IETFINTERFACESINTERFACETYPE_ds3":                           130617847,
		"IETFINTERFACESINTERFACETYPE_usb":                           133030655,
		"IETFINTERFACESINTERFACETYPE_xboxWireless":                  134112364,
		"IETFINTERFACESINTERFACETYPE_l2vlan":                        136888738,
		"IETFINTERFACESINTERFACETYPE_aluGponOnu":                    142838813,
		"IETFINTERFACESINTERFACETYPE_ibm370parChan":                 144282644,
		"IETFINTERFACESINTERFACETYPE_if_gsn":                        144667633,
		"IETFINTERFACESINTERFACETYPE_propVirtual":                   151318645,
		"IETFINTERFACESINTERFACETYPE_docsCableUpstreamRfPort":       152154307,
		"IETFINTERFACESINTERFACETYPE_gr303IDT":                      152588497,
		"IETFINTERFACESINTERFACETYPE_dvbTdm":                        154146406,
		"IETFINTERFACESINTERFACETYPE_hyperchannel":                  154271532,
		"IETFINTERFACESINTERFACETYPE_x25ple":                        154740499,
		"IETFINTERFACESINTERFACETYPE_fastEther":                     154868491,
		"IETFINTERFACESINTERFACETYPE_adsl":                          159068577,
		"IETFINTERFACESINTERFACETYPE_stackToStack":                  159738210,
		"IETFINTERFACESINTERFACETYPE_adsl2plus":                     161466077,
		"IETFINTERFACESINTERFACETYPE_ipForward":                     164396743,
		"IETFINTERFACESINTERFACETYPE_imt":                           164717531,
		"IETFINTERFACESINTERFACETYPE_ip":                            166057704,
		"IETFINTERFACESINTERFACETYPE_pip":                           166131694,
		"IETFINTERFACESINTERFACETYPE_x25huntGroup":                  167843534,
		"IETFINTERFACESINTERFACETYPE_aluEpon":                       168357285,
		"IETFINTERFACESINTERFACETYPE_aluEponPhysicalUni":            173089984,
		"IETFINTERFACESINTERFACETYPE_propCnls":                      175632828,
		"IETFINTERFACESINTERFACETYPE_capwapDot11Profile":            178725861,
		"IETFINTERFACESINTERFACETYPE_voiceDID":                      179978682,
		"IETFINTERFACESINTERFACETYPE_cnr":                           180496426,
		"IETFINTERFACESINTERFACETYPE_hdh1822":                       181667598,
		"IETFINTERFACESINTERFACETYPE_atmDxi":                        185164750,
		"IETFINTERFACESINTERFACETYPE_arcnetPlus":                    185743218,
		"IETFINTERFACESINTERFACETYPE_ipOverCdlc":                    187706792,
		"IETFINTERFACESINTERFACETYPE_linegroup":                     188639782,
		"IETFINTERFACESINTERFACETYPE_dvbRccMacLayer":                190229931,
		"IETFINTERFACESINTERFACETYPE_frameRelay":                    192403649,
		"IETFINTERFACESINTERFACETYPE_isdn":                          193369057,
		"IETFINTERFACESINTERFACETYPE_voiceOverCable":                193481284,
		"IETFINTERFACESINTERFACETYPE_arap":                          194889541,
		"IETFINTERFACESINTERFACETYPE_eon":                           197568375,
		"IETFINTERFACESINTERFACETYPE_sonetOverheadChannel":          198587275,
		"IETFINTERFACESINTERFACETYPE_sixToFour":                     198588222,
		"IETFINTERFACESINTERFACETYPE_pos":                           199686839,
		"IETFINTERFACESINTERFACETYPE_ethernetCsmacd":                200640927,
		"IETFINTERFACESINTERFACETYPE_ds0Bundle":                     201568324,
		"IETFINTERFACESINTERFACETYPE_atmLogical":                    209365342,
		"IETFINTERFACESINTERFACETYPE_radioMAC":                      210946377,
		"IETFINTERFACESINTERFACETYPE_propDocsWirelessMaclayer":      212348549,
		"IETFINTERFACESINTERFACETYPE_pon622":                        214224204,
		"IETFINTERFACESINTERFACETYPE_nsip":                          215039369,
		"IETFINTERFACESINTERFACETYPE_modem":                         220777299,
		"IETFINTERFACESINTERFACETYPE_otnOdu":                        221697026,
		"IETFINTERFACESINTERFACETYPE_iso88024TokenBus":              226662339,
		"IETFINTERFACESINTERFACETYPE_coffee":                        228642743,
		"IETFINTERFACESINTERFACETYPE_docsCableUpstreamChannel":      230766155,
		"IETFINTERFACESINTERFACETYPE_atmFuni":                       231177305,
		"IETFINTERFACESINTERFACETYPE_lmp":                           232563358,
		"IETFINTERFACESINTERFACETYPE_adsl2":                         233775169,
		"IETFINTERFACESINTERFACETYPE_cableDownstreamRfPort":         235031767,
		"IETFINTERFACESINTERFACETYPE_dvbRccDownstream":              237186979,
		"IETFINTERFACESINTERFACETYPE_mediaMailOverIp":               237300945,
		"IETFINTERFACESINTERFACETYPE_basicISDN":                     240798305,
		"IETFINTERFACESINTERFACETYPE_plc":                           250019614,
		"IETFINTERFACESINTERFACETYPE_propDocsWirelessUpstream":      259946614,
		"IETFINTERFACESINTERFACETYPE_teLink":                        263561362,
		"IETFINTERFACESINTERFACETYPE_pon155":                        265689965,
		"IETFINTERFACESINTERFACETYPE_transpHdlc":                    266205262,
		"IETFINTERFACESINTERFACETYPE_sonetVT":                       269056588,
		"IETFINTERFACESINTERFACETYPE_digitalWrapperOverheadChannel": 269831139,
		"IETFINTERFACESINTERFACETYPE_voiceFGDEANA":                  271377999,
		"IETFINTERFACESINTERFACETYPE_primaryISDN":                   274718125,
		"IETFINTERFACESINTERFACETYPE_sdci":                          274951974,
		"IETFINTERFACESINTERFACETYPE_regular1822":                   275236866,
		"IETFINTERFACESINTERFACETYPE_aal5":                          276070712,
		"IETFINTERFACESINTERFACETYPE_aal2":                          276070719,
		"IETFINTERFACESINTERFACETYPE_sonetPath":                     278556471,
		"IETFINTERFACESINTERFACETYPE_mplsTunnel":                    280402025,
		"IETFINTERFACESINTERFACETYPE_atm":                           280868081,
		"IETFINTERFACESINTERFACETYPE_sonet":                         281707114,
		"IETFINTERFACESINTERFACETYPE_econet":                        282809795,
		"IETFINTERFACESINTERFACETYPE_l3ipvlan":                      283365084,
		"IETFINTERFACESINTERFACETYPE_iso88026Man":                   284539790,
		"IETFINTERFACESINTERFACETYPE_gfast":                         284732616,
		"IETFINTERFACESINTERFACETYPE_capwapDot11Bss":                287119162,
		"IETFINTERFACESINTERFACETYPE_async":                         288480505,
		"IETFINTERFACESINTERFACETYPE_digitalPowerline":              290391966,
		"IETFINTERFACESINTERFACETYPE_ethernet3Mbit":                 293951679,
		"IETFINTERFACESINTERFACETYPE_g703at64k":                     295222342,
		"IETFINTERFACESINTERFACETYPE_aluGponPhysicalUni":            299181714,
		"IETFINTERFACESINTERFACETYPE_homepna":                       299867081,
		"IETFINTERFACESINTERFACETYPE_sip":                           300512605,
		"IETFINTERFACESINTERFACETYPE_eplrs":                         301064637,
		"IETFINTERFACESINTERFACETYPE_propAtm":                       301594276,
		"IETFINTERFACESINTERFACETYPE_proteon10Mbit":                 302514551,
		"IETFINTERFACESINTERFACETYPE_docsCableScte55d1FwdOob":       303230600,
		"IETFINTERFACESINTERFACETYPE_iso88022llc":                   303441265,
		"IETFINTERFACESINTERFACETYPE_fastEtherFX":                   305592941,
		"IETFINTERFACESINTERFACETYPE_atmRadio":                      305823410,
		"IETFINTERFACESINTERFACETYPE_cblVectaStar":                  307390607,
		"IETFINTERFACESINTERFACETYPE_para":                          310683645,
		"IETFINTERFACESINTERFACETYPE_tunnel":                        310831889,
		"IETFINTERFACESINTERFACETYPE_voiceOverIp":                   311289458,
		"IETFINTERFACESINTERFACETYPE_opticalChannel":                314028106,
		"IETFINTERFACESINTERFACETYPE_q2931":                         315546603,
		"IETFINTERFACESINTERFACETYPE_mvl":                           316291514,
		"IETFINTERFACESINTERFACETYPE_ppp":                           317130169,
		"IETFINTERFACESINTERFACETYPE_frForward":                     317625102,
		"IETFINTERFACESINTERFACETYPE_ieee1394":                      318235148,
		"IETFINTERFACESINTERFACETYPE_aflane8025":                    319364675,
		"IETFINTERFACESINTERFACETYPE_aflane8023":                    319364677,
		"IETFINTERFACESINTERFACETYPE_arcnet":                        319683734,
		"IETFINTERFACESINTERFACETYPE_voiceEncap":                    320085758,
		"IETFINTERFACESINTERFACETYPE_atmVciEndPt":                   321577928,
		"IETFINTERFACESINTERFACETYPE_iso88023Csmacd":                323108786,
		"IETFINTERFACESINTERFACETYPE_docsCableMCmtsDownstream":      324059589,
		"IETFINTERFACESINTERFACETYPE_fastdsl":                       327234998,
		"IETFINTERFACESINTERFACETYPE_frDlciEndPt":                   331858766,
		"IETFINTERFACESINTERFACETYPE_aluEponLogicalLink":            335068882,
		"IETFINTERFACESINTERFACETYPE_mocaVersion1":                  336028310,
		"IETFINTERFACESINTERFACETYPE_mfSigLink":                     337561425,
		"IETFINTERFACESINTERFACETYPE_g9981":                         346881905,
		"IETFINTERFACESINTERFACETYPE_g9982":                         346881906,
		"IETFINTERFACESINTERFACETYPE_g9983":                         346881907,
		"IETFINTERFACESINTERFACETYPE_gtp":                           348860930,
		"IETFINTERFACESINTERFACETYPE_mpc":                           349846687,
		"IETFINTERFACESINTERFACETYPE_dvbAsiIn":                      352651815,
		"IETFINTERFACESINTERFACETYPE_hiperlan2":                     353249714,
		"IETFINTERFACESINTERFACETYPE_hssi":                          353395016,
		"IETFINTERFACESINTERFACETYPE_voiceEMFGD":                    356893880,
		"IETFINTERFACESINTERFACETYPE_sdlc":                          358840141,
		"IETFINTERFACESINTERFACETYPE_frameRelayMPI":                 361654039,
		"IETFINTERFACESINTERFACETYPE_ifPwType":                      363685441,
		"IETFINTERFACESINTERFACETYPE_channel":                       365660696,
		"IETFINTERFACESINTERFACETYPE_proteon80Mbit":                 368321000,
		"IETFINTERFACESINTERFACETYPE_v11":                           368423037,
		"IETFINTERFACESINTERFACETYPE_interleave":                    370817552,
		"IETFINTERFACESINTERFACETYPE_voiceOverFrameRelay":           370951175,
		"IETFINTERFACESINTERFACETYPE_docsCableNdr":                  371051115,
		"IETFINTERFACESINTERFACETYPE_docsCableNdf":                  371051135,
		"IETFINTERFACESINTERFACETYPE_ipOverClaw":                    373553475,
		"IETFINTERFACESINTERFACETYPE_iso88025TokenRing":             374087486,
		"IETFINTERFACESINTERFACETYPE_capwapWtpVirtualRadio":         377882412,
		"IETFINTERFACESINTERFACETYPE_ieee80211":                     379872273,
		"IETFINTERFACESINTERFACETYPE_ieee80212":                     379872274,
		"IETFINTERFACESINTERFACETYPE_hostPad":                       382837620,
		"IETFINTERFACESINTERFACETYPE_smdsIcip":                      383911039,
		"IETFINTERFACESINTERFACETYPE_ptm":                           384240760,
		"IETFINTERFACESINTERFACETYPE_srp":                           384387804,
		"IETFINTERFACESINTERFACETYPE_gigabitEthernet":               384522045,
		"IETFINTERFACESINTERFACETYPE_dvbAsiOut":                     385064858,
		"IETFINTERFACESINTERFACETYPE_macSecControlledIF":            385408320,
		"IETFINTERFACESINTERFACETYPE_gr303RDT":                      386381018,
		"IETFINTERFACESINTERFACETYPE_pppMultilinkBundle":            389808788,
		"IETFINTERFACESINTERFACETYPE_starLan":                       392045632,
		"IETFINTERFACESINTERFACETYPE_voiceFXO":                      398407724,
		"IETFINTERFACESINTERFACETYPE_voiceFXS":                      398407728,
		"IETFINTERFACESINTERFACETYPE_dcn":                           399059610,
		"IETFINTERFACESINTERFACETYPE_docsCableScte55d2DsOob":        401060431,
		"IETFINTERFACESINTERFACETYPE_v36":                           401978180,
		"IETFINTERFACESINTERFACETYPE_v37":                           401978181,
		"IETFINTERFACESINTERFACETYPE_v35":                           401978183,
		"IETFINTERFACESINTERFACETYPE_voiceFGDOS":                    403182892,
		"IETFINTERFACESINTERFACETYPE_ds1FDL":                        405008209,
		"IETFINTERFACESINTERFACETYPE_h323Proxy":                     405322027,
		"IETFINTERFACESINTERFACETYPE_softwareLoopback":              405615795,
		"IETFINTERFACESINTERFACETYPE_lapf":                          407559920,
		"IETFINTERFACESINTERFACETYPE_lapd":                          407559922,
		"IETFINTERFACESINTERFACETYPE_lapb":                          407559924,
		"IETFINTERFACESINTERFACETYPE_qllc":                          408677579,
		"IETFINTERFACESINTERFACETYPE_termPad":                       408914436,
		"IETFINTERFACESINTERFACETYPE_bits":                          410011967,
		"IETFINTERFACESINTERFACETYPE_ddnX25":                        411155170,
		"IETFINTERFACESINTERFACETYPE_ieee8023adLag":                 413161059,
		"IETFINTERFACESINTERFACETYPE_g703at2mb":                     413279788,
		"IETFINTERFACESINTERFACETYPE_gpon":                          416724613,
		"IETFINTERFACESINTERFACETYPE_iso88025Dtr":                   420258513,
		"IETFINTERFACESINTERFACETYPE_atmSubInterface":               420647634,
		"IETFINTERFACESINTERFACETYPE_vdsl":                          428082364,
		"IETFINTERFACESINTERFACETYPE_docsOfdmaUpstream":             428242326,
		"IETFINTERFACESINTERFACETYPE_vmwareNicTeam":                 430304464,
		"IETFINTERFACESINTERFACETYPE_ieee802154":                    432639291,
		"IETFINTERFACESINTERFACETYPE_l3ipxvlan":                     434730178,
		"IETFINTERFACESINTERFACETYPE_atmIma":                        437373544,
		"IETFINTERFACESINTERFACETYPE_macSecUncontrolledIF":          438273729,
		"IETFINTERFACESINTERFACETYPE_fcipLink":                      441424349,
		"IETFINTERFACESINTERFACETYPE_slip":                          443995157,
		"IETFINTERFACESINTERFACETYPE_sipSig":                        444909704,
		"IETFINTERFACESINTERFACETYPE_mpegTransport":                 444910235,
		"IETFINTERFACESINTERFACETYPE_isup":                          445020348,
		"IETFINTERFACESINTERFACETYPE_cctEmul":                       448544526,
		"IETFINTERFACESINTERFACETYPE_ultra":                         451132219,
		"IETFINTERFACESINTERFACETYPE_iana_interface_type":           455303077,
		"IETFINTERFACESINTERFACETYPE_tdlc":                          458492100,
		"IETFINTERFACESINTERFACETYPE_voiceOverAtm":                  460680391,
		"IETFINTERFACESINTERFACETYPE_aluEponOnu":                    461328495,
		"IETFINTERFACESINTERFACETYPE_rsrb":                          467591542,
		"IETFINTERFACESINTERFACETYPE_shdsl":                         469979751,
		"IETFINTERFACESINTERFACETYPE_propPointToPointSerial":        469979921,
		"IETFINTERFACESINTERFACETYPE_docsCableScte55d1RetOob":       477583546,
		"IETFINTERFACESINTERFACETYPE_myrinet":                       477828023,
		"IETFINTERFACESINTERFACETYPE_h323Gatekeeper":                487014318,
		"IETFINTERFACESINTERFACETYPE_ipOverAtm":                     487580074,
		"IETFINTERFACESINTERFACETYPE_otnOtu":                        490139090,
		"IETFINTERFACESINTERFACETYPE_aluELP":                        491118442,
		"IETFINTERFACESINTERFACETYPE_compositeLink":                 499352976,
		"IETFINTERFACESINTERFACETYPE_qam":                           501537006,
		"IETFINTERFACESINTERFACETYPE_infiniband":                    502195319,
		"IETFINTERFACESINTERFACETYPE_hippi":                         504532095,
		"IETFINTERFACESINTERFACETYPE_dvbRcsMacLayer":                505127867,
		"IETFINTERFACESINTERFACETYPE_atmbond":                       507519306,
		"IETFINTERFACESINTERFACETYPE_ilan":                          513673897,
		"IETFINTERFACESINTERFACETYPE_ss7SigLink":                    513812603,
		"IETFINTERFACESINTERFACETYPE_docsOfdmDownstream":            516003680,
		"IETFINTERFACESINTERFACETYPE_aviciOpticalEther":             516076235,
		"IETFINTERFACESINTERFACETYPE_rpr":                           518755753,
		"IETFINTERFACESINTERFACETYPE_sipTg":                         526983982,
		"IETFINTERFACESINTERFACETYPE_wwanPP":                        527365956,
		"IETFINTERFACESINTERFACETYPE_hippiInterface":                529837048,
		"IETFINTERFACESINTERFACETYPE_wwanPP2":                       531578942,
		"IETFINTERFACESINTERFACETYPE_voiceEBS":                      532084325,
		"IETFINTERFACESINTERFACETYPE_bsc":                           532973469,
		"IETFINTERFACESINTERFACETYPE_miox25":                        535720499,
		"IETFINTERFACESINTERFACETYPE_hdlc":                          536418624,
	}
)

func (x IETFInterfacesInterfaceType) Enum() *IETFInterfacesInterfaceType {
	p := new(IETFInterfacesInterfaceType)
	*p = x
	return p
}

func (x IETFInterfacesInterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IETFInterfacesInterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[0].Descriptor()
}

func (IETFInterfacesInterfaceType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[0]
}

func (x IETFInterfacesInterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IETFInterfacesInterfaceType.Descriptor instead.
func (IETFInterfacesInterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{0}
}

// OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE represents an enumerated type generated for the YANG identity AAA_ACCOUNTING_EVENT_TYPE.
type OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE int32

const (
	OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE_OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_UNSET                        OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE = 0
	OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE_OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_AAA_ACCOUNTING_EVENT_LOGIN   OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE = 32244738
	OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE_OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_AAA_ACCOUNTING_EVENT_COMMAND OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE = 42489322
)

// Enum value maps for OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE.
var (
	OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE_name = map[int32]string{
		0:        "OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_UNSET",
		32244738: "OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_AAA_ACCOUNTING_EVENT_LOGIN",
		42489322: "OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_AAA_ACCOUNTING_EVENT_COMMAND",
	}
	OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE_value = map[string]int32{
		"OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_UNSET":                        0,
		"OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_AAA_ACCOUNTING_EVENT_LOGIN":   32244738,
		"OPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_AAA_ACCOUNTING_EVENT_COMMAND": 42489322,
	}
)

func (x OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE) Enum() *OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE {
	p := new(OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE)
	*p = x
	return p
}

func (x OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[1].Descriptor()
}

func (OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[1]
}

func (x OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE.Descriptor instead.
func (OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{1}
}

// OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE represents an enumerated type generated for the YANG identity AAA_AUTHORIZATION_EVENT_TYPE.
type OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE int32

const (
	OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE_OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_UNSET                           OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE = 0
	OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE_OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_AAA_AUTHORIZATION_EVENT_COMMAND OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE = 274509164
	OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE_OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_AAA_AUTHORIZATION_EVENT_CONFIG  OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE = 470326711
)

// Enum value maps for OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE.
var (
	OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE_name = map[int32]string{
		0:         "OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_UNSET",
		274509164: "OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_AAA_AUTHORIZATION_EVENT_COMMAND",
		470326711: "OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_AAA_AUTHORIZATION_EVENT_CONFIG",
	}
	OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE_value = map[string]int32{
		"OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_UNSET":                           0,
		"OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_AAA_AUTHORIZATION_EVENT_COMMAND": 274509164,
		"OPENCONFIGAAATYPESAAAAUTHORIZATIONEVENTTYPE_AAA_AUTHORIZATION_EVENT_CONFIG":  470326711,
	}
)

func (x OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE) Enum() *OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE {
	p := new(OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE)
	*p = x
	return p
}

func (x OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[2].Descriptor()
}

func (OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[2]
}

func (x OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE.Descriptor instead.
func (OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{2}
}

// OpenconfigAaaTypesAAAMETHODTYPE represents an enumerated type generated for the YANG identity AAA_METHOD_TYPE.
type OpenconfigAaaTypesAAAMETHODTYPE int32

const (
	OpenconfigAaaTypesAAAMETHODTYPE_OPENCONFIGAAATYPESAAAMETHODTYPE_UNSET      OpenconfigAaaTypesAAAMETHODTYPE = 0
	OpenconfigAaaTypesAAAMETHODTYPE_OPENCONFIGAAATYPESAAAMETHODTYPE_TACACS_ALL OpenconfigAaaTypesAAAMETHODTYPE = 419164516
	OpenconfigAaaTypesAAAMETHODTYPE_OPENCONFIGAAATYPESAAAMETHODTYPE_RADIUS_ALL OpenconfigAaaTypesAAAMETHODTYPE = 492107981
	OpenconfigAaaTypesAAAMETHODTYPE_OPENCONFIGAAATYPESAAAMETHODTYPE_LOCAL      OpenconfigAaaTypesAAAMETHODTYPE = 525920480
)

// Enum value maps for OpenconfigAaaTypesAAAMETHODTYPE.
var (
	OpenconfigAaaTypesAAAMETHODTYPE_name = map[int32]string{
		0:         "OPENCONFIGAAATYPESAAAMETHODTYPE_UNSET",
		419164516: "OPENCONFIGAAATYPESAAAMETHODTYPE_TACACS_ALL",
		492107981: "OPENCONFIGAAATYPESAAAMETHODTYPE_RADIUS_ALL",
		525920480: "OPENCONFIGAAATYPESAAAMETHODTYPE_LOCAL",
	}
	OpenconfigAaaTypesAAAMETHODTYPE_value = map[string]int32{
		"OPENCONFIGAAATYPESAAAMETHODTYPE_UNSET":      0,
		"OPENCONFIGAAATYPESAAAMETHODTYPE_TACACS_ALL": 419164516,
		"OPENCONFIGAAATYPESAAAMETHODTYPE_RADIUS_ALL": 492107981,
		"OPENCONFIGAAATYPESAAAMETHODTYPE_LOCAL":      525920480,
	}
)

func (x OpenconfigAaaTypesAAAMETHODTYPE) Enum() *OpenconfigAaaTypesAAAMETHODTYPE {
	p := new(OpenconfigAaaTypesAAAMETHODTYPE)
	*p = x
	return p
}

func (x OpenconfigAaaTypesAAAMETHODTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAaaTypesAAAMETHODTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[3].Descriptor()
}

func (OpenconfigAaaTypesAAAMETHODTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[3]
}

func (x OpenconfigAaaTypesAAAMETHODTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAaaTypesAAAMETHODTYPE.Descriptor instead.
func (OpenconfigAaaTypesAAAMETHODTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{3}
}

// OpenconfigAaaTypesAAASERVERTYPE represents an enumerated type generated for the YANG identity AAA_SERVER_TYPE.
type OpenconfigAaaTypesAAASERVERTYPE int32

const (
	OpenconfigAaaTypesAAASERVERTYPE_OPENCONFIGAAATYPESAAASERVERTYPE_UNSET  OpenconfigAaaTypesAAASERVERTYPE = 0
	OpenconfigAaaTypesAAASERVERTYPE_OPENCONFIGAAATYPESAAASERVERTYPE_TACACS OpenconfigAaaTypesAAASERVERTYPE = 5938954
	OpenconfigAaaTypesAAASERVERTYPE_OPENCONFIGAAATYPESAAASERVERTYPE_RADIUS OpenconfigAaaTypesAAASERVERTYPE = 19148247
)

// Enum value maps for OpenconfigAaaTypesAAASERVERTYPE.
var (
	OpenconfigAaaTypesAAASERVERTYPE_name = map[int32]string{
		0:        "OPENCONFIGAAATYPESAAASERVERTYPE_UNSET",
		5938954:  "OPENCONFIGAAATYPESAAASERVERTYPE_TACACS",
		19148247: "OPENCONFIGAAATYPESAAASERVERTYPE_RADIUS",
	}
	OpenconfigAaaTypesAAASERVERTYPE_value = map[string]int32{
		"OPENCONFIGAAATYPESAAASERVERTYPE_UNSET":  0,
		"OPENCONFIGAAATYPESAAASERVERTYPE_TACACS": 5938954,
		"OPENCONFIGAAATYPESAAASERVERTYPE_RADIUS": 19148247,
	}
)

func (x OpenconfigAaaTypesAAASERVERTYPE) Enum() *OpenconfigAaaTypesAAASERVERTYPE {
	p := new(OpenconfigAaaTypesAAASERVERTYPE)
	*p = x
	return p
}

func (x OpenconfigAaaTypesAAASERVERTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAaaTypesAAASERVERTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[4].Descriptor()
}

func (OpenconfigAaaTypesAAASERVERTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[4]
}

func (x OpenconfigAaaTypesAAASERVERTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAaaTypesAAASERVERTYPE.Descriptor instead.
func (OpenconfigAaaTypesAAASERVERTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{4}
}

// OpenconfigAaaTypesSYSTEMDEFINEDROLES represents an enumerated type generated for the YANG identity SYSTEM_DEFINED_ROLES.
type OpenconfigAaaTypesSYSTEMDEFINEDROLES int32

const (
	OpenconfigAaaTypesSYSTEMDEFINEDROLES_OPENCONFIGAAATYPESSYSTEMDEFINEDROLES_UNSET             OpenconfigAaaTypesSYSTEMDEFINEDROLES = 0
	OpenconfigAaaTypesSYSTEMDEFINEDROLES_OPENCONFIGAAATYPESSYSTEMDEFINEDROLES_SYSTEM_ROLE_ADMIN OpenconfigAaaTypesSYSTEMDEFINEDROLES = 390815160
)

// Enum value maps for OpenconfigAaaTypesSYSTEMDEFINEDROLES.
var (
	OpenconfigAaaTypesSYSTEMDEFINEDROLES_name = map[int32]string{
		0:         "OPENCONFIGAAATYPESSYSTEMDEFINEDROLES_UNSET",
		390815160: "OPENCONFIGAAATYPESSYSTEMDEFINEDROLES_SYSTEM_ROLE_ADMIN",
	}
	OpenconfigAaaTypesSYSTEMDEFINEDROLES_value = map[string]int32{
		"OPENCONFIGAAATYPESSYSTEMDEFINEDROLES_UNSET":             0,
		"OPENCONFIGAAATYPESSYSTEMDEFINEDROLES_SYSTEM_ROLE_ADMIN": 390815160,
	}
)

func (x OpenconfigAaaTypesSYSTEMDEFINEDROLES) Enum() *OpenconfigAaaTypesSYSTEMDEFINEDROLES {
	p := new(OpenconfigAaaTypesSYSTEMDEFINEDROLES)
	*p = x
	return p
}

func (x OpenconfigAaaTypesSYSTEMDEFINEDROLES) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAaaTypesSYSTEMDEFINEDROLES) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[5].Descriptor()
}

func (OpenconfigAaaTypesSYSTEMDEFINEDROLES) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[5]
}

func (x OpenconfigAaaTypesSYSTEMDEFINEDROLES) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAaaTypesSYSTEMDEFINEDROLES.Descriptor instead.
func (OpenconfigAaaTypesSYSTEMDEFINEDROLES) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{5}
}

// OpenconfigAclACLCOUNTERCAPABILITY represents an enumerated type generated for the YANG identity ACL_COUNTER_CAPABILITY.
type OpenconfigAclACLCOUNTERCAPABILITY int32

const (
	OpenconfigAclACLCOUNTERCAPABILITY_OPENCONFIGACLACLCOUNTERCAPABILITY_UNSET               OpenconfigAclACLCOUNTERCAPABILITY = 0
	OpenconfigAclACLCOUNTERCAPABILITY_OPENCONFIGACLACLCOUNTERCAPABILITY_INTERFACE_ONLY      OpenconfigAclACLCOUNTERCAPABILITY = 99175805
	OpenconfigAclACLCOUNTERCAPABILITY_OPENCONFIGACLACLCOUNTERCAPABILITY_INTERFACE_AGGREGATE OpenconfigAclACLCOUNTERCAPABILITY = 132869768
	OpenconfigAclACLCOUNTERCAPABILITY_OPENCONFIGACLACLCOUNTERCAPABILITY_AGGREGATE_ONLY      OpenconfigAclACLCOUNTERCAPABILITY = 266482693
)

// Enum value maps for OpenconfigAclACLCOUNTERCAPABILITY.
var (
	OpenconfigAclACLCOUNTERCAPABILITY_name = map[int32]string{
		0:         "OPENCONFIGACLACLCOUNTERCAPABILITY_UNSET",
		99175805:  "OPENCONFIGACLACLCOUNTERCAPABILITY_INTERFACE_ONLY",
		132869768: "OPENCONFIGACLACLCOUNTERCAPABILITY_INTERFACE_AGGREGATE",
		266482693: "OPENCONFIGACLACLCOUNTERCAPABILITY_AGGREGATE_ONLY",
	}
	OpenconfigAclACLCOUNTERCAPABILITY_value = map[string]int32{
		"OPENCONFIGACLACLCOUNTERCAPABILITY_UNSET":               0,
		"OPENCONFIGACLACLCOUNTERCAPABILITY_INTERFACE_ONLY":      99175805,
		"OPENCONFIGACLACLCOUNTERCAPABILITY_INTERFACE_AGGREGATE": 132869768,
		"OPENCONFIGACLACLCOUNTERCAPABILITY_AGGREGATE_ONLY":      266482693,
	}
)

func (x OpenconfigAclACLCOUNTERCAPABILITY) Enum() *OpenconfigAclACLCOUNTERCAPABILITY {
	p := new(OpenconfigAclACLCOUNTERCAPABILITY)
	*p = x
	return p
}

func (x OpenconfigAclACLCOUNTERCAPABILITY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAclACLCOUNTERCAPABILITY) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[6].Descriptor()
}

func (OpenconfigAclACLCOUNTERCAPABILITY) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[6]
}

func (x OpenconfigAclACLCOUNTERCAPABILITY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAclACLCOUNTERCAPABILITY.Descriptor instead.
func (OpenconfigAclACLCOUNTERCAPABILITY) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{6}
}

// OpenconfigAclACLTYPE represents an enumerated type generated for the YANG identity ACL_TYPE.
type OpenconfigAclACLTYPE int32

const (
	OpenconfigAclACLTYPE_OPENCONFIGACLACLTYPE_UNSET     OpenconfigAclACLTYPE = 0
	OpenconfigAclACLTYPE_OPENCONFIGACLACLTYPE_ACL_L2    OpenconfigAclACLTYPE = 132416467
	OpenconfigAclACLTYPE_OPENCONFIGACLACLTYPE_ACL_MPLS  OpenconfigAclACLTYPE = 234358929
	OpenconfigAclACLTYPE_OPENCONFIGACLACLTYPE_ACL_IPV4  OpenconfigAclACLTYPE = 411031372
	OpenconfigAclACLTYPE_OPENCONFIGACLACLTYPE_ACL_IPV6  OpenconfigAclACLTYPE = 411031374
	OpenconfigAclACLTYPE_OPENCONFIGACLACLTYPE_ACL_MIXED OpenconfigAclACLTYPE = 469804226
)

// Enum value maps for OpenconfigAclACLTYPE.
var (
	OpenconfigAclACLTYPE_name = map[int32]string{
		0:         "OPENCONFIGACLACLTYPE_UNSET",
		132416467: "OPENCONFIGACLACLTYPE_ACL_L2",
		234358929: "OPENCONFIGACLACLTYPE_ACL_MPLS",
		411031372: "OPENCONFIGACLACLTYPE_ACL_IPV4",
		411031374: "OPENCONFIGACLACLTYPE_ACL_IPV6",
		469804226: "OPENCONFIGACLACLTYPE_ACL_MIXED",
	}
	OpenconfigAclACLTYPE_value = map[string]int32{
		"OPENCONFIGACLACLTYPE_UNSET":     0,
		"OPENCONFIGACLACLTYPE_ACL_L2":    132416467,
		"OPENCONFIGACLACLTYPE_ACL_MPLS":  234358929,
		"OPENCONFIGACLACLTYPE_ACL_IPV4":  411031372,
		"OPENCONFIGACLACLTYPE_ACL_IPV6":  411031374,
		"OPENCONFIGACLACLTYPE_ACL_MIXED": 469804226,
	}
)

func (x OpenconfigAclACLTYPE) Enum() *OpenconfigAclACLTYPE {
	p := new(OpenconfigAclACLTYPE)
	*p = x
	return p
}

func (x OpenconfigAclACLTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAclACLTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[7].Descriptor()
}

func (OpenconfigAclACLTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[7]
}

func (x OpenconfigAclACLTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAclACLTYPE.Descriptor instead.
func (OpenconfigAclACLTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{7}
}

// OpenconfigAclFORWARDINGACTION represents an enumerated type generated for the YANG identity FORWARDING_ACTION.
type OpenconfigAclFORWARDINGACTION int32

const (
	OpenconfigAclFORWARDINGACTION_OPENCONFIGACLFORWARDINGACTION_UNSET  OpenconfigAclFORWARDINGACTION = 0
	OpenconfigAclFORWARDINGACTION_OPENCONFIGACLFORWARDINGACTION_REJECT OpenconfigAclFORWARDINGACTION = 83418768
	OpenconfigAclFORWARDINGACTION_OPENCONFIGACLFORWARDINGACTION_DROP   OpenconfigAclFORWARDINGACTION = 303263142
	OpenconfigAclFORWARDINGACTION_OPENCONFIGACLFORWARDINGACTION_ACCEPT OpenconfigAclFORWARDINGACTION = 464955669
)

// Enum value maps for OpenconfigAclFORWARDINGACTION.
var (
	OpenconfigAclFORWARDINGACTION_name = map[int32]string{
		0:         "OPENCONFIGACLFORWARDINGACTION_UNSET",
		83418768:  "OPENCONFIGACLFORWARDINGACTION_REJECT",
		303263142: "OPENCONFIGACLFORWARDINGACTION_DROP",
		464955669: "OPENCONFIGACLFORWARDINGACTION_ACCEPT",
	}
	OpenconfigAclFORWARDINGACTION_value = map[string]int32{
		"OPENCONFIGACLFORWARDINGACTION_UNSET":  0,
		"OPENCONFIGACLFORWARDINGACTION_REJECT": 83418768,
		"OPENCONFIGACLFORWARDINGACTION_DROP":   303263142,
		"OPENCONFIGACLFORWARDINGACTION_ACCEPT": 464955669,
	}
)

func (x OpenconfigAclFORWARDINGACTION) Enum() *OpenconfigAclFORWARDINGACTION {
	p := new(OpenconfigAclFORWARDINGACTION)
	*p = x
	return p
}

func (x OpenconfigAclFORWARDINGACTION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAclFORWARDINGACTION) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[8].Descriptor()
}

func (OpenconfigAclFORWARDINGACTION) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[8]
}

func (x OpenconfigAclFORWARDINGACTION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAclFORWARDINGACTION.Descriptor instead.
func (OpenconfigAclFORWARDINGACTION) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{8}
}

// OpenconfigAclLOGACTION represents an enumerated type generated for the YANG identity LOG_ACTION.
type OpenconfigAclLOGACTION int32

const (
	OpenconfigAclLOGACTION_OPENCONFIGACLLOGACTION_UNSET      OpenconfigAclLOGACTION = 0
	OpenconfigAclLOGACTION_OPENCONFIGACLLOGACTION_LOG_NONE   OpenconfigAclLOGACTION = 184906209
	OpenconfigAclLOGACTION_OPENCONFIGACLLOGACTION_LOG_SYSLOG OpenconfigAclLOGACTION = 513275964
)

// Enum value maps for OpenconfigAclLOGACTION.
var (
	OpenconfigAclLOGACTION_name = map[int32]string{
		0:         "OPENCONFIGACLLOGACTION_UNSET",
		184906209: "OPENCONFIGACLLOGACTION_LOG_NONE",
		513275964: "OPENCONFIGACLLOGACTION_LOG_SYSLOG",
	}
	OpenconfigAclLOGACTION_value = map[string]int32{
		"OPENCONFIGACLLOGACTION_UNSET":      0,
		"OPENCONFIGACLLOGACTION_LOG_NONE":   184906209,
		"OPENCONFIGACLLOGACTION_LOG_SYSLOG": 513275964,
	}
)

func (x OpenconfigAclLOGACTION) Enum() *OpenconfigAclLOGACTION {
	p := new(OpenconfigAclLOGACTION)
	*p = x
	return p
}

func (x OpenconfigAclLOGACTION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAclLOGACTION) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[9].Descriptor()
}

func (OpenconfigAclLOGACTION) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[9]
}

func (x OpenconfigAclLOGACTION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAclLOGACTION.Descriptor instead.
func (OpenconfigAclLOGACTION) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{9}
}

// OpenconfigAftTypesEncapsulationHeaderType represents an enumerated type generated for the YANG enumerated type encapsulation-header-type.
type OpenconfigAftTypesEncapsulationHeaderType int32

const (
	OpenconfigAftTypesEncapsulationHeaderType_OPENCONFIGAFTTYPESENCAPSULATIONHEADERTYPE_UNSET OpenconfigAftTypesEncapsulationHeaderType = 0
	OpenconfigAftTypesEncapsulationHeaderType_OPENCONFIGAFTTYPESENCAPSULATIONHEADERTYPE_GRE   OpenconfigAftTypesEncapsulationHeaderType = 1
	OpenconfigAftTypesEncapsulationHeaderType_OPENCONFIGAFTTYPESENCAPSULATIONHEADERTYPE_IPV4  OpenconfigAftTypesEncapsulationHeaderType = 2
	OpenconfigAftTypesEncapsulationHeaderType_OPENCONFIGAFTTYPESENCAPSULATIONHEADERTYPE_IPV6  OpenconfigAftTypesEncapsulationHeaderType = 3
	OpenconfigAftTypesEncapsulationHeaderType_OPENCONFIGAFTTYPESENCAPSULATIONHEADERTYPE_MPLS  OpenconfigAftTypesEncapsulationHeaderType = 4
	OpenconfigAftTypesEncapsulationHeaderType_OPENCONFIGAFTTYPESENCAPSULATIONHEADERTYPE_VXLAN OpenconfigAftTypesEncapsulationHeaderType = 5
)

// Enum value maps for OpenconfigAftTypesEncapsulationHeaderType.
var (
	OpenconfigAftTypesEncapsulationHeaderType_name = map[int32]string{
		0: "OPENCONFIGAFTTYPESENCAPSULATIONHEADERTYPE_UNSET",
		1: "OPENCONFIGAFTTYPESENCAPSULATIONHEADERTYPE_GRE",
		2: "OPENCONFIGAFTTYPESENCAPSULATIONHEADERTYPE_IPV4",
		3: "OPENCONFIGAFTTYPESENCAPSULATIONHEADERTYPE_IPV6",
		4: "OPENCONFIGAFTTYPESENCAPSULATIONHEADERTYPE_MPLS",
		5: "OPENCONFIGAFTTYPESENCAPSULATIONHEADERTYPE_VXLAN",
	}
	OpenconfigAftTypesEncapsulationHeaderType_value = map[string]int32{
		"OPENCONFIGAFTTYPESENCAPSULATIONHEADERTYPE_UNSET": 0,
		"OPENCONFIGAFTTYPESENCAPSULATIONHEADERTYPE_GRE":   1,
		"OPENCONFIGAFTTYPESENCAPSULATIONHEADERTYPE_IPV4":  2,
		"OPENCONFIGAFTTYPESENCAPSULATIONHEADERTYPE_IPV6":  3,
		"OPENCONFIGAFTTYPESENCAPSULATIONHEADERTYPE_MPLS":  4,
		"OPENCONFIGAFTTYPESENCAPSULATIONHEADERTYPE_VXLAN": 5,
	}
)

func (x OpenconfigAftTypesEncapsulationHeaderType) Enum() *OpenconfigAftTypesEncapsulationHeaderType {
	p := new(OpenconfigAftTypesEncapsulationHeaderType)
	*p = x
	return p
}

func (x OpenconfigAftTypesEncapsulationHeaderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAftTypesEncapsulationHeaderType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[10].Descriptor()
}

func (OpenconfigAftTypesEncapsulationHeaderType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[10]
}

func (x OpenconfigAftTypesEncapsulationHeaderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAftTypesEncapsulationHeaderType.Descriptor instead.
func (OpenconfigAftTypesEncapsulationHeaderType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{10}
}

// OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY represents an enumerated type generated for the YANG identity OPENCONFIG_ALARM_SEVERITY.
type OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY int32

const (
	OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY_OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_UNSET    OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY = 0
	OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY_OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_UNKNOWN  OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY = 70492973
	OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY_OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_CRITICAL OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY = 123728538
	OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY_OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_MAJOR    OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY = 157280644
	OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY_OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_MINOR    OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY = 275040832
	OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY_OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_WARNING  OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY = 380442931
)

// Enum value maps for OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY.
var (
	OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY_name = map[int32]string{
		0:         "OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_UNSET",
		70492973:  "OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_UNKNOWN",
		123728538: "OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_CRITICAL",
		157280644: "OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_MAJOR",
		275040832: "OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_MINOR",
		380442931: "OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_WARNING",
	}
	OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY_value = map[string]int32{
		"OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_UNSET":    0,
		"OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_UNKNOWN":  70492973,
		"OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_CRITICAL": 123728538,
		"OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_MAJOR":    157280644,
		"OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_MINOR":    275040832,
		"OPENCONFIGALARMTYPESOPENCONFIGALARMSEVERITY_WARNING":  380442931,
	}
)

func (x OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY) Enum() *OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY {
	p := new(OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY)
	*p = x
	return p
}

func (x OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[11].Descriptor()
}

func (OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[11]
}

func (x OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY.Descriptor instead.
func (OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{11}
}

// OpenconfigAlarmTypesOPENCONFIGALARMTYPEID represents an enumerated type generated for the YANG identity OPENCONFIG_ALARM_TYPE_ID.
type OpenconfigAlarmTypesOPENCONFIGALARMTYPEID int32

const (
	OpenconfigAlarmTypesOPENCONFIGALARMTYPEID_OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_UNSET OpenconfigAlarmTypesOPENCONFIGALARMTYPEID = 0
	OpenconfigAlarmTypesOPENCONFIGALARMTYPEID_OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_EQPT  OpenconfigAlarmTypesOPENCONFIGALARMTYPEID = 54945826
	OpenconfigAlarmTypesOPENCONFIGALARMTYPEID_OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_AIS   OpenconfigAlarmTypesOPENCONFIGALARMTYPEID = 356419557
	OpenconfigAlarmTypesOPENCONFIGALARMTYPEID_OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_LOS   OpenconfigAlarmTypesOPENCONFIGALARMTYPEID = 389213562
	OpenconfigAlarmTypesOPENCONFIGALARMTYPEID_OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_OTS   OpenconfigAlarmTypesOPENCONFIGALARMTYPEID = 507085248
)

// Enum value maps for OpenconfigAlarmTypesOPENCONFIGALARMTYPEID.
var (
	OpenconfigAlarmTypesOPENCONFIGALARMTYPEID_name = map[int32]string{
		0:         "OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_UNSET",
		54945826:  "OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_EQPT",
		356419557: "OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_AIS",
		389213562: "OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_LOS",
		507085248: "OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_OTS",
	}
	OpenconfigAlarmTypesOPENCONFIGALARMTYPEID_value = map[string]int32{
		"OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_UNSET": 0,
		"OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_EQPT":  54945826,
		"OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_AIS":   356419557,
		"OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_LOS":   389213562,
		"OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEID_OTS":   507085248,
	}
)

func (x OpenconfigAlarmTypesOPENCONFIGALARMTYPEID) Enum() *OpenconfigAlarmTypesOPENCONFIGALARMTYPEID {
	p := new(OpenconfigAlarmTypesOPENCONFIGALARMTYPEID)
	*p = x
	return p
}

func (x OpenconfigAlarmTypesOPENCONFIGALARMTYPEID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAlarmTypesOPENCONFIGALARMTYPEID) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[12].Descriptor()
}

func (OpenconfigAlarmTypesOPENCONFIGALARMTYPEID) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[12]
}

func (x OpenconfigAlarmTypesOPENCONFIGALARMTYPEID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAlarmTypesOPENCONFIGALARMTYPEID.Descriptor instead.
func (OpenconfigAlarmTypesOPENCONFIGALARMTYPEID) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{12}
}

// OpenconfigBfdBfdDiagnosticCode represents an enumerated type generated for the YANG enumerated type bfd-diagnostic-code.
type OpenconfigBfdBfdDiagnosticCode int32

const (
	OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_UNSET                          OpenconfigBfdBfdDiagnosticCode = 0
	OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_NO_DIAGNOSTIC                  OpenconfigBfdBfdDiagnosticCode = 1
	OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_DETECTION_TIMEOUT              OpenconfigBfdBfdDiagnosticCode = 2
	OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_ECHO_FAILED                    OpenconfigBfdBfdDiagnosticCode = 3
	OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_FORWARDING_RESET               OpenconfigBfdBfdDiagnosticCode = 4
	OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_PATH_DOWN                      OpenconfigBfdBfdDiagnosticCode = 5
	OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_CONCATENATED_PATH_DOWN         OpenconfigBfdBfdDiagnosticCode = 6
	OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_ADMIN_DOWN                     OpenconfigBfdBfdDiagnosticCode = 7
	OpenconfigBfdBfdDiagnosticCode_OPENCONFIGBFDBFDDIAGNOSTICCODE_REVERSE_CONCATENATED_PATH_DOWN OpenconfigBfdBfdDiagnosticCode = 8
)

// Enum value maps for OpenconfigBfdBfdDiagnosticCode.
var (
	OpenconfigBfdBfdDiagnosticCode_name = map[int32]string{
		0: "OPENCONFIGBFDBFDDIAGNOSTICCODE_UNSET",
		1: "OPENCONFIGBFDBFDDIAGNOSTICCODE_NO_DIAGNOSTIC",
		2: "OPENCONFIGBFDBFDDIAGNOSTICCODE_DETECTION_TIMEOUT",
		3: "OPENCONFIGBFDBFDDIAGNOSTICCODE_ECHO_FAILED",
		4: "OPENCONFIGBFDBFDDIAGNOSTICCODE_FORWARDING_RESET",
		5: "OPENCONFIGBFDBFDDIAGNOSTICCODE_PATH_DOWN",
		6: "OPENCONFIGBFDBFDDIAGNOSTICCODE_CONCATENATED_PATH_DOWN",
		7: "OPENCONFIGBFDBFDDIAGNOSTICCODE_ADMIN_DOWN",
		8: "OPENCONFIGBFDBFDDIAGNOSTICCODE_REVERSE_CONCATENATED_PATH_DOWN",
	}
	OpenconfigBfdBfdDiagnosticCode_value = map[string]int32{
		"OPENCONFIGBFDBFDDIAGNOSTICCODE_UNSET":                          0,
		"OPENCONFIGBFDBFDDIAGNOSTICCODE_NO_DIAGNOSTIC":                  1,
		"OPENCONFIGBFDBFDDIAGNOSTICCODE_DETECTION_TIMEOUT":              2,
		"OPENCONFIGBFDBFDDIAGNOSTICCODE_ECHO_FAILED":                    3,
		"OPENCONFIGBFDBFDDIAGNOSTICCODE_FORWARDING_RESET":               4,
		"OPENCONFIGBFDBFDDIAGNOSTICCODE_PATH_DOWN":                      5,
		"OPENCONFIGBFDBFDDIAGNOSTICCODE_CONCATENATED_PATH_DOWN":         6,
		"OPENCONFIGBFDBFDDIAGNOSTICCODE_ADMIN_DOWN":                     7,
		"OPENCONFIGBFDBFDDIAGNOSTICCODE_REVERSE_CONCATENATED_PATH_DOWN": 8,
	}
)

func (x OpenconfigBfdBfdDiagnosticCode) Enum() *OpenconfigBfdBfdDiagnosticCode {
	p := new(OpenconfigBfdBfdDiagnosticCode)
	*p = x
	return p
}

func (x OpenconfigBfdBfdDiagnosticCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBfdBfdDiagnosticCode) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[13].Descriptor()
}

func (OpenconfigBfdBfdDiagnosticCode) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[13]
}

func (x OpenconfigBfdBfdDiagnosticCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBfdBfdDiagnosticCode.Descriptor instead.
func (OpenconfigBfdBfdDiagnosticCode) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{13}
}

// OpenconfigBfdBfdSessionState represents an enumerated type generated for the YANG enumerated type bfd-session-state.
type OpenconfigBfdBfdSessionState int32

const (
	OpenconfigBfdBfdSessionState_OPENCONFIGBFDBFDSESSIONSTATE_UNSET      OpenconfigBfdBfdSessionState = 0
	OpenconfigBfdBfdSessionState_OPENCONFIGBFDBFDSESSIONSTATE_UP         OpenconfigBfdBfdSessionState = 1
	OpenconfigBfdBfdSessionState_OPENCONFIGBFDBFDSESSIONSTATE_DOWN       OpenconfigBfdBfdSessionState = 2
	OpenconfigBfdBfdSessionState_OPENCONFIGBFDBFDSESSIONSTATE_ADMIN_DOWN OpenconfigBfdBfdSessionState = 3
	OpenconfigBfdBfdSessionState_OPENCONFIGBFDBFDSESSIONSTATE_INIT       OpenconfigBfdBfdSessionState = 4
)

// Enum value maps for OpenconfigBfdBfdSessionState.
var (
	OpenconfigBfdBfdSessionState_name = map[int32]string{
		0: "OPENCONFIGBFDBFDSESSIONSTATE_UNSET",
		1: "OPENCONFIGBFDBFDSESSIONSTATE_UP",
		2: "OPENCONFIGBFDBFDSESSIONSTATE_DOWN",
		3: "OPENCONFIGBFDBFDSESSIONSTATE_ADMIN_DOWN",
		4: "OPENCONFIGBFDBFDSESSIONSTATE_INIT",
	}
	OpenconfigBfdBfdSessionState_value = map[string]int32{
		"OPENCONFIGBFDBFDSESSIONSTATE_UNSET":      0,
		"OPENCONFIGBFDBFDSESSIONSTATE_UP":         1,
		"OPENCONFIGBFDBFDSESSIONSTATE_DOWN":       2,
		"OPENCONFIGBFDBFDSESSIONSTATE_ADMIN_DOWN": 3,
		"OPENCONFIGBFDBFDSESSIONSTATE_INIT":       4,
	}
)

func (x OpenconfigBfdBfdSessionState) Enum() *OpenconfigBfdBfdSessionState {
	p := new(OpenconfigBfdBfdSessionState)
	*p = x
	return p
}

func (x OpenconfigBfdBfdSessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBfdBfdSessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[14].Descriptor()
}

func (OpenconfigBfdBfdSessionState) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[14]
}

func (x OpenconfigBfdBfdSessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBfdBfdSessionState.Descriptor instead.
func (OpenconfigBfdBfdSessionState) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{14}
}

// OpenconfigBgpTypesAFISAFITYPE represents an enumerated type generated for the YANG identity AFI_SAFI_TYPE.
type OpenconfigBgpTypesAFISAFITYPE int32

const (
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_UNSET                OpenconfigBgpTypesAFISAFITYPE = 0
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV4_MULTICAST OpenconfigBgpTypesAFISAFITYPE = 53601692
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_SRTE_POLICY_IPV4     OpenconfigBgpTypesAFISAFITYPE = 56561937
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_SRTE_POLICY_IPV6     OpenconfigBgpTypesAFISAFITYPE = 56561939
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_LINKSTATE_VPN        OpenconfigBgpTypesAFISAFITYPE = 86469376
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV6_MULTICAST OpenconfigBgpTypesAFISAFITYPE = 171618750
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_UNICAST         OpenconfigBgpTypesAFISAFITYPE = 196909421
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_L2VPN_EVPN           OpenconfigBgpTypesAFISAFITYPE = 213517208
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_IPV6_UNICAST         OpenconfigBgpTypesAFISAFITYPE = 270342995
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_LABELED_UNICAST OpenconfigBgpTypesAFISAFITYPE = 279108253
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_LINKSTATE_SPF        OpenconfigBgpTypesAFISAFITYPE = 320902005
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_VPNV4_FLOWSPEC       OpenconfigBgpTypesAFISAFITYPE = 339014910
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV4_UNICAST   OpenconfigBgpTypesAFISAFITYPE = 358537365
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_IPV6_LABELED_UNICAST OpenconfigBgpTypesAFISAFITYPE = 420698035
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV6_UNICAST   OpenconfigBgpTypesAFISAFITYPE = 421890363
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_FLOWSPEC        OpenconfigBgpTypesAFISAFITYPE = 431646707
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_LINKSTATE            OpenconfigBgpTypesAFISAFITYPE = 512270733
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_L2VPN_VPLS           OpenconfigBgpTypesAFISAFITYPE = 533405094
)

// Enum value maps for OpenconfigBgpTypesAFISAFITYPE.
var (
	OpenconfigBgpTypesAFISAFITYPE_name = map[int32]string{
		0:         "OPENCONFIGBGPTYPESAFISAFITYPE_UNSET",
		53601692:  "OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV4_MULTICAST",
		56561937:  "OPENCONFIGBGPTYPESAFISAFITYPE_SRTE_POLICY_IPV4",
		56561939:  "OPENCONFIGBGPTYPESAFISAFITYPE_SRTE_POLICY_IPV6",
		86469376:  "OPENCONFIGBGPTYPESAFISAFITYPE_LINKSTATE_VPN",
		171618750: "OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV6_MULTICAST",
		196909421: "OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_UNICAST",
		213517208: "OPENCONFIGBGPTYPESAFISAFITYPE_L2VPN_EVPN",
		270342995: "OPENCONFIGBGPTYPESAFISAFITYPE_IPV6_UNICAST",
		279108253: "OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_LABELED_UNICAST",
		320902005: "OPENCONFIGBGPTYPESAFISAFITYPE_LINKSTATE_SPF",
		339014910: "OPENCONFIGBGPTYPESAFISAFITYPE_VPNV4_FLOWSPEC",
		358537365: "OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV4_UNICAST",
		420698035: "OPENCONFIGBGPTYPESAFISAFITYPE_IPV6_LABELED_UNICAST",
		421890363: "OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV6_UNICAST",
		431646707: "OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_FLOWSPEC",
		512270733: "OPENCONFIGBGPTYPESAFISAFITYPE_LINKSTATE",
		533405094: "OPENCONFIGBGPTYPESAFISAFITYPE_L2VPN_VPLS",
	}
	OpenconfigBgpTypesAFISAFITYPE_value = map[string]int32{
		"OPENCONFIGBGPTYPESAFISAFITYPE_UNSET":                0,
		"OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV4_MULTICAST": 53601692,
		"OPENCONFIGBGPTYPESAFISAFITYPE_SRTE_POLICY_IPV4":     56561937,
		"OPENCONFIGBGPTYPESAFISAFITYPE_SRTE_POLICY_IPV6":     56561939,
		"OPENCONFIGBGPTYPESAFISAFITYPE_LINKSTATE_VPN":        86469376,
		"OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV6_MULTICAST": 171618750,
		"OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_UNICAST":         196909421,
		"OPENCONFIGBGPTYPESAFISAFITYPE_L2VPN_EVPN":           213517208,
		"OPENCONFIGBGPTYPESAFISAFITYPE_IPV6_UNICAST":         270342995,
		"OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_LABELED_UNICAST": 279108253,
		"OPENCONFIGBGPTYPESAFISAFITYPE_LINKSTATE_SPF":        320902005,
		"OPENCONFIGBGPTYPESAFISAFITYPE_VPNV4_FLOWSPEC":       339014910,
		"OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV4_UNICAST":   358537365,
		"OPENCONFIGBGPTYPESAFISAFITYPE_IPV6_LABELED_UNICAST": 420698035,
		"OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV6_UNICAST":   421890363,
		"OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_FLOWSPEC":        431646707,
		"OPENCONFIGBGPTYPESAFISAFITYPE_LINKSTATE":            512270733,
		"OPENCONFIGBGPTYPESAFISAFITYPE_L2VPN_VPLS":           533405094,
	}
)

func (x OpenconfigBgpTypesAFISAFITYPE) Enum() *OpenconfigBgpTypesAFISAFITYPE {
	p := new(OpenconfigBgpTypesAFISAFITYPE)
	*p = x
	return p
}

func (x OpenconfigBgpTypesAFISAFITYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpTypesAFISAFITYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[15].Descriptor()
}

func (OpenconfigBgpTypesAFISAFITYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[15]
}

func (x OpenconfigBgpTypesAFISAFITYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpTypesAFISAFITYPE.Descriptor instead.
func (OpenconfigBgpTypesAFISAFITYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{15}
}

// OpenconfigBgpTypesAsPathSegmentType represents an enumerated type generated for the YANG enumerated type as-path-segment-type.
type OpenconfigBgpTypesAsPathSegmentType int32

const (
	OpenconfigBgpTypesAsPathSegmentType_OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_UNSET              OpenconfigBgpTypesAsPathSegmentType = 0
	OpenconfigBgpTypesAsPathSegmentType_OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_SEQ             OpenconfigBgpTypesAsPathSegmentType = 1
	OpenconfigBgpTypesAsPathSegmentType_OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_SET             OpenconfigBgpTypesAsPathSegmentType = 2
	OpenconfigBgpTypesAsPathSegmentType_OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_CONFED_SEQUENCE OpenconfigBgpTypesAsPathSegmentType = 3
	OpenconfigBgpTypesAsPathSegmentType_OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_CONFED_SET      OpenconfigBgpTypesAsPathSegmentType = 4
)

// Enum value maps for OpenconfigBgpTypesAsPathSegmentType.
var (
	OpenconfigBgpTypesAsPathSegmentType_name = map[int32]string{
		0: "OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_UNSET",
		1: "OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_SEQ",
		2: "OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_SET",
		3: "OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_CONFED_SEQUENCE",
		4: "OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_CONFED_SET",
	}
	OpenconfigBgpTypesAsPathSegmentType_value = map[string]int32{
		"OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_UNSET":              0,
		"OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_SEQ":             1,
		"OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_SET":             2,
		"OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_CONFED_SEQUENCE": 3,
		"OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_CONFED_SET":      4,
	}
)

func (x OpenconfigBgpTypesAsPathSegmentType) Enum() *OpenconfigBgpTypesAsPathSegmentType {
	p := new(OpenconfigBgpTypesAsPathSegmentType)
	*p = x
	return p
}

func (x OpenconfigBgpTypesAsPathSegmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpTypesAsPathSegmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[16].Descriptor()
}

func (OpenconfigBgpTypesAsPathSegmentType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[16]
}

func (x OpenconfigBgpTypesAsPathSegmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpTypesAsPathSegmentType.Descriptor instead.
func (OpenconfigBgpTypesAsPathSegmentType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{16}
}

// OpenconfigBgpTypesBGPCAPABILITY represents an enumerated type generated for the YANG identity BGP_CAPABILITY.
type OpenconfigBgpTypesBGPCAPABILITY int32

const (
	OpenconfigBgpTypesBGPCAPABILITY_OPENCONFIGBGPTYPESBGPCAPABILITY_UNSET                     OpenconfigBgpTypesBGPCAPABILITY = 0
	OpenconfigBgpTypesBGPCAPABILITY_OPENCONFIGBGPTYPESBGPCAPABILITY_ASN32                     OpenconfigBgpTypesBGPCAPABILITY = 32923126
	OpenconfigBgpTypesBGPCAPABILITY_OPENCONFIGBGPTYPESBGPCAPABILITY_MPBGP                     OpenconfigBgpTypesBGPCAPABILITY = 70073701
	OpenconfigBgpTypesBGPCAPABILITY_OPENCONFIGBGPTYPESBGPCAPABILITY_ADD_PATHS                 OpenconfigBgpTypesBGPCAPABILITY = 233946091
	OpenconfigBgpTypesBGPCAPABILITY_OPENCONFIGBGPTYPESBGPCAPABILITY_EXTENDED_NEXTHOP_ENCODING OpenconfigBgpTypesBGPCAPABILITY = 282666297
	OpenconfigBgpTypesBGPCAPABILITY_OPENCONFIGBGPTYPESBGPCAPABILITY_ROUTE_REFRESH             OpenconfigBgpTypesBGPCAPABILITY = 392898832
	OpenconfigBgpTypesBGPCAPABILITY_OPENCONFIGBGPTYPESBGPCAPABILITY_GRACEFUL_RESTART          OpenconfigBgpTypesBGPCAPABILITY = 473546604
)

// Enum value maps for OpenconfigBgpTypesBGPCAPABILITY.
var (
	OpenconfigBgpTypesBGPCAPABILITY_name = map[int32]string{
		0:         "OPENCONFIGBGPTYPESBGPCAPABILITY_UNSET",
		32923126:  "OPENCONFIGBGPTYPESBGPCAPABILITY_ASN32",
		70073701:  "OPENCONFIGBGPTYPESBGPCAPABILITY_MPBGP",
		233946091: "OPENCONFIGBGPTYPESBGPCAPABILITY_ADD_PATHS",
		282666297: "OPENCONFIGBGPTYPESBGPCAPABILITY_EXTENDED_NEXTHOP_ENCODING",
		392898832: "OPENCONFIGBGPTYPESBGPCAPABILITY_ROUTE_REFRESH",
		473546604: "OPENCONFIGBGPTYPESBGPCAPABILITY_GRACEFUL_RESTART",
	}
	OpenconfigBgpTypesBGPCAPABILITY_value = map[string]int32{
		"OPENCONFIGBGPTYPESBGPCAPABILITY_UNSET":                     0,
		"OPENCONFIGBGPTYPESBGPCAPABILITY_ASN32":                     32923126,
		"OPENCONFIGBGPTYPESBGPCAPABILITY_MPBGP":                     70073701,
		"OPENCONFIGBGPTYPESBGPCAPABILITY_ADD_PATHS":                 233946091,
		"OPENCONFIGBGPTYPESBGPCAPABILITY_EXTENDED_NEXTHOP_ENCODING": 282666297,
		"OPENCONFIGBGPTYPESBGPCAPABILITY_ROUTE_REFRESH":             392898832,
		"OPENCONFIGBGPTYPESBGPCAPABILITY_GRACEFUL_RESTART":          473546604,
	}
)

func (x OpenconfigBgpTypesBGPCAPABILITY) Enum() *OpenconfigBgpTypesBGPCAPABILITY {
	p := new(OpenconfigBgpTypesBGPCAPABILITY)
	*p = x
	return p
}

func (x OpenconfigBgpTypesBGPCAPABILITY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpTypesBGPCAPABILITY) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[17].Descriptor()
}

func (OpenconfigBgpTypesBGPCAPABILITY) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[17]
}

func (x OpenconfigBgpTypesBGPCAPABILITY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpTypesBGPCAPABILITY.Descriptor instead.
func (OpenconfigBgpTypesBGPCAPABILITY) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{17}
}

// OpenconfigBgpTypesBGPERRORCODE represents an enumerated type generated for the YANG identity BGP_ERROR_CODE.
type OpenconfigBgpTypesBGPERRORCODE int32

const (
	OpenconfigBgpTypesBGPERRORCODE_OPENCONFIGBGPTYPESBGPERRORCODE_UNSET                       OpenconfigBgpTypesBGPERRORCODE = 0
	OpenconfigBgpTypesBGPERRORCODE_OPENCONFIGBGPTYPESBGPERRORCODE_CEASE                       OpenconfigBgpTypesBGPERRORCODE = 84275578
	OpenconfigBgpTypesBGPERRORCODE_OPENCONFIGBGPTYPESBGPERRORCODE_HOLD_TIMER_EXPIRED          OpenconfigBgpTypesBGPERRORCODE = 87745534
	OpenconfigBgpTypesBGPERRORCODE_OPENCONFIGBGPTYPESBGPERRORCODE_UPDATE_MESSAGE_ERROR        OpenconfigBgpTypesBGPERRORCODE = 259392533
	OpenconfigBgpTypesBGPERRORCODE_OPENCONFIGBGPTYPESBGPERRORCODE_FINITE_STATE_MACHINE_ERROR  OpenconfigBgpTypesBGPERRORCODE = 375791507
	OpenconfigBgpTypesBGPERRORCODE_OPENCONFIGBGPTYPESBGPERRORCODE_MESSAGE_HEADER_ERROR        OpenconfigBgpTypesBGPERRORCODE = 421916061
	OpenconfigBgpTypesBGPERRORCODE_OPENCONFIGBGPTYPESBGPERRORCODE_ROUTE_REFRESH_MESSAGE_ERROR OpenconfigBgpTypesBGPERRORCODE = 460120607
	OpenconfigBgpTypesBGPERRORCODE_OPENCONFIGBGPTYPESBGPERRORCODE_OPEN_MESSAGE_ERROR          OpenconfigBgpTypesBGPERRORCODE = 461038742
)

// Enum value maps for OpenconfigBgpTypesBGPERRORCODE.
var (
	OpenconfigBgpTypesBGPERRORCODE_name = map[int32]string{
		0:         "OPENCONFIGBGPTYPESBGPERRORCODE_UNSET",
		84275578:  "OPENCONFIGBGPTYPESBGPERRORCODE_CEASE",
		87745534:  "OPENCONFIGBGPTYPESBGPERRORCODE_HOLD_TIMER_EXPIRED",
		259392533: "OPENCONFIGBGPTYPESBGPERRORCODE_UPDATE_MESSAGE_ERROR",
		375791507: "OPENCONFIGBGPTYPESBGPERRORCODE_FINITE_STATE_MACHINE_ERROR",
		421916061: "OPENCONFIGBGPTYPESBGPERRORCODE_MESSAGE_HEADER_ERROR",
		460120607: "OPENCONFIGBGPTYPESBGPERRORCODE_ROUTE_REFRESH_MESSAGE_ERROR",
		461038742: "OPENCONFIGBGPTYPESBGPERRORCODE_OPEN_MESSAGE_ERROR",
	}
	OpenconfigBgpTypesBGPERRORCODE_value = map[string]int32{
		"OPENCONFIGBGPTYPESBGPERRORCODE_UNSET":                       0,
		"OPENCONFIGBGPTYPESBGPERRORCODE_CEASE":                       84275578,
		"OPENCONFIGBGPTYPESBGPERRORCODE_HOLD_TIMER_EXPIRED":          87745534,
		"OPENCONFIGBGPTYPESBGPERRORCODE_UPDATE_MESSAGE_ERROR":        259392533,
		"OPENCONFIGBGPTYPESBGPERRORCODE_FINITE_STATE_MACHINE_ERROR":  375791507,
		"OPENCONFIGBGPTYPESBGPERRORCODE_MESSAGE_HEADER_ERROR":        421916061,
		"OPENCONFIGBGPTYPESBGPERRORCODE_ROUTE_REFRESH_MESSAGE_ERROR": 460120607,
		"OPENCONFIGBGPTYPESBGPERRORCODE_OPEN_MESSAGE_ERROR":          461038742,
	}
)

func (x OpenconfigBgpTypesBGPERRORCODE) Enum() *OpenconfigBgpTypesBGPERRORCODE {
	p := new(OpenconfigBgpTypesBGPERRORCODE)
	*p = x
	return p
}

func (x OpenconfigBgpTypesBGPERRORCODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpTypesBGPERRORCODE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[18].Descriptor()
}

func (OpenconfigBgpTypesBGPERRORCODE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[18]
}

func (x OpenconfigBgpTypesBGPERRORCODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpTypesBGPERRORCODE.Descriptor instead.
func (OpenconfigBgpTypesBGPERRORCODE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{18}
}

// OpenconfigBgpTypesBGPERRORSUBCODE represents an enumerated type generated for the YANG identity BGP_ERROR_SUBCODE.
type OpenconfigBgpTypesBGPERRORSUBCODE int32

const (
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSET                                  OpenconfigBgpTypesBGPERRORSUBCODE = 0
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_MESSAGE_HEADER_SUBCODE                 OpenconfigBgpTypesBGPERRORSUBCODE = 7391784
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_ATTRIBUTE_LENGTH_ERROR                 OpenconfigBgpTypesBGPERRORSUBCODE = 21009871
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSUPPORTED_CAPABILITY                 OpenconfigBgpTypesBGPERRORSUBCODE = 26975061
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_NETWORK_FIELD                  OpenconfigBgpTypesBGPERRORSUBCODE = 90070374
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_MESSAGE_LENGTH                     OpenconfigBgpTypesBGPERRORSUBCODE = 90655699
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_ADMINISTRATIVE_RESET                   OpenconfigBgpTypesBGPERRORSUBCODE = 100947029
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_OPTIONAL_ATTRIBUTE_ERROR               OpenconfigBgpTypesBGPERRORSUBCODE = 123969321
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_MISSING_WELL_KNOWN_ATTRIBUTE           OpenconfigBgpTypesBGPERRORSUBCODE = 127563993
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_FINITE_STATE_MACHINE_SUBCODE           OpenconfigBgpTypesBGPERRORSUBCODE = 144030790
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_MAX_NUM_PREFIXES_REACHED               OpenconfigBgpTypesBGPERRORSUBCODE = 146707226
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_PEER_DE_CONFIGURED                     OpenconfigBgpTypesBGPERRORSUBCODE = 155193610
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSUPPORTED_OPTIONAL_PARAMETER         OpenconfigBgpTypesBGPERRORSUBCODE = 164097199
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_RECEIVE_UNEXPECTED_MESSAGE_OPENSENT    OpenconfigBgpTypesBGPERRORSUBCODE = 164447325
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_ORIGIN_ATTRIBUTE               OpenconfigBgpTypesBGPERRORSUBCODE = 171350120
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_MESSAGE_TYPE                       OpenconfigBgpTypesBGPERRORSUBCODE = 190684995
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNACCEPTABLE_HOLD_TIME                 OpenconfigBgpTypesBGPERRORSUBCODE = 195987058
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_CONN_COLLISION_RESOLUTION              OpenconfigBgpTypesBGPERRORSUBCODE = 199470949
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_ADMINISTRATIVE_SHUTDOWN                OpenconfigBgpTypesBGPERRORSUBCODE = 212255550
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_PEER_AS                            OpenconfigBgpTypesBGPERRORSUBCODE = 242980858
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_ROUTE_REFRESH_SUBCODE                  OpenconfigBgpTypesBGPERRORSUBCODE = 252485546
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_CEASE_SUBCODE                          OpenconfigBgpTypesBGPERRORSUBCODE = 280284332
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_RECEIVE_UNEXPECTED_MESSAGE_ESTABLISHED OpenconfigBgpTypesBGPERRORSUBCODE = 297152611
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_OPEN_MESSAGE_SUBCODE                   OpenconfigBgpTypesBGPERRORSUBCODE = 310116903
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_ATTRIBUTE_FLAGS_ERROR                  OpenconfigBgpTypesBGPERRORSUBCODE = 318925574
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_CONNECTION_NOT_SYNCHRONIZED            OpenconfigBgpTypesBGPERRORSUBCODE = 320164138
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_OTHER_CONFIG_CHANGE                    OpenconfigBgpTypesBGPERRORSUBCODE = 332981615
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_MALFORMED_ATTRIBUTE_LIST               OpenconfigBgpTypesBGPERRORSUBCODE = 363574162
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_MALFORMED_AS_PATH                      OpenconfigBgpTypesBGPERRORSUBCODE = 365416389
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNRECOGNIZED_WELL_KNOWN_ATTRIBUTE      OpenconfigBgpTypesBGPERRORSUBCODE = 371075444
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSUPPORTED_VERSION_NUMBER             OpenconfigBgpTypesBGPERRORSUBCODE = 371752299
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSPECIFIC                             OpenconfigBgpTypesBGPERRORSUBCODE = 398076278
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_UPDATE_MESSAGE_SUBCODE                 OpenconfigBgpTypesBGPERRORSUBCODE = 409904620
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_BGP_IDENTIFIER                     OpenconfigBgpTypesBGPERRORSUBCODE = 412786356
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_MESSAGE_LENGTH                 OpenconfigBgpTypesBGPERRORSUBCODE = 492961163
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_NEXT_HOP_ATTRIBUTE             OpenconfigBgpTypesBGPERRORSUBCODE = 498575901
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_RECEIVE_UNEXPECTED_MESSAGE_OPENCONFIRM OpenconfigBgpTypesBGPERRORSUBCODE = 519452397
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_OUT_OF_RESOURCES                       OpenconfigBgpTypesBGPERRORSUBCODE = 530387889
	OpenconfigBgpTypesBGPERRORSUBCODE_OPENCONFIGBGPTYPESBGPERRORSUBCODE_CONNECTION_REJECTED                    OpenconfigBgpTypesBGPERRORSUBCODE = 532202480
)

// Enum value maps for OpenconfigBgpTypesBGPERRORSUBCODE.
var (
	OpenconfigBgpTypesBGPERRORSUBCODE_name = map[int32]string{
		0:         "OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSET",
		7391784:   "OPENCONFIGBGPTYPESBGPERRORSUBCODE_MESSAGE_HEADER_SUBCODE",
		21009871:  "OPENCONFIGBGPTYPESBGPERRORSUBCODE_ATTRIBUTE_LENGTH_ERROR",
		26975061:  "OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSUPPORTED_CAPABILITY",
		90070374:  "OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_NETWORK_FIELD",
		90655699:  "OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_MESSAGE_LENGTH",
		100947029: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_ADMINISTRATIVE_RESET",
		123969321: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_OPTIONAL_ATTRIBUTE_ERROR",
		127563993: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_MISSING_WELL_KNOWN_ATTRIBUTE",
		144030790: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_FINITE_STATE_MACHINE_SUBCODE",
		146707226: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_MAX_NUM_PREFIXES_REACHED",
		155193610: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_PEER_DE_CONFIGURED",
		164097199: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSUPPORTED_OPTIONAL_PARAMETER",
		164447325: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_RECEIVE_UNEXPECTED_MESSAGE_OPENSENT",
		171350120: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_ORIGIN_ATTRIBUTE",
		190684995: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_MESSAGE_TYPE",
		195987058: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNACCEPTABLE_HOLD_TIME",
		199470949: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_CONN_COLLISION_RESOLUTION",
		212255550: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_ADMINISTRATIVE_SHUTDOWN",
		242980858: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_PEER_AS",
		252485546: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_ROUTE_REFRESH_SUBCODE",
		280284332: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_CEASE_SUBCODE",
		297152611: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_RECEIVE_UNEXPECTED_MESSAGE_ESTABLISHED",
		310116903: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_OPEN_MESSAGE_SUBCODE",
		318925574: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_ATTRIBUTE_FLAGS_ERROR",
		320164138: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_CONNECTION_NOT_SYNCHRONIZED",
		332981615: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_OTHER_CONFIG_CHANGE",
		363574162: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_MALFORMED_ATTRIBUTE_LIST",
		365416389: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_MALFORMED_AS_PATH",
		371075444: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNRECOGNIZED_WELL_KNOWN_ATTRIBUTE",
		371752299: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSUPPORTED_VERSION_NUMBER",
		398076278: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSPECIFIC",
		409904620: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_UPDATE_MESSAGE_SUBCODE",
		412786356: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_BGP_IDENTIFIER",
		492961163: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_MESSAGE_LENGTH",
		498575901: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_NEXT_HOP_ATTRIBUTE",
		519452397: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_RECEIVE_UNEXPECTED_MESSAGE_OPENCONFIRM",
		530387889: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_OUT_OF_RESOURCES",
		532202480: "OPENCONFIGBGPTYPESBGPERRORSUBCODE_CONNECTION_REJECTED",
	}
	OpenconfigBgpTypesBGPERRORSUBCODE_value = map[string]int32{
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSET":                                  0,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_MESSAGE_HEADER_SUBCODE":                 7391784,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_ATTRIBUTE_LENGTH_ERROR":                 21009871,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSUPPORTED_CAPABILITY":                 26975061,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_NETWORK_FIELD":                  90070374,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_MESSAGE_LENGTH":                     90655699,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_ADMINISTRATIVE_RESET":                   100947029,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_OPTIONAL_ATTRIBUTE_ERROR":               123969321,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_MISSING_WELL_KNOWN_ATTRIBUTE":           127563993,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_FINITE_STATE_MACHINE_SUBCODE":           144030790,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_MAX_NUM_PREFIXES_REACHED":               146707226,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_PEER_DE_CONFIGURED":                     155193610,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSUPPORTED_OPTIONAL_PARAMETER":         164097199,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_RECEIVE_UNEXPECTED_MESSAGE_OPENSENT":    164447325,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_ORIGIN_ATTRIBUTE":               171350120,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_MESSAGE_TYPE":                       190684995,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNACCEPTABLE_HOLD_TIME":                 195987058,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_CONN_COLLISION_RESOLUTION":              199470949,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_ADMINISTRATIVE_SHUTDOWN":                212255550,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_PEER_AS":                            242980858,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_ROUTE_REFRESH_SUBCODE":                  252485546,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_CEASE_SUBCODE":                          280284332,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_RECEIVE_UNEXPECTED_MESSAGE_ESTABLISHED": 297152611,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_OPEN_MESSAGE_SUBCODE":                   310116903,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_ATTRIBUTE_FLAGS_ERROR":                  318925574,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_CONNECTION_NOT_SYNCHRONIZED":            320164138,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_OTHER_CONFIG_CHANGE":                    332981615,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_MALFORMED_ATTRIBUTE_LIST":               363574162,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_MALFORMED_AS_PATH":                      365416389,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNRECOGNIZED_WELL_KNOWN_ATTRIBUTE":      371075444,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSUPPORTED_VERSION_NUMBER":             371752299,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_UNSPECIFIC":                             398076278,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_UPDATE_MESSAGE_SUBCODE":                 409904620,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_BAD_BGP_IDENTIFIER":                     412786356,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_MESSAGE_LENGTH":                 492961163,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_INVALID_NEXT_HOP_ATTRIBUTE":             498575901,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_RECEIVE_UNEXPECTED_MESSAGE_OPENCONFIRM": 519452397,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_OUT_OF_RESOURCES":                       530387889,
		"OPENCONFIGBGPTYPESBGPERRORSUBCODE_CONNECTION_REJECTED":                    532202480,
	}
)

func (x OpenconfigBgpTypesBGPERRORSUBCODE) Enum() *OpenconfigBgpTypesBGPERRORSUBCODE {
	p := new(OpenconfigBgpTypesBGPERRORSUBCODE)
	*p = x
	return p
}

func (x OpenconfigBgpTypesBGPERRORSUBCODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpTypesBGPERRORSUBCODE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[19].Descriptor()
}

func (OpenconfigBgpTypesBGPERRORSUBCODE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[19]
}

func (x OpenconfigBgpTypesBGPERRORSUBCODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpTypesBGPERRORSUBCODE.Descriptor instead.
func (OpenconfigBgpTypesBGPERRORSUBCODE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{19}
}

// OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY represents an enumerated type generated for the YANG identity BGP_WELL_KNOWN_STD_COMMUNITY.
type OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY int32

const (
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_UNSET               OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY = 0
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_EXPORT           OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY = 7425995
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_EXPORT_SUBCONFED OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY = 75227749
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NOPEER              OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY = 77476850
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_ADVERTISE        OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY = 126797620
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_GRACEFUL_SHUTDOWN   OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY = 468330335
)

// Enum value maps for OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY.
var (
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_name = map[int32]string{
		0:         "OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_UNSET",
		7425995:   "OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_EXPORT",
		75227749:  "OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_EXPORT_SUBCONFED",
		77476850:  "OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NOPEER",
		126797620: "OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_ADVERTISE",
		468330335: "OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_GRACEFUL_SHUTDOWN",
	}
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_value = map[string]int32{
		"OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_UNSET":               0,
		"OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_EXPORT":           7425995,
		"OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_EXPORT_SUBCONFED": 75227749,
		"OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NOPEER":              77476850,
		"OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_ADVERTISE":        126797620,
		"OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_GRACEFUL_SHUTDOWN":   468330335,
	}
)

func (x OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY) Enum() *OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY {
	p := new(OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY)
	*p = x
	return p
}

func (x OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[20].Descriptor()
}

func (OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[20]
}

func (x OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY.Descriptor instead.
func (OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{20}
}

// OpenconfigBgpTypesBgpOriginAttrType represents an enumerated type generated for the YANG enumerated type bgp-origin-attr-type.
type OpenconfigBgpTypesBgpOriginAttrType int32

const (
	OpenconfigBgpTypesBgpOriginAttrType_OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_UNSET      OpenconfigBgpTypesBgpOriginAttrType = 0
	OpenconfigBgpTypesBgpOriginAttrType_OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_IGP        OpenconfigBgpTypesBgpOriginAttrType = 1
	OpenconfigBgpTypesBgpOriginAttrType_OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_EGP        OpenconfigBgpTypesBgpOriginAttrType = 2
	OpenconfigBgpTypesBgpOriginAttrType_OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_INCOMPLETE OpenconfigBgpTypesBgpOriginAttrType = 3
)

// Enum value maps for OpenconfigBgpTypesBgpOriginAttrType.
var (
	OpenconfigBgpTypesBgpOriginAttrType_name = map[int32]string{
		0: "OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_UNSET",
		1: "OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_IGP",
		2: "OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_EGP",
		3: "OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_INCOMPLETE",
	}
	OpenconfigBgpTypesBgpOriginAttrType_value = map[string]int32{
		"OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_UNSET":      0,
		"OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_IGP":        1,
		"OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_EGP":        2,
		"OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_INCOMPLETE": 3,
	}
)

func (x OpenconfigBgpTypesBgpOriginAttrType) Enum() *OpenconfigBgpTypesBgpOriginAttrType {
	p := new(OpenconfigBgpTypesBgpOriginAttrType)
	*p = x
	return p
}

func (x OpenconfigBgpTypesBgpOriginAttrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpTypesBgpOriginAttrType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[21].Descriptor()
}

func (OpenconfigBgpTypesBgpOriginAttrType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[21]
}

func (x OpenconfigBgpTypesBgpOriginAttrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpTypesBgpOriginAttrType.Descriptor instead.
func (OpenconfigBgpTypesBgpOriginAttrType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{21}
}

// OpenconfigBgpTypesCommunityType represents an enumerated type generated for the YANG enumerated type community-type.
type OpenconfigBgpTypesCommunityType int32

const (
	OpenconfigBgpTypesCommunityType_OPENCONFIGBGPTYPESCOMMUNITYTYPE_UNSET    OpenconfigBgpTypesCommunityType = 0
	OpenconfigBgpTypesCommunityType_OPENCONFIGBGPTYPESCOMMUNITYTYPE_STANDARD OpenconfigBgpTypesCommunityType = 1
	OpenconfigBgpTypesCommunityType_OPENCONFIGBGPTYPESCOMMUNITYTYPE_EXTENDED OpenconfigBgpTypesCommunityType = 2
	OpenconfigBgpTypesCommunityType_OPENCONFIGBGPTYPESCOMMUNITYTYPE_LARGE    OpenconfigBgpTypesCommunityType = 3
	OpenconfigBgpTypesCommunityType_OPENCONFIGBGPTYPESCOMMUNITYTYPE_BOTH     OpenconfigBgpTypesCommunityType = 4
	OpenconfigBgpTypesCommunityType_OPENCONFIGBGPTYPESCOMMUNITYTYPE_NONE     OpenconfigBgpTypesCommunityType = 5
)

// Enum value maps for OpenconfigBgpTypesCommunityType.
var (
	OpenconfigBgpTypesCommunityType_name = map[int32]string{
		0: "OPENCONFIGBGPTYPESCOMMUNITYTYPE_UNSET",
		1: "OPENCONFIGBGPTYPESCOMMUNITYTYPE_STANDARD",
		2: "OPENCONFIGBGPTYPESCOMMUNITYTYPE_EXTENDED",
		3: "OPENCONFIGBGPTYPESCOMMUNITYTYPE_LARGE",
		4: "OPENCONFIGBGPTYPESCOMMUNITYTYPE_BOTH",
		5: "OPENCONFIGBGPTYPESCOMMUNITYTYPE_NONE",
	}
	OpenconfigBgpTypesCommunityType_value = map[string]int32{
		"OPENCONFIGBGPTYPESCOMMUNITYTYPE_UNSET":    0,
		"OPENCONFIGBGPTYPESCOMMUNITYTYPE_STANDARD": 1,
		"OPENCONFIGBGPTYPESCOMMUNITYTYPE_EXTENDED": 2,
		"OPENCONFIGBGPTYPESCOMMUNITYTYPE_LARGE":    3,
		"OPENCONFIGBGPTYPESCOMMUNITYTYPE_BOTH":     4,
		"OPENCONFIGBGPTYPESCOMMUNITYTYPE_NONE":     5,
	}
)

func (x OpenconfigBgpTypesCommunityType) Enum() *OpenconfigBgpTypesCommunityType {
	p := new(OpenconfigBgpTypesCommunityType)
	*p = x
	return p
}

func (x OpenconfigBgpTypesCommunityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpTypesCommunityType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[22].Descriptor()
}

func (OpenconfigBgpTypesCommunityType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[22]
}

func (x OpenconfigBgpTypesCommunityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpTypesCommunityType.Descriptor instead.
func (OpenconfigBgpTypesCommunityType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{22}
}

// OpenconfigBgpTypesPeerType represents an enumerated type generated for the YANG enumerated type peer-type.
type OpenconfigBgpTypesPeerType int32

const (
	OpenconfigBgpTypesPeerType_OPENCONFIGBGPTYPESPEERTYPE_UNSET    OpenconfigBgpTypesPeerType = 0
	OpenconfigBgpTypesPeerType_OPENCONFIGBGPTYPESPEERTYPE_INTERNAL OpenconfigBgpTypesPeerType = 1
	OpenconfigBgpTypesPeerType_OPENCONFIGBGPTYPESPEERTYPE_EXTERNAL OpenconfigBgpTypesPeerType = 2
)

// Enum value maps for OpenconfigBgpTypesPeerType.
var (
	OpenconfigBgpTypesPeerType_name = map[int32]string{
		0: "OPENCONFIGBGPTYPESPEERTYPE_UNSET",
		1: "OPENCONFIGBGPTYPESPEERTYPE_INTERNAL",
		2: "OPENCONFIGBGPTYPESPEERTYPE_EXTERNAL",
	}
	OpenconfigBgpTypesPeerType_value = map[string]int32{
		"OPENCONFIGBGPTYPESPEERTYPE_UNSET":    0,
		"OPENCONFIGBGPTYPESPEERTYPE_INTERNAL": 1,
		"OPENCONFIGBGPTYPESPEERTYPE_EXTERNAL": 2,
	}
)

func (x OpenconfigBgpTypesPeerType) Enum() *OpenconfigBgpTypesPeerType {
	p := new(OpenconfigBgpTypesPeerType)
	*p = x
	return p
}

func (x OpenconfigBgpTypesPeerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpTypesPeerType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[23].Descriptor()
}

func (OpenconfigBgpTypesPeerType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[23]
}

func (x OpenconfigBgpTypesPeerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpTypesPeerType.Descriptor instead.
func (OpenconfigBgpTypesPeerType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{23}
}

// OpenconfigBgpTypesRemovePrivateAsOption represents an enumerated type generated for the YANG identity REMOVE_PRIVATE_AS_OPTION.
type OpenconfigBgpTypesRemovePrivateAsOption int32

const (
	OpenconfigBgpTypesRemovePrivateAsOption_OPENCONFIGBGPTYPESREMOVEPRIVATEASOPTION_UNSET                  OpenconfigBgpTypesRemovePrivateAsOption = 0
	OpenconfigBgpTypesRemovePrivateAsOption_OPENCONFIGBGPTYPESREMOVEPRIVATEASOPTION_PRIVATE_AS_REPLACE_ALL OpenconfigBgpTypesRemovePrivateAsOption = 489360741
	OpenconfigBgpTypesRemovePrivateAsOption_OPENCONFIGBGPTYPESREMOVEPRIVATEASOPTION_PRIVATE_AS_REMOVE_ALL  OpenconfigBgpTypesRemovePrivateAsOption = 518520599
)

// Enum value maps for OpenconfigBgpTypesRemovePrivateAsOption.
var (
	OpenconfigBgpTypesRemovePrivateAsOption_name = map[int32]string{
		0:         "OPENCONFIGBGPTYPESREMOVEPRIVATEASOPTION_UNSET",
		489360741: "OPENCONFIGBGPTYPESREMOVEPRIVATEASOPTION_PRIVATE_AS_REPLACE_ALL",
		518520599: "OPENCONFIGBGPTYPESREMOVEPRIVATEASOPTION_PRIVATE_AS_REMOVE_ALL",
	}
	OpenconfigBgpTypesRemovePrivateAsOption_value = map[string]int32{
		"OPENCONFIGBGPTYPESREMOVEPRIVATEASOPTION_UNSET":                  0,
		"OPENCONFIGBGPTYPESREMOVEPRIVATEASOPTION_PRIVATE_AS_REPLACE_ALL": 489360741,
		"OPENCONFIGBGPTYPESREMOVEPRIVATEASOPTION_PRIVATE_AS_REMOVE_ALL":  518520599,
	}
)

func (x OpenconfigBgpTypesRemovePrivateAsOption) Enum() *OpenconfigBgpTypesRemovePrivateAsOption {
	p := new(OpenconfigBgpTypesRemovePrivateAsOption)
	*p = x
	return p
}

func (x OpenconfigBgpTypesRemovePrivateAsOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpTypesRemovePrivateAsOption) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[24].Descriptor()
}

func (OpenconfigBgpTypesRemovePrivateAsOption) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[24]
}

func (x OpenconfigBgpTypesRemovePrivateAsOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpTypesRemovePrivateAsOption.Descriptor instead.
func (OpenconfigBgpTypesRemovePrivateAsOption) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{24}
}

// OpenconfigEvpnTypesEVPNTYPE represents an enumerated type generated for the YANG identity EVPN_TYPE.
type OpenconfigEvpnTypesEVPNTYPE int32

const (
	OpenconfigEvpnTypesEVPNTYPE_OPENCONFIGEVPNTYPESEVPNTYPE_UNSET       OpenconfigEvpnTypesEVPNTYPE = 0
	OpenconfigEvpnTypesEVPNTYPE_OPENCONFIGEVPNTYPESEVPNTYPE_VLAN_AWARE  OpenconfigEvpnTypesEVPNTYPE = 368961985
	OpenconfigEvpnTypesEVPNTYPE_OPENCONFIGEVPNTYPESEVPNTYPE_VLAN_BUNDLE OpenconfigEvpnTypesEVPNTYPE = 392005801
	OpenconfigEvpnTypesEVPNTYPE_OPENCONFIGEVPNTYPESEVPNTYPE_VLAN_BASED  OpenconfigEvpnTypesEVPNTYPE = 481251570
)

// Enum value maps for OpenconfigEvpnTypesEVPNTYPE.
var (
	OpenconfigEvpnTypesEVPNTYPE_name = map[int32]string{
		0:         "OPENCONFIGEVPNTYPESEVPNTYPE_UNSET",
		368961985: "OPENCONFIGEVPNTYPESEVPNTYPE_VLAN_AWARE",
		392005801: "OPENCONFIGEVPNTYPESEVPNTYPE_VLAN_BUNDLE",
		481251570: "OPENCONFIGEVPNTYPESEVPNTYPE_VLAN_BASED",
	}
	OpenconfigEvpnTypesEVPNTYPE_value = map[string]int32{
		"OPENCONFIGEVPNTYPESEVPNTYPE_UNSET":       0,
		"OPENCONFIGEVPNTYPESEVPNTYPE_VLAN_AWARE":  368961985,
		"OPENCONFIGEVPNTYPESEVPNTYPE_VLAN_BUNDLE": 392005801,
		"OPENCONFIGEVPNTYPESEVPNTYPE_VLAN_BASED":  481251570,
	}
)

func (x OpenconfigEvpnTypesEVPNTYPE) Enum() *OpenconfigEvpnTypesEVPNTYPE {
	p := new(OpenconfigEvpnTypesEVPNTYPE)
	*p = x
	return p
}

func (x OpenconfigEvpnTypesEVPNTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigEvpnTypesEVPNTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[25].Descriptor()
}

func (OpenconfigEvpnTypesEVPNTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[25]
}

func (x OpenconfigEvpnTypesEVPNTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigEvpnTypesEVPNTYPE.Descriptor instead.
func (OpenconfigEvpnTypesEVPNTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{25}
}

// OpenconfigEvpnTypesLearningMode represents an enumerated type generated for the YANG enumerated type learning-mode.
type OpenconfigEvpnTypesLearningMode int32

const (
	OpenconfigEvpnTypesLearningMode_OPENCONFIGEVPNTYPESLEARNINGMODE_UNSET         OpenconfigEvpnTypesLearningMode = 0
	OpenconfigEvpnTypesLearningMode_OPENCONFIGEVPNTYPESLEARNINGMODE_CONTROL_PLANE OpenconfigEvpnTypesLearningMode = 1
	OpenconfigEvpnTypesLearningMode_OPENCONFIGEVPNTYPESLEARNINGMODE_DATA_PLANE    OpenconfigEvpnTypesLearningMode = 2
)

// Enum value maps for OpenconfigEvpnTypesLearningMode.
var (
	OpenconfigEvpnTypesLearningMode_name = map[int32]string{
		0: "OPENCONFIGEVPNTYPESLEARNINGMODE_UNSET",
		1: "OPENCONFIGEVPNTYPESLEARNINGMODE_CONTROL_PLANE",
		2: "OPENCONFIGEVPNTYPESLEARNINGMODE_DATA_PLANE",
	}
	OpenconfigEvpnTypesLearningMode_value = map[string]int32{
		"OPENCONFIGEVPNTYPESLEARNINGMODE_UNSET":         0,
		"OPENCONFIGEVPNTYPESLEARNINGMODE_CONTROL_PLANE": 1,
		"OPENCONFIGEVPNTYPESLEARNINGMODE_DATA_PLANE":    2,
	}
)

func (x OpenconfigEvpnTypesLearningMode) Enum() *OpenconfigEvpnTypesLearningMode {
	p := new(OpenconfigEvpnTypesLearningMode)
	*p = x
	return p
}

func (x OpenconfigEvpnTypesLearningMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigEvpnTypesLearningMode) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[26].Descriptor()
}

func (OpenconfigEvpnTypesLearningMode) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[26]
}

func (x OpenconfigEvpnTypesLearningMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigEvpnTypesLearningMode.Descriptor instead.
func (OpenconfigEvpnTypesLearningMode) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{26}
}

// OpenconfigIcmpv4TypesCODE represents an enumerated type generated for the YANG identity CODE.
type OpenconfigIcmpv4TypesCODE int32

const (
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_UNSET                                        OpenconfigIcmpv4TypesCODE = 0
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REPLY_MALFORMED_QUERY               OpenconfigIcmpv4TypesCODE = 39671959
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_PARAM_PROBLEM_MISSING_REQ_OPTION             OpenconfigIcmpv4TypesCODE = 51231039
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_DST_NET_UNKNOWN              OpenconfigIcmpv4TypesCODE = 61813795
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_REDIRECT_TOS_NETWORK                         OpenconfigIcmpv4TypesCODE = 64667406
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_PHOTURIS_BAD_SPI                             OpenconfigIcmpv4TypesCODE = 81473477
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_PRECEDENCE_CUTOFF            OpenconfigIcmpv4TypesCODE = 84081853
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_SRC_HOST_ISOLATED            OpenconfigIcmpv4TypesCODE = 87266774
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REPLY_CODE                          OpenconfigIcmpv4TypesCODE = 93986016
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_TIMESTAMP_REPLY_CODE                         OpenconfigIcmpv4TypesCODE = 100220985
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_PHOTURIS_DECOMPRESS_FAILED                   OpenconfigIcmpv4TypesCODE = 108911196
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REQUEST_CODE                        OpenconfigIcmpv4TypesCODE = 119830645
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REPLY_MULTIPLE_INTF_SATISFY_QUERY   OpenconfigIcmpv4TypesCODE = 124398154
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_REDIRECT_NETWORK                             OpenconfigIcmpv4TypesCODE = 158337141
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_PARAM_PROBLEM_CODE                           OpenconfigIcmpv4TypesCODE = 181199551
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_CANNOT_FRAGMENT              OpenconfigIcmpv4TypesCODE = 193577537
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_HOST_PRECEDENCE_VIOLATION    OpenconfigIcmpv4TypesCODE = 196557496
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_DST_NET_ADMIN_PROHIBITED     OpenconfigIcmpv4TypesCODE = 198772673
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_PHOTURIS_DECRYPTION_FAILED                   OpenconfigIcmpv4TypesCODE = 206138362
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_HOST                         OpenconfigIcmpv4TypesCODE = 216006305
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_ROUTER_ADVERTISEMENT_NORMAL                  OpenconfigIcmpv4TypesCODE = 219064563
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_TIME_EXCEEDED_IN_TRANSIT                     OpenconfigIcmpv4TypesCODE = 222279187
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_ROUTER_SELECTION_NO_CODE                     OpenconfigIcmpv4TypesCODE = 222930300
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_PROTOCOL                     OpenconfigIcmpv4TypesCODE = 226831451
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_PHOTURIS_NEED_AUTHORIZATION                  OpenconfigIcmpv4TypesCODE = 238589151
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_CODE                         OpenconfigIcmpv4TypesCODE = 243825456
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_TIMESTAMP_NO_CODE                            OpenconfigIcmpv4TypesCODE = 259560916
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_PHOTURIS_AUTH_FAILED                         OpenconfigIcmpv4TypesCODE = 262405097
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_TIME_EXCEEDED_CODE                           OpenconfigIcmpv4TypesCODE = 266227201
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REPLY_NO_ERROR                      OpenconfigIcmpv4TypesCODE = 270573561
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REPLY_NO_SUB_TABLE_ENTRY            OpenconfigIcmpv4TypesCODE = 272571853
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_SRC_ROUTE_FAILED             OpenconfigIcmpv4TypesCODE = 275433263
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_PHOTURIS_CODE                                OpenconfigIcmpv4TypesCODE = 280043954
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_ECHO_CODE                                    OpenconfigIcmpv4TypesCODE = 282687047
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_PARAM_PROBLEM_BAD_LENGTH                     OpenconfigIcmpv4TypesCODE = 293329744
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_REDIRECT_HOST                                OpenconfigIcmpv4TypesCODE = 310566203
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_TIMESTAMP_REPLY_NO_CODE                      OpenconfigIcmpv4TypesCODE = 329093713
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REPLY_NO_SUCH_INTF                  OpenconfigIcmpv4TypesCODE = 330826724
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_DST_HOST_UNKNOWN             OpenconfigIcmpv4TypesCODE = 344101230
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_PORT                         OpenconfigIcmpv4TypesCODE = 344112174
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_ECHO_NO_CODE                                 OpenconfigIcmpv4TypesCODE = 360691591
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_ROUTER_ADVERTISEMENT_DOES_NOT_ROUTE_COMMON   OpenconfigIcmpv4TypesCODE = 380703191
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_ECHO_REPLY_NONE                              OpenconfigIcmpv4TypesCODE = 384038461
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_HOST_UNREACHABLE_FOR_TOS     OpenconfigIcmpv4TypesCODE = 389084985
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_NET                          OpenconfigIcmpv4TypesCODE = 397621796
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_PHOTURIS_NEED_AUTHENTICATION                 OpenconfigIcmpv4TypesCODE = 400804736
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REQUEST_NO_ERROR                    OpenconfigIcmpv4TypesCODE = 403064484
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_REDIRECT_TOS_HOST                            OpenconfigIcmpv4TypesCODE = 417258498
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_TIMESTAMP_CODE                               OpenconfigIcmpv4TypesCODE = 417826278
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_ADMIN_PROHIBITED             OpenconfigIcmpv4TypesCODE = 422672413
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_PARAM_PROBLEM_POINTER_INDICATES_ERR          OpenconfigIcmpv4TypesCODE = 445455158
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_NET_UNREACHABLE_FOR_TOS      OpenconfigIcmpv4TypesCODE = 447749056
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_ROUTER_ADVERTISEMENT_CODE                    OpenconfigIcmpv4TypesCODE = 451758509
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_ECHO_REPLY_CODE                              OpenconfigIcmpv4TypesCODE = 458250824
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_ROUTER_SELECTION_CODE                        OpenconfigIcmpv4TypesCODE = 477420462
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_DST_HOST_ADMIN_PROHIBITED    OpenconfigIcmpv4TypesCODE = 477991494
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_TIME_EXCEEDED_FRAGMENT_REASSEMBLY_IN_TRANSIT OpenconfigIcmpv4TypesCODE = 499627000
	OpenconfigIcmpv4TypesCODE_OPENCONFIGICMPV4TYPESCODE_REDIRECT_CODE                                OpenconfigIcmpv4TypesCODE = 530503282
)

// Enum value maps for OpenconfigIcmpv4TypesCODE.
var (
	OpenconfigIcmpv4TypesCODE_name = map[int32]string{
		0:         "OPENCONFIGICMPV4TYPESCODE_UNSET",
		39671959:  "OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REPLY_MALFORMED_QUERY",
		51231039:  "OPENCONFIGICMPV4TYPESCODE_PARAM_PROBLEM_MISSING_REQ_OPTION",
		61813795:  "OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_DST_NET_UNKNOWN",
		64667406:  "OPENCONFIGICMPV4TYPESCODE_REDIRECT_TOS_NETWORK",
		81473477:  "OPENCONFIGICMPV4TYPESCODE_PHOTURIS_BAD_SPI",
		84081853:  "OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_PRECEDENCE_CUTOFF",
		87266774:  "OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_SRC_HOST_ISOLATED",
		93986016:  "OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REPLY_CODE",
		100220985: "OPENCONFIGICMPV4TYPESCODE_TIMESTAMP_REPLY_CODE",
		108911196: "OPENCONFIGICMPV4TYPESCODE_PHOTURIS_DECOMPRESS_FAILED",
		119830645: "OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REQUEST_CODE",
		124398154: "OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REPLY_MULTIPLE_INTF_SATISFY_QUERY",
		158337141: "OPENCONFIGICMPV4TYPESCODE_REDIRECT_NETWORK",
		181199551: "OPENCONFIGICMPV4TYPESCODE_PARAM_PROBLEM_CODE",
		193577537: "OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_CANNOT_FRAGMENT",
		196557496: "OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_HOST_PRECEDENCE_VIOLATION",
		198772673: "OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_DST_NET_ADMIN_PROHIBITED",
		206138362: "OPENCONFIGICMPV4TYPESCODE_PHOTURIS_DECRYPTION_FAILED",
		216006305: "OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_HOST",
		219064563: "OPENCONFIGICMPV4TYPESCODE_ROUTER_ADVERTISEMENT_NORMAL",
		222279187: "OPENCONFIGICMPV4TYPESCODE_TIME_EXCEEDED_IN_TRANSIT",
		222930300: "OPENCONFIGICMPV4TYPESCODE_ROUTER_SELECTION_NO_CODE",
		226831451: "OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_PROTOCOL",
		238589151: "OPENCONFIGICMPV4TYPESCODE_PHOTURIS_NEED_AUTHORIZATION",
		243825456: "OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_CODE",
		259560916: "OPENCONFIGICMPV4TYPESCODE_TIMESTAMP_NO_CODE",
		262405097: "OPENCONFIGICMPV4TYPESCODE_PHOTURIS_AUTH_FAILED",
		266227201: "OPENCONFIGICMPV4TYPESCODE_TIME_EXCEEDED_CODE",
		270573561: "OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REPLY_NO_ERROR",
		272571853: "OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REPLY_NO_SUB_TABLE_ENTRY",
		275433263: "OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_SRC_ROUTE_FAILED",
		280043954: "OPENCONFIGICMPV4TYPESCODE_PHOTURIS_CODE",
		282687047: "OPENCONFIGICMPV4TYPESCODE_ECHO_CODE",
		293329744: "OPENCONFIGICMPV4TYPESCODE_PARAM_PROBLEM_BAD_LENGTH",
		310566203: "OPENCONFIGICMPV4TYPESCODE_REDIRECT_HOST",
		329093713: "OPENCONFIGICMPV4TYPESCODE_TIMESTAMP_REPLY_NO_CODE",
		330826724: "OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REPLY_NO_SUCH_INTF",
		344101230: "OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_DST_HOST_UNKNOWN",
		344112174: "OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_PORT",
		360691591: "OPENCONFIGICMPV4TYPESCODE_ECHO_NO_CODE",
		380703191: "OPENCONFIGICMPV4TYPESCODE_ROUTER_ADVERTISEMENT_DOES_NOT_ROUTE_COMMON",
		384038461: "OPENCONFIGICMPV4TYPESCODE_ECHO_REPLY_NONE",
		389084985: "OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_HOST_UNREACHABLE_FOR_TOS",
		397621796: "OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_NET",
		400804736: "OPENCONFIGICMPV4TYPESCODE_PHOTURIS_NEED_AUTHENTICATION",
		403064484: "OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REQUEST_NO_ERROR",
		417258498: "OPENCONFIGICMPV4TYPESCODE_REDIRECT_TOS_HOST",
		417826278: "OPENCONFIGICMPV4TYPESCODE_TIMESTAMP_CODE",
		422672413: "OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_ADMIN_PROHIBITED",
		445455158: "OPENCONFIGICMPV4TYPESCODE_PARAM_PROBLEM_POINTER_INDICATES_ERR",
		447749056: "OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_NET_UNREACHABLE_FOR_TOS",
		451758509: "OPENCONFIGICMPV4TYPESCODE_ROUTER_ADVERTISEMENT_CODE",
		458250824: "OPENCONFIGICMPV4TYPESCODE_ECHO_REPLY_CODE",
		477420462: "OPENCONFIGICMPV4TYPESCODE_ROUTER_SELECTION_CODE",
		477991494: "OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_DST_HOST_ADMIN_PROHIBITED",
		499627000: "OPENCONFIGICMPV4TYPESCODE_TIME_EXCEEDED_FRAGMENT_REASSEMBLY_IN_TRANSIT",
		530503282: "OPENCONFIGICMPV4TYPESCODE_REDIRECT_CODE",
	}
	OpenconfigIcmpv4TypesCODE_value = map[string]int32{
		"OPENCONFIGICMPV4TYPESCODE_UNSET":                                        0,
		"OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REPLY_MALFORMED_QUERY":               39671959,
		"OPENCONFIGICMPV4TYPESCODE_PARAM_PROBLEM_MISSING_REQ_OPTION":             51231039,
		"OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_DST_NET_UNKNOWN":              61813795,
		"OPENCONFIGICMPV4TYPESCODE_REDIRECT_TOS_NETWORK":                         64667406,
		"OPENCONFIGICMPV4TYPESCODE_PHOTURIS_BAD_SPI":                             81473477,
		"OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_PRECEDENCE_CUTOFF":            84081853,
		"OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_SRC_HOST_ISOLATED":            87266774,
		"OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REPLY_CODE":                          93986016,
		"OPENCONFIGICMPV4TYPESCODE_TIMESTAMP_REPLY_CODE":                         100220985,
		"OPENCONFIGICMPV4TYPESCODE_PHOTURIS_DECOMPRESS_FAILED":                   108911196,
		"OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REQUEST_CODE":                        119830645,
		"OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REPLY_MULTIPLE_INTF_SATISFY_QUERY":   124398154,
		"OPENCONFIGICMPV4TYPESCODE_REDIRECT_NETWORK":                             158337141,
		"OPENCONFIGICMPV4TYPESCODE_PARAM_PROBLEM_CODE":                           181199551,
		"OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_CANNOT_FRAGMENT":              193577537,
		"OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_HOST_PRECEDENCE_VIOLATION":    196557496,
		"OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_DST_NET_ADMIN_PROHIBITED":     198772673,
		"OPENCONFIGICMPV4TYPESCODE_PHOTURIS_DECRYPTION_FAILED":                   206138362,
		"OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_HOST":                         216006305,
		"OPENCONFIGICMPV4TYPESCODE_ROUTER_ADVERTISEMENT_NORMAL":                  219064563,
		"OPENCONFIGICMPV4TYPESCODE_TIME_EXCEEDED_IN_TRANSIT":                     222279187,
		"OPENCONFIGICMPV4TYPESCODE_ROUTER_SELECTION_NO_CODE":                     222930300,
		"OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_PROTOCOL":                     226831451,
		"OPENCONFIGICMPV4TYPESCODE_PHOTURIS_NEED_AUTHORIZATION":                  238589151,
		"OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_CODE":                         243825456,
		"OPENCONFIGICMPV4TYPESCODE_TIMESTAMP_NO_CODE":                            259560916,
		"OPENCONFIGICMPV4TYPESCODE_PHOTURIS_AUTH_FAILED":                         262405097,
		"OPENCONFIGICMPV4TYPESCODE_TIME_EXCEEDED_CODE":                           266227201,
		"OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REPLY_NO_ERROR":                      270573561,
		"OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REPLY_NO_SUB_TABLE_ENTRY":            272571853,
		"OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_SRC_ROUTE_FAILED":             275433263,
		"OPENCONFIGICMPV4TYPESCODE_PHOTURIS_CODE":                                280043954,
		"OPENCONFIGICMPV4TYPESCODE_ECHO_CODE":                                    282687047,
		"OPENCONFIGICMPV4TYPESCODE_PARAM_PROBLEM_BAD_LENGTH":                     293329744,
		"OPENCONFIGICMPV4TYPESCODE_REDIRECT_HOST":                                310566203,
		"OPENCONFIGICMPV4TYPESCODE_TIMESTAMP_REPLY_NO_CODE":                      329093713,
		"OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REPLY_NO_SUCH_INTF":                  330826724,
		"OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_DST_HOST_UNKNOWN":             344101230,
		"OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_PORT":                         344112174,
		"OPENCONFIGICMPV4TYPESCODE_ECHO_NO_CODE":                                 360691591,
		"OPENCONFIGICMPV4TYPESCODE_ROUTER_ADVERTISEMENT_DOES_NOT_ROUTE_COMMON":   380703191,
		"OPENCONFIGICMPV4TYPESCODE_ECHO_REPLY_NONE":                              384038461,
		"OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_HOST_UNREACHABLE_FOR_TOS":     389084985,
		"OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_NET":                          397621796,
		"OPENCONFIGICMPV4TYPESCODE_PHOTURIS_NEED_AUTHENTICATION":                 400804736,
		"OPENCONFIGICMPV4TYPESCODE_EXT_ECHO_REQUEST_NO_ERROR":                    403064484,
		"OPENCONFIGICMPV4TYPESCODE_REDIRECT_TOS_HOST":                            417258498,
		"OPENCONFIGICMPV4TYPESCODE_TIMESTAMP_CODE":                               417826278,
		"OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_ADMIN_PROHIBITED":             422672413,
		"OPENCONFIGICMPV4TYPESCODE_PARAM_PROBLEM_POINTER_INDICATES_ERR":          445455158,
		"OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_NET_UNREACHABLE_FOR_TOS":      447749056,
		"OPENCONFIGICMPV4TYPESCODE_ROUTER_ADVERTISEMENT_CODE":                    451758509,
		"OPENCONFIGICMPV4TYPESCODE_ECHO_REPLY_CODE":                              458250824,
		"OPENCONFIGICMPV4TYPESCODE_ROUTER_SELECTION_CODE":                        477420462,
		"OPENCONFIGICMPV4TYPESCODE_DST_UNREACHABLE_DST_HOST_ADMIN_PROHIBITED":    477991494,
		"OPENCONFIGICMPV4TYPESCODE_TIME_EXCEEDED_FRAGMENT_REASSEMBLY_IN_TRANSIT": 499627000,
		"OPENCONFIGICMPV4TYPESCODE_REDIRECT_CODE":                                530503282,
	}
)

func (x OpenconfigIcmpv4TypesCODE) Enum() *OpenconfigIcmpv4TypesCODE {
	p := new(OpenconfigIcmpv4TypesCODE)
	*p = x
	return p
}

func (x OpenconfigIcmpv4TypesCODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIcmpv4TypesCODE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[27].Descriptor()
}

func (OpenconfigIcmpv4TypesCODE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[27]
}

func (x OpenconfigIcmpv4TypesCODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIcmpv4TypesCODE.Descriptor instead.
func (OpenconfigIcmpv4TypesCODE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{27}
}

// OpenconfigIcmpv4TypesTYPE represents an enumerated type generated for the YANG identity TYPE.
type OpenconfigIcmpv4TypesTYPE int32

const (
	OpenconfigIcmpv4TypesTYPE_OPENCONFIGICMPV4TYPESTYPE_UNSET                OpenconfigIcmpv4TypesTYPE = 0
	OpenconfigIcmpv4TypesTYPE_OPENCONFIGICMPV4TYPESTYPE_TIME_EXCEEDED        OpenconfigIcmpv4TypesTYPE = 1081674
	OpenconfigIcmpv4TypesTYPE_OPENCONFIGICMPV4TYPESTYPE_EXT_ECHO_REQUEST     OpenconfigIcmpv4TypesTYPE = 24717980
	OpenconfigIcmpv4TypesTYPE_OPENCONFIGICMPV4TYPESTYPE_TIMESTAMP_REPLY      OpenconfigIcmpv4TypesTYPE = 54420022
	OpenconfigIcmpv4TypesTYPE_OPENCONFIGICMPV4TYPESTYPE_ROUTER_SOLICITATION  OpenconfigIcmpv4TypesTYPE = 98924893
	OpenconfigIcmpv4TypesTYPE_OPENCONFIGICMPV4TYPESTYPE_REDIRECT             OpenconfigIcmpv4TypesTYPE = 163834461
	OpenconfigIcmpv4TypesTYPE_OPENCONFIGICMPV4TYPESTYPE_DST_UNREACHABLE      OpenconfigIcmpv4TypesTYPE = 188732201
	OpenconfigIcmpv4TypesTYPE_OPENCONFIGICMPV4TYPESTYPE_ROUTER_ADVERTISEMENT OpenconfigIcmpv4TypesTYPE = 281134796
	OpenconfigIcmpv4TypesTYPE_OPENCONFIGICMPV4TYPESTYPE_TIMESTAMP            OpenconfigIcmpv4TypesTYPE = 381130807
	OpenconfigIcmpv4TypesTYPE_OPENCONFIGICMPV4TYPESTYPE_ECHO                 OpenconfigIcmpv4TypesTYPE = 387607098
	OpenconfigIcmpv4TypesTYPE_OPENCONFIGICMPV4TYPESTYPE_EXT_ECHO_REPLY       OpenconfigIcmpv4TypesTYPE = 434363663
	OpenconfigIcmpv4TypesTYPE_OPENCONFIGICMPV4TYPESTYPE_ECHO_REPLY           OpenconfigIcmpv4TypesTYPE = 439504551
	OpenconfigIcmpv4TypesTYPE_OPENCONFIGICMPV4TYPESTYPE_PHOTURIS             OpenconfigIcmpv4TypesTYPE = 482289261
	OpenconfigIcmpv4TypesTYPE_OPENCONFIGICMPV4TYPESTYPE_TRACEROUTE           OpenconfigIcmpv4TypesTYPE = 486129667
	OpenconfigIcmpv4TypesTYPE_OPENCONFIGICMPV4TYPESTYPE_PARAM_PROBLEM        OpenconfigIcmpv4TypesTYPE = 535263760
)

// Enum value maps for OpenconfigIcmpv4TypesTYPE.
var (
	OpenconfigIcmpv4TypesTYPE_name = map[int32]string{
		0:         "OPENCONFIGICMPV4TYPESTYPE_UNSET",
		1081674:   "OPENCONFIGICMPV4TYPESTYPE_TIME_EXCEEDED",
		24717980:  "OPENCONFIGICMPV4TYPESTYPE_EXT_ECHO_REQUEST",
		54420022:  "OPENCONFIGICMPV4TYPESTYPE_TIMESTAMP_REPLY",
		98924893:  "OPENCONFIGICMPV4TYPESTYPE_ROUTER_SOLICITATION",
		163834461: "OPENCONFIGICMPV4TYPESTYPE_REDIRECT",
		188732201: "OPENCONFIGICMPV4TYPESTYPE_DST_UNREACHABLE",
		281134796: "OPENCONFIGICMPV4TYPESTYPE_ROUTER_ADVERTISEMENT",
		381130807: "OPENCONFIGICMPV4TYPESTYPE_TIMESTAMP",
		387607098: "OPENCONFIGICMPV4TYPESTYPE_ECHO",
		434363663: "OPENCONFIGICMPV4TYPESTYPE_EXT_ECHO_REPLY",
		439504551: "OPENCONFIGICMPV4TYPESTYPE_ECHO_REPLY",
		482289261: "OPENCONFIGICMPV4TYPESTYPE_PHOTURIS",
		486129667: "OPENCONFIGICMPV4TYPESTYPE_TRACEROUTE",
		535263760: "OPENCONFIGICMPV4TYPESTYPE_PARAM_PROBLEM",
	}
	OpenconfigIcmpv4TypesTYPE_value = map[string]int32{
		"OPENCONFIGICMPV4TYPESTYPE_UNSET":                0,
		"OPENCONFIGICMPV4TYPESTYPE_TIME_EXCEEDED":        1081674,
		"OPENCONFIGICMPV4TYPESTYPE_EXT_ECHO_REQUEST":     24717980,
		"OPENCONFIGICMPV4TYPESTYPE_TIMESTAMP_REPLY":      54420022,
		"OPENCONFIGICMPV4TYPESTYPE_ROUTER_SOLICITATION":  98924893,
		"OPENCONFIGICMPV4TYPESTYPE_REDIRECT":             163834461,
		"OPENCONFIGICMPV4TYPESTYPE_DST_UNREACHABLE":      188732201,
		"OPENCONFIGICMPV4TYPESTYPE_ROUTER_ADVERTISEMENT": 281134796,
		"OPENCONFIGICMPV4TYPESTYPE_TIMESTAMP":            381130807,
		"OPENCONFIGICMPV4TYPESTYPE_ECHO":                 387607098,
		"OPENCONFIGICMPV4TYPESTYPE_EXT_ECHO_REPLY":       434363663,
		"OPENCONFIGICMPV4TYPESTYPE_ECHO_REPLY":           439504551,
		"OPENCONFIGICMPV4TYPESTYPE_PHOTURIS":             482289261,
		"OPENCONFIGICMPV4TYPESTYPE_TRACEROUTE":           486129667,
		"OPENCONFIGICMPV4TYPESTYPE_PARAM_PROBLEM":        535263760,
	}
)

func (x OpenconfigIcmpv4TypesTYPE) Enum() *OpenconfigIcmpv4TypesTYPE {
	p := new(OpenconfigIcmpv4TypesTYPE)
	*p = x
	return p
}

func (x OpenconfigIcmpv4TypesTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIcmpv4TypesTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[28].Descriptor()
}

func (OpenconfigIcmpv4TypesTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[28]
}

func (x OpenconfigIcmpv4TypesTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIcmpv4TypesTYPE.Descriptor instead.
func (OpenconfigIcmpv4TypesTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{28}
}

// OpenconfigIcmpv6TypesCODE represents an enumerated type generated for the YANG identity CODE.
type OpenconfigIcmpv6TypesCODE int32

const (
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_UNSET                                        OpenconfigIcmpv6TypesCODE = 0
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_HOME_AGENT_ADDRESS_DISCOVERY_REQUEST_NO_CODE OpenconfigIcmpv6TypesCODE = 2792387
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_TIME_EXCEEDED_HOP_LIMIT                      OpenconfigIcmpv6TypesCODE = 4874175
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REQUEST_EDAR_ROVR256       OpenconfigIcmpv6TypesCODE = 18495870
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_BEYOND_SCOPE_OF_SRC          OpenconfigIcmpv6TypesCODE = 22662986
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_MOBILE_PREFIX_ADVERTISEMENT_NO_CODE          OpenconfigIcmpv6TypesCODE = 36179335
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_NODE_INFORMATION_QUERY_IPV6_ADDR             OpenconfigIcmpv6TypesCODE = 36537486
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_UNRECOGNIZED_IPV6_OPT          OpenconfigIcmpv6TypesCODE = 39436757
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REPLY_MALFORMED_QUERY               OpenconfigIcmpv6TypesCODE = 39671959
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REPLY_EDAC_ROVR128         OpenconfigIcmpv6TypesCODE = 41815814
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_NODE_INFORMATION_QUERY_NAME                  OpenconfigIcmpv6TypesCODE = 49780762
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_HOME_AGENT_ADDRESS_DISCOVERY_REQUEST_CODE    OpenconfigIcmpv6TypesCODE = 72643059
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_TOO_MANY_OPTS                  OpenconfigIcmpv6TypesCODE = 84013001
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REPLY_EDAC_ROVR64          OpenconfigIcmpv6TypesCODE = 86490505
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_NODE_INFORMATION_QUERY_IPV4_ADDR             OpenconfigIcmpv6TypesCODE = 90823724
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REPLY_CODE                          OpenconfigIcmpv6TypesCODE = 93986016
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_MULTICAST_LISTENER_QUERY_NO_CODE             OpenconfigIcmpv6TypesCODE = 104300916
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REQUEST_CODE                        OpenconfigIcmpv6TypesCODE = 119830645
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_MOBILE_PREFIX_SOLICITATION_NO_CODE           OpenconfigIcmpv6TypesCODE = 121611916
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REPLY_MULTIPLE_INTF_SATISFY_QUERY   OpenconfigIcmpv6TypesCODE = 124398154
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REPLY_DAC                  OpenconfigIcmpv6TypesCODE = 164413652
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_PACKET_TOO_BIG_NO_CODE                       OpenconfigIcmpv6TypesCODE = 174910168
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_CODE                           OpenconfigIcmpv6TypesCODE = 181199551
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_INVERSE_NEIGHBOR_SOLICITATION_CODE           OpenconfigIcmpv6TypesCODE = 184720938
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_UNRECOGNIZED_NET_HDR_TYPE      OpenconfigIcmpv6TypesCODE = 185318453
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_NODE_INFORMATION_RESPONSE_SUCCESS            OpenconfigIcmpv6TypesCODE = 192723461
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_NEIGHBOR_SOLICITATION_NO_CODE                OpenconfigIcmpv6TypesCODE = 196539441
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_UNRECOGNIZED_NEXT_HDR_TYPE     OpenconfigIcmpv6TypesCODE = 201444895
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_MULTICAST_LISTENER_QUERY_CODE                OpenconfigIcmpv6TypesCODE = 211778374
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_MULTICAST_LISTENER_DONE_CODE                 OpenconfigIcmpv6TypesCODE = 216533746
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_MOBILE_PREFIX_SOLICITATION_CODE              OpenconfigIcmpv6TypesCODE = 229746814
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_INCOMPLETE_HDR_CHAIN           OpenconfigIcmpv6TypesCODE = 232326081
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REQUEST_EDAR_ROVR64        OpenconfigIcmpv6TypesCODE = 234342485
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_RENUNBERING_SEQ_NUM_RESET                    OpenconfigIcmpv6TypesCODE = 239601824
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_NEIGHBOR_SOLICITATION_CODE                   OpenconfigIcmpv6TypesCODE = 240583385
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_CODE                         OpenconfigIcmpv6TypesCODE = 243825456
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_NDDE_INFORMATION_RESPONSE_CODE               OpenconfigIcmpv6TypesCODE = 246504124
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_NEIGHBOR_ADVERTISEMENT_NO_CODE               OpenconfigIcmpv6TypesCODE = 252580936
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_MULTICAST_LISTENER_REPORT_CODE               OpenconfigIcmpv6TypesCODE = 257332212
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_RENUMBERING_CODE                             OpenconfigIcmpv6TypesCODE = 262608942
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_TIME_EXCEEDED_CODE                           OpenconfigIcmpv6TypesCODE = 266227201
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_RENUMBERING_COMMAND                          OpenconfigIcmpv6TypesCODE = 268724448
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REPLY_NO_ERROR                      OpenconfigIcmpv6TypesCODE = 270573561
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_ADDR                         OpenconfigIcmpv6TypesCODE = 270687634
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_NODE_INFORMATION_RESPONSE_REFUSED            OpenconfigIcmpv6TypesCODE = 276662596
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_SRC_ADDR_FAILED_POLICY       OpenconfigIcmpv6TypesCODE = 286258614
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_MULTICAST_LISTENER_REPORT_NO_CODE            OpenconfigIcmpv6TypesCODE = 291343186
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REPLY_CODE                 OpenconfigIcmpv6TypesCODE = 291648023
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_EXT_HDR_CHAIN_TOO_LONG         OpenconfigIcmpv6TypesCODE = 296832348
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REQUEST_DAR                OpenconfigIcmpv6TypesCODE = 314124226
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_OPT_TOO_BIG                    OpenconfigIcmpv6TypesCODE = 317918891
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_MOBILE_PREFIX_ADVERTISEMENT_CODE             OpenconfigIcmpv6TypesCODE = 331790407
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_PORT                         OpenconfigIcmpv6TypesCODE = 344112174
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_HOME_AGENT_ADDRESS_DISCOVERY_REPLY_CODE      OpenconfigIcmpv6TypesCODE = 346678602
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_TOO_MANY_EXT_HDRS              OpenconfigIcmpv6TypesCODE = 347466590
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REPLY_NO_SUCH_TABLE_ENTRY           OpenconfigIcmpv6TypesCODE = 355305664
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_ROUTER_ADVERTISEMENT_NO_CODE                 OpenconfigIcmpv6TypesCODE = 360278613
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REPLY_EDAC_ROVR256         OpenconfigIcmpv6TypesCODE = 361070650
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_ROUTER_SOLICITATION_CODE                     OpenconfigIcmpv6TypesCODE = 364101756
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_ERR_HDR_FIELD                  OpenconfigIcmpv6TypesCODE = 364325515
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REQUEST_EDAR_ROVR128       OpenconfigIcmpv6TypesCODE = 370320010
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_INVERSE_NEIGHBOR_ADVERTISEMENT_NO_CODE       OpenconfigIcmpv6TypesCODE = 373495651
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_EXT_HDR_TOO_BIG                OpenconfigIcmpv6TypesCODE = 376629318
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_NEIGHBOR_ADVERTISEMENT_CODE                  OpenconfigIcmpv6TypesCODE = 381117226
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REPLY_NO_SUCH_INTERFACE             OpenconfigIcmpv6TypesCODE = 385978148
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_HOME_AGENT_ADDRESS_DISCOVERY_REPLY_NO_CODE   OpenconfigIcmpv6TypesCODE = 398725672
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REQUEST_NO_ERROR                    OpenconfigIcmpv6TypesCODE = 403064484
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REPLY_EDAC_ROVR192         OpenconfigIcmpv6TypesCODE = 427688225
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_NODE_INFORMATION_RESPONSE_UNKNOWN            OpenconfigIcmpv6TypesCODE = 429105906
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_DST_ADMIN_PROHIBITED         OpenconfigIcmpv6TypesCODE = 432881377
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_ECHO_REQUEST_NO_CODE                         OpenconfigIcmpv6TypesCODE = 437451429
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_RENUNBERING_RESULT                           OpenconfigIcmpv6TypesCODE = 439696939
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_MULTICAST_LISTENER_DONE_NO_CODE              OpenconfigIcmpv6TypesCODE = 441912272
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_ECHO_REQUEST_CODE                            OpenconfigIcmpv6TypesCODE = 446591485
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_ROUTER_ADVERTISEMENT_CODE                    OpenconfigIcmpv6TypesCODE = 451758509
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_REDIRECT_NO_CODE                             OpenconfigIcmpv6TypesCODE = 456075856
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_ECHO_REPLY_CODE                              OpenconfigIcmpv6TypesCODE = 458250824
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_REJECT_ROUTE_TO_DST          OpenconfigIcmpv6TypesCODE = 470871876
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_INVERSE_NEIGHBOR_ADVERTISEMENT_CODE          OpenconfigIcmpv6TypesCODE = 477192147
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REQUEST_EDAR_ROVR192       OpenconfigIcmpv6TypesCODE = 487763333
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_INVERSE_NEIGHBOR_SOLICITATION_NO_CODE        OpenconfigIcmpv6TypesCODE = 492395848
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REQUEST_CODE               OpenconfigIcmpv6TypesCODE = 498167178
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_ERR_IN_SRC_ROUTING_HDR       OpenconfigIcmpv6TypesCODE = 504820605
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_SR_UPPER_HDR_ERR               OpenconfigIcmpv6TypesCODE = 508484909
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_TIME_EXCEEDED_FRAGMENT_REASSEMBLY            OpenconfigIcmpv6TypesCODE = 509568182
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_NODE_INFORMATION_QUERY_CODE                  OpenconfigIcmpv6TypesCODE = 521442724
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_ECHO_REPLY_NO_CODE                           OpenconfigIcmpv6TypesCODE = 523666998
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_HDRS_TOO_LONG                OpenconfigIcmpv6TypesCODE = 524513058
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_PACKET_TOO_BIG_CODE                          OpenconfigIcmpv6TypesCODE = 525569786
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_REDIRECT_CODE                                OpenconfigIcmpv6TypesCODE = 530503282
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_NO_ROUTE_TO_DST              OpenconfigIcmpv6TypesCODE = 533948408
	OpenconfigIcmpv6TypesCODE_OPENCONFIGICMPV6TYPESCODE_ROUTER_SOLICITATION_NO_CODE                  OpenconfigIcmpv6TypesCODE = 536639930
)

// Enum value maps for OpenconfigIcmpv6TypesCODE.
var (
	OpenconfigIcmpv6TypesCODE_name = map[int32]string{
		0:         "OPENCONFIGICMPV6TYPESCODE_UNSET",
		2792387:   "OPENCONFIGICMPV6TYPESCODE_HOME_AGENT_ADDRESS_DISCOVERY_REQUEST_NO_CODE",
		4874175:   "OPENCONFIGICMPV6TYPESCODE_TIME_EXCEEDED_HOP_LIMIT",
		18495870:  "OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REQUEST_EDAR_ROVR256",
		22662986:  "OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_BEYOND_SCOPE_OF_SRC",
		36179335:  "OPENCONFIGICMPV6TYPESCODE_MOBILE_PREFIX_ADVERTISEMENT_NO_CODE",
		36537486:  "OPENCONFIGICMPV6TYPESCODE_NODE_INFORMATION_QUERY_IPV6_ADDR",
		39436757:  "OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_UNRECOGNIZED_IPV6_OPT",
		39671959:  "OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REPLY_MALFORMED_QUERY",
		41815814:  "OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REPLY_EDAC_ROVR128",
		49780762:  "OPENCONFIGICMPV6TYPESCODE_NODE_INFORMATION_QUERY_NAME",
		72643059:  "OPENCONFIGICMPV6TYPESCODE_HOME_AGENT_ADDRESS_DISCOVERY_REQUEST_CODE",
		84013001:  "OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_TOO_MANY_OPTS",
		86490505:  "OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REPLY_EDAC_ROVR64",
		90823724:  "OPENCONFIGICMPV6TYPESCODE_NODE_INFORMATION_QUERY_IPV4_ADDR",
		93986016:  "OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REPLY_CODE",
		104300916: "OPENCONFIGICMPV6TYPESCODE_MULTICAST_LISTENER_QUERY_NO_CODE",
		119830645: "OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REQUEST_CODE",
		121611916: "OPENCONFIGICMPV6TYPESCODE_MOBILE_PREFIX_SOLICITATION_NO_CODE",
		124398154: "OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REPLY_MULTIPLE_INTF_SATISFY_QUERY",
		164413652: "OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REPLY_DAC",
		174910168: "OPENCONFIGICMPV6TYPESCODE_PACKET_TOO_BIG_NO_CODE",
		181199551: "OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_CODE",
		184720938: "OPENCONFIGICMPV6TYPESCODE_INVERSE_NEIGHBOR_SOLICITATION_CODE",
		185318453: "OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_UNRECOGNIZED_NET_HDR_TYPE",
		192723461: "OPENCONFIGICMPV6TYPESCODE_NODE_INFORMATION_RESPONSE_SUCCESS",
		196539441: "OPENCONFIGICMPV6TYPESCODE_NEIGHBOR_SOLICITATION_NO_CODE",
		201444895: "OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_UNRECOGNIZED_NEXT_HDR_TYPE",
		211778374: "OPENCONFIGICMPV6TYPESCODE_MULTICAST_LISTENER_QUERY_CODE",
		216533746: "OPENCONFIGICMPV6TYPESCODE_MULTICAST_LISTENER_DONE_CODE",
		229746814: "OPENCONFIGICMPV6TYPESCODE_MOBILE_PREFIX_SOLICITATION_CODE",
		232326081: "OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_INCOMPLETE_HDR_CHAIN",
		234342485: "OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REQUEST_EDAR_ROVR64",
		239601824: "OPENCONFIGICMPV6TYPESCODE_RENUNBERING_SEQ_NUM_RESET",
		240583385: "OPENCONFIGICMPV6TYPESCODE_NEIGHBOR_SOLICITATION_CODE",
		243825456: "OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_CODE",
		246504124: "OPENCONFIGICMPV6TYPESCODE_NDDE_INFORMATION_RESPONSE_CODE",
		252580936: "OPENCONFIGICMPV6TYPESCODE_NEIGHBOR_ADVERTISEMENT_NO_CODE",
		257332212: "OPENCONFIGICMPV6TYPESCODE_MULTICAST_LISTENER_REPORT_CODE",
		262608942: "OPENCONFIGICMPV6TYPESCODE_RENUMBERING_CODE",
		266227201: "OPENCONFIGICMPV6TYPESCODE_TIME_EXCEEDED_CODE",
		268724448: "OPENCONFIGICMPV6TYPESCODE_RENUMBERING_COMMAND",
		270573561: "OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REPLY_NO_ERROR",
		270687634: "OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_ADDR",
		276662596: "OPENCONFIGICMPV6TYPESCODE_NODE_INFORMATION_RESPONSE_REFUSED",
		286258614: "OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_SRC_ADDR_FAILED_POLICY",
		291343186: "OPENCONFIGICMPV6TYPESCODE_MULTICAST_LISTENER_REPORT_NO_CODE",
		291648023: "OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REPLY_CODE",
		296832348: "OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_EXT_HDR_CHAIN_TOO_LONG",
		314124226: "OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REQUEST_DAR",
		317918891: "OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_OPT_TOO_BIG",
		331790407: "OPENCONFIGICMPV6TYPESCODE_MOBILE_PREFIX_ADVERTISEMENT_CODE",
		344112174: "OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_PORT",
		346678602: "OPENCONFIGICMPV6TYPESCODE_HOME_AGENT_ADDRESS_DISCOVERY_REPLY_CODE",
		347466590: "OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_TOO_MANY_EXT_HDRS",
		355305664: "OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REPLY_NO_SUCH_TABLE_ENTRY",
		360278613: "OPENCONFIGICMPV6TYPESCODE_ROUTER_ADVERTISEMENT_NO_CODE",
		361070650: "OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REPLY_EDAC_ROVR256",
		364101756: "OPENCONFIGICMPV6TYPESCODE_ROUTER_SOLICITATION_CODE",
		364325515: "OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_ERR_HDR_FIELD",
		370320010: "OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REQUEST_EDAR_ROVR128",
		373495651: "OPENCONFIGICMPV6TYPESCODE_INVERSE_NEIGHBOR_ADVERTISEMENT_NO_CODE",
		376629318: "OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_EXT_HDR_TOO_BIG",
		381117226: "OPENCONFIGICMPV6TYPESCODE_NEIGHBOR_ADVERTISEMENT_CODE",
		385978148: "OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REPLY_NO_SUCH_INTERFACE",
		398725672: "OPENCONFIGICMPV6TYPESCODE_HOME_AGENT_ADDRESS_DISCOVERY_REPLY_NO_CODE",
		403064484: "OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REQUEST_NO_ERROR",
		427688225: "OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REPLY_EDAC_ROVR192",
		429105906: "OPENCONFIGICMPV6TYPESCODE_NODE_INFORMATION_RESPONSE_UNKNOWN",
		432881377: "OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_DST_ADMIN_PROHIBITED",
		437451429: "OPENCONFIGICMPV6TYPESCODE_ECHO_REQUEST_NO_CODE",
		439696939: "OPENCONFIGICMPV6TYPESCODE_RENUNBERING_RESULT",
		441912272: "OPENCONFIGICMPV6TYPESCODE_MULTICAST_LISTENER_DONE_NO_CODE",
		446591485: "OPENCONFIGICMPV6TYPESCODE_ECHO_REQUEST_CODE",
		451758509: "OPENCONFIGICMPV6TYPESCODE_ROUTER_ADVERTISEMENT_CODE",
		456075856: "OPENCONFIGICMPV6TYPESCODE_REDIRECT_NO_CODE",
		458250824: "OPENCONFIGICMPV6TYPESCODE_ECHO_REPLY_CODE",
		470871876: "OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_REJECT_ROUTE_TO_DST",
		477192147: "OPENCONFIGICMPV6TYPESCODE_INVERSE_NEIGHBOR_ADVERTISEMENT_CODE",
		487763333: "OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REQUEST_EDAR_ROVR192",
		492395848: "OPENCONFIGICMPV6TYPESCODE_INVERSE_NEIGHBOR_SOLICITATION_NO_CODE",
		498167178: "OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REQUEST_CODE",
		504820605: "OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_ERR_IN_SRC_ROUTING_HDR",
		508484909: "OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_SR_UPPER_HDR_ERR",
		509568182: "OPENCONFIGICMPV6TYPESCODE_TIME_EXCEEDED_FRAGMENT_REASSEMBLY",
		521442724: "OPENCONFIGICMPV6TYPESCODE_NODE_INFORMATION_QUERY_CODE",
		523666998: "OPENCONFIGICMPV6TYPESCODE_ECHO_REPLY_NO_CODE",
		524513058: "OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_HDRS_TOO_LONG",
		525569786: "OPENCONFIGICMPV6TYPESCODE_PACKET_TOO_BIG_CODE",
		530503282: "OPENCONFIGICMPV6TYPESCODE_REDIRECT_CODE",
		533948408: "OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_NO_ROUTE_TO_DST",
		536639930: "OPENCONFIGICMPV6TYPESCODE_ROUTER_SOLICITATION_NO_CODE",
	}
	OpenconfigIcmpv6TypesCODE_value = map[string]int32{
		"OPENCONFIGICMPV6TYPESCODE_UNSET":                                        0,
		"OPENCONFIGICMPV6TYPESCODE_HOME_AGENT_ADDRESS_DISCOVERY_REQUEST_NO_CODE": 2792387,
		"OPENCONFIGICMPV6TYPESCODE_TIME_EXCEEDED_HOP_LIMIT":                      4874175,
		"OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REQUEST_EDAR_ROVR256":       18495870,
		"OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_BEYOND_SCOPE_OF_SRC":          22662986,
		"OPENCONFIGICMPV6TYPESCODE_MOBILE_PREFIX_ADVERTISEMENT_NO_CODE":          36179335,
		"OPENCONFIGICMPV6TYPESCODE_NODE_INFORMATION_QUERY_IPV6_ADDR":             36537486,
		"OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_UNRECOGNIZED_IPV6_OPT":          39436757,
		"OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REPLY_MALFORMED_QUERY":               39671959,
		"OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REPLY_EDAC_ROVR128":         41815814,
		"OPENCONFIGICMPV6TYPESCODE_NODE_INFORMATION_QUERY_NAME":                  49780762,
		"OPENCONFIGICMPV6TYPESCODE_HOME_AGENT_ADDRESS_DISCOVERY_REQUEST_CODE":    72643059,
		"OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_TOO_MANY_OPTS":                  84013001,
		"OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REPLY_EDAC_ROVR64":          86490505,
		"OPENCONFIGICMPV6TYPESCODE_NODE_INFORMATION_QUERY_IPV4_ADDR":             90823724,
		"OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REPLY_CODE":                          93986016,
		"OPENCONFIGICMPV6TYPESCODE_MULTICAST_LISTENER_QUERY_NO_CODE":             104300916,
		"OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REQUEST_CODE":                        119830645,
		"OPENCONFIGICMPV6TYPESCODE_MOBILE_PREFIX_SOLICITATION_NO_CODE":           121611916,
		"OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REPLY_MULTIPLE_INTF_SATISFY_QUERY":   124398154,
		"OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REPLY_DAC":                  164413652,
		"OPENCONFIGICMPV6TYPESCODE_PACKET_TOO_BIG_NO_CODE":                       174910168,
		"OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_CODE":                           181199551,
		"OPENCONFIGICMPV6TYPESCODE_INVERSE_NEIGHBOR_SOLICITATION_CODE":           184720938,
		"OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_UNRECOGNIZED_NET_HDR_TYPE":      185318453,
		"OPENCONFIGICMPV6TYPESCODE_NODE_INFORMATION_RESPONSE_SUCCESS":            192723461,
		"OPENCONFIGICMPV6TYPESCODE_NEIGHBOR_SOLICITATION_NO_CODE":                196539441,
		"OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_UNRECOGNIZED_NEXT_HDR_TYPE":     201444895,
		"OPENCONFIGICMPV6TYPESCODE_MULTICAST_LISTENER_QUERY_CODE":                211778374,
		"OPENCONFIGICMPV6TYPESCODE_MULTICAST_LISTENER_DONE_CODE":                 216533746,
		"OPENCONFIGICMPV6TYPESCODE_MOBILE_PREFIX_SOLICITATION_CODE":              229746814,
		"OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_INCOMPLETE_HDR_CHAIN":           232326081,
		"OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REQUEST_EDAR_ROVR64":        234342485,
		"OPENCONFIGICMPV6TYPESCODE_RENUNBERING_SEQ_NUM_RESET":                    239601824,
		"OPENCONFIGICMPV6TYPESCODE_NEIGHBOR_SOLICITATION_CODE":                   240583385,
		"OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_CODE":                         243825456,
		"OPENCONFIGICMPV6TYPESCODE_NDDE_INFORMATION_RESPONSE_CODE":               246504124,
		"OPENCONFIGICMPV6TYPESCODE_NEIGHBOR_ADVERTISEMENT_NO_CODE":               252580936,
		"OPENCONFIGICMPV6TYPESCODE_MULTICAST_LISTENER_REPORT_CODE":               257332212,
		"OPENCONFIGICMPV6TYPESCODE_RENUMBERING_CODE":                             262608942,
		"OPENCONFIGICMPV6TYPESCODE_TIME_EXCEEDED_CODE":                           266227201,
		"OPENCONFIGICMPV6TYPESCODE_RENUMBERING_COMMAND":                          268724448,
		"OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REPLY_NO_ERROR":                      270573561,
		"OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_ADDR":                         270687634,
		"OPENCONFIGICMPV6TYPESCODE_NODE_INFORMATION_RESPONSE_REFUSED":            276662596,
		"OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_SRC_ADDR_FAILED_POLICY":       286258614,
		"OPENCONFIGICMPV6TYPESCODE_MULTICAST_LISTENER_REPORT_NO_CODE":            291343186,
		"OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REPLY_CODE":                 291648023,
		"OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_EXT_HDR_CHAIN_TOO_LONG":         296832348,
		"OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REQUEST_DAR":                314124226,
		"OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_OPT_TOO_BIG":                    317918891,
		"OPENCONFIGICMPV6TYPESCODE_MOBILE_PREFIX_ADVERTISEMENT_CODE":             331790407,
		"OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_PORT":                         344112174,
		"OPENCONFIGICMPV6TYPESCODE_HOME_AGENT_ADDRESS_DISCOVERY_REPLY_CODE":      346678602,
		"OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_TOO_MANY_EXT_HDRS":              347466590,
		"OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REPLY_NO_SUCH_TABLE_ENTRY":           355305664,
		"OPENCONFIGICMPV6TYPESCODE_ROUTER_ADVERTISEMENT_NO_CODE":                 360278613,
		"OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REPLY_EDAC_ROVR256":         361070650,
		"OPENCONFIGICMPV6TYPESCODE_ROUTER_SOLICITATION_CODE":                     364101756,
		"OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_ERR_HDR_FIELD":                  364325515,
		"OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REQUEST_EDAR_ROVR128":       370320010,
		"OPENCONFIGICMPV6TYPESCODE_INVERSE_NEIGHBOR_ADVERTISEMENT_NO_CODE":       373495651,
		"OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_EXT_HDR_TOO_BIG":                376629318,
		"OPENCONFIGICMPV6TYPESCODE_NEIGHBOR_ADVERTISEMENT_CODE":                  381117226,
		"OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REPLY_NO_SUCH_INTERFACE":             385978148,
		"OPENCONFIGICMPV6TYPESCODE_HOME_AGENT_ADDRESS_DISCOVERY_REPLY_NO_CODE":   398725672,
		"OPENCONFIGICMPV6TYPESCODE_EXT_ECHO_REQUEST_NO_ERROR":                    403064484,
		"OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REPLY_EDAC_ROVR192":         427688225,
		"OPENCONFIGICMPV6TYPESCODE_NODE_INFORMATION_RESPONSE_UNKNOWN":            429105906,
		"OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_DST_ADMIN_PROHIBITED":         432881377,
		"OPENCONFIGICMPV6TYPESCODE_ECHO_REQUEST_NO_CODE":                         437451429,
		"OPENCONFIGICMPV6TYPESCODE_RENUNBERING_RESULT":                           439696939,
		"OPENCONFIGICMPV6TYPESCODE_MULTICAST_LISTENER_DONE_NO_CODE":              441912272,
		"OPENCONFIGICMPV6TYPESCODE_ECHO_REQUEST_CODE":                            446591485,
		"OPENCONFIGICMPV6TYPESCODE_ROUTER_ADVERTISEMENT_CODE":                    451758509,
		"OPENCONFIGICMPV6TYPESCODE_REDIRECT_NO_CODE":                             456075856,
		"OPENCONFIGICMPV6TYPESCODE_ECHO_REPLY_CODE":                              458250824,
		"OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_REJECT_ROUTE_TO_DST":          470871876,
		"OPENCONFIGICMPV6TYPESCODE_INVERSE_NEIGHBOR_ADVERTISEMENT_CODE":          477192147,
		"OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REQUEST_EDAR_ROVR192":       487763333,
		"OPENCONFIGICMPV6TYPESCODE_INVERSE_NEIGHBOR_SOLICITATION_NO_CODE":        492395848,
		"OPENCONFIGICMPV6TYPESCODE_DUPLICATE_ADDRESS_REQUEST_CODE":               498167178,
		"OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_ERR_IN_SRC_ROUTING_HDR":       504820605,
		"OPENCONFIGICMPV6TYPESCODE_PARAM_PROBLEM_SR_UPPER_HDR_ERR":               508484909,
		"OPENCONFIGICMPV6TYPESCODE_TIME_EXCEEDED_FRAGMENT_REASSEMBLY":            509568182,
		"OPENCONFIGICMPV6TYPESCODE_NODE_INFORMATION_QUERY_CODE":                  521442724,
		"OPENCONFIGICMPV6TYPESCODE_ECHO_REPLY_NO_CODE":                           523666998,
		"OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_HDRS_TOO_LONG":                524513058,
		"OPENCONFIGICMPV6TYPESCODE_PACKET_TOO_BIG_CODE":                          525569786,
		"OPENCONFIGICMPV6TYPESCODE_REDIRECT_CODE":                                530503282,
		"OPENCONFIGICMPV6TYPESCODE_DST_UNREACHABLE_NO_ROUTE_TO_DST":              533948408,
		"OPENCONFIGICMPV6TYPESCODE_ROUTER_SOLICITATION_NO_CODE":                  536639930,
	}
)

func (x OpenconfigIcmpv6TypesCODE) Enum() *OpenconfigIcmpv6TypesCODE {
	p := new(OpenconfigIcmpv6TypesCODE)
	*p = x
	return p
}

func (x OpenconfigIcmpv6TypesCODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIcmpv6TypesCODE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[29].Descriptor()
}

func (OpenconfigIcmpv6TypesCODE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[29]
}

func (x OpenconfigIcmpv6TypesCODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIcmpv6TypesCODE.Descriptor instead.
func (OpenconfigIcmpv6TypesCODE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{29}
}

// OpenconfigIcmpv6TypesTYPE represents an enumerated type generated for the YANG identity TYPE.
type OpenconfigIcmpv6TypesTYPE int32

const (
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_UNSET                                OpenconfigIcmpv6TypesTYPE = 0
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_TIME_EXCEEDED                        OpenconfigIcmpv6TypesTYPE = 1081674
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_EXT_ECHO_REQUEST                     OpenconfigIcmpv6TypesTYPE = 24717980
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_NODE_INFORMATION_QUERY               OpenconfigIcmpv6TypesTYPE = 45013475
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_ROUTER_SOLICITATION                  OpenconfigIcmpv6TypesTYPE = 98924893
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_DESTINATION_UNREACHABLE              OpenconfigIcmpv6TypesTYPE = 104111184
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_INVERSE_NEIGHBOR_SOLICITATION        OpenconfigIcmpv6TypesTYPE = 113591923
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_ECHO_REQUEST                         OpenconfigIcmpv6TypesTYPE = 146094964
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_MULTICAST_ROUTER_ADVERTISEMENT       OpenconfigIcmpv6TypesTYPE = 158362841
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_REDIRECT                             OpenconfigIcmpv6TypesTYPE = 163834461
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_HOME_AGENT_ADDRESS_DISCOVERY_REPLY   OpenconfigIcmpv6TypesTYPE = 176115613
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_MPL_CONTROL                          OpenconfigIcmpv6TypesTYPE = 192104808
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_HOME_AGENT_ADDRESS_DISCOVERY_REQUEST OpenconfigIcmpv6TypesTYPE = 198570822
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_CERTIFICATION_PATH_ADVERTISEMENT     OpenconfigIcmpv6TypesTYPE = 219240551
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_NODE_INFORMATION_RESPONSE            OpenconfigIcmpv6TypesTYPE = 243066920
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_MULTICAST_LISTENER_DONE              OpenconfigIcmpv6TypesTYPE = 247370491
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_ROUTER_ADVERTISEMENT                 OpenconfigIcmpv6TypesTYPE = 281134796
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_MULTICAST_ROUTER_TERMINATION         OpenconfigIcmpv6TypesTYPE = 293793680
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_INVERSE_NEIGHBOR_ADVERTISEMENT       OpenconfigIcmpv6TypesTYPE = 295419682
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_PACKET_TOO_BIG                       OpenconfigIcmpv6TypesTYPE = 351288337
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_MOBILE_PREFIX_SOLICITATION           OpenconfigIcmpv6TypesTYPE = 357008481
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_RENUNBERING                          OpenconfigIcmpv6TypesTYPE = 371733096
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_NEIGHBOR_SOLICITATION                OpenconfigIcmpv6TypesTYPE = 377474698
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_DUPLICATE_ADDRESS_REQUEST            OpenconfigIcmpv6TypesTYPE = 388522479
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_VERSION2_MULTICAST_LISTENER          OpenconfigIcmpv6TypesTYPE = 391572519
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_CERTIFICATION_PATH_SOLICITATION      OpenconfigIcmpv6TypesTYPE = 402605364
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_ILNPV6_LOCATOR_UPDATE                OpenconfigIcmpv6TypesTYPE = 430248453
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_DUPLICATE_ADDRESS_CONFIRMATION       OpenconfigIcmpv6TypesTYPE = 430658675
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_EXT_ECHO_REPLY                       OpenconfigIcmpv6TypesTYPE = 434363663
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_ECHO_REPLY                           OpenconfigIcmpv6TypesTYPE = 439504551
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_FMIPV6                               OpenconfigIcmpv6TypesTYPE = 443812321
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_MULTICAST_LISTENER_QUERY             OpenconfigIcmpv6TypesTYPE = 445767361
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_RPL_CONTROL                          OpenconfigIcmpv6TypesTYPE = 464318563
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_MULTICAST_ROUTER_SOLICITATION        OpenconfigIcmpv6TypesTYPE = 475272206
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_MULTICAST_LISTENER_REPORT            OpenconfigIcmpv6TypesTYPE = 480441241
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_PARAMETER_PROBLEM                    OpenconfigIcmpv6TypesTYPE = 496705406
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_MOBILE_PREFIX_ADVERTISEMENT          OpenconfigIcmpv6TypesTYPE = 529493424
	OpenconfigIcmpv6TypesTYPE_OPENCONFIGICMPV6TYPESTYPE_NEIGHBOR_ADVERTISEMENT               OpenconfigIcmpv6TypesTYPE = 533835365
)

// Enum value maps for OpenconfigIcmpv6TypesTYPE.
var (
	OpenconfigIcmpv6TypesTYPE_name = map[int32]string{
		0:         "OPENCONFIGICMPV6TYPESTYPE_UNSET",
		1081674:   "OPENCONFIGICMPV6TYPESTYPE_TIME_EXCEEDED",
		24717980:  "OPENCONFIGICMPV6TYPESTYPE_EXT_ECHO_REQUEST",
		45013475:  "OPENCONFIGICMPV6TYPESTYPE_NODE_INFORMATION_QUERY",
		98924893:  "OPENCONFIGICMPV6TYPESTYPE_ROUTER_SOLICITATION",
		104111184: "OPENCONFIGICMPV6TYPESTYPE_DESTINATION_UNREACHABLE",
		113591923: "OPENCONFIGICMPV6TYPESTYPE_INVERSE_NEIGHBOR_SOLICITATION",
		146094964: "OPENCONFIGICMPV6TYPESTYPE_ECHO_REQUEST",
		158362841: "OPENCONFIGICMPV6TYPESTYPE_MULTICAST_ROUTER_ADVERTISEMENT",
		163834461: "OPENCONFIGICMPV6TYPESTYPE_REDIRECT",
		176115613: "OPENCONFIGICMPV6TYPESTYPE_HOME_AGENT_ADDRESS_DISCOVERY_REPLY",
		192104808: "OPENCONFIGICMPV6TYPESTYPE_MPL_CONTROL",
		198570822: "OPENCONFIGICMPV6TYPESTYPE_HOME_AGENT_ADDRESS_DISCOVERY_REQUEST",
		219240551: "OPENCONFIGICMPV6TYPESTYPE_CERTIFICATION_PATH_ADVERTISEMENT",
		243066920: "OPENCONFIGICMPV6TYPESTYPE_NODE_INFORMATION_RESPONSE",
		247370491: "OPENCONFIGICMPV6TYPESTYPE_MULTICAST_LISTENER_DONE",
		281134796: "OPENCONFIGICMPV6TYPESTYPE_ROUTER_ADVERTISEMENT",
		293793680: "OPENCONFIGICMPV6TYPESTYPE_MULTICAST_ROUTER_TERMINATION",
		295419682: "OPENCONFIGICMPV6TYPESTYPE_INVERSE_NEIGHBOR_ADVERTISEMENT",
		351288337: "OPENCONFIGICMPV6TYPESTYPE_PACKET_TOO_BIG",
		357008481: "OPENCONFIGICMPV6TYPESTYPE_MOBILE_PREFIX_SOLICITATION",
		371733096: "OPENCONFIGICMPV6TYPESTYPE_RENUNBERING",
		377474698: "OPENCONFIGICMPV6TYPESTYPE_NEIGHBOR_SOLICITATION",
		388522479: "OPENCONFIGICMPV6TYPESTYPE_DUPLICATE_ADDRESS_REQUEST",
		391572519: "OPENCONFIGICMPV6TYPESTYPE_VERSION2_MULTICAST_LISTENER",
		402605364: "OPENCONFIGICMPV6TYPESTYPE_CERTIFICATION_PATH_SOLICITATION",
		430248453: "OPENCONFIGICMPV6TYPESTYPE_ILNPV6_LOCATOR_UPDATE",
		430658675: "OPENCONFIGICMPV6TYPESTYPE_DUPLICATE_ADDRESS_CONFIRMATION",
		434363663: "OPENCONFIGICMPV6TYPESTYPE_EXT_ECHO_REPLY",
		439504551: "OPENCONFIGICMPV6TYPESTYPE_ECHO_REPLY",
		443812321: "OPENCONFIGICMPV6TYPESTYPE_FMIPV6",
		445767361: "OPENCONFIGICMPV6TYPESTYPE_MULTICAST_LISTENER_QUERY",
		464318563: "OPENCONFIGICMPV6TYPESTYPE_RPL_CONTROL",
		475272206: "OPENCONFIGICMPV6TYPESTYPE_MULTICAST_ROUTER_SOLICITATION",
		480441241: "OPENCONFIGICMPV6TYPESTYPE_MULTICAST_LISTENER_REPORT",
		496705406: "OPENCONFIGICMPV6TYPESTYPE_PARAMETER_PROBLEM",
		529493424: "OPENCONFIGICMPV6TYPESTYPE_MOBILE_PREFIX_ADVERTISEMENT",
		533835365: "OPENCONFIGICMPV6TYPESTYPE_NEIGHBOR_ADVERTISEMENT",
	}
	OpenconfigIcmpv6TypesTYPE_value = map[string]int32{
		"OPENCONFIGICMPV6TYPESTYPE_UNSET":                                0,
		"OPENCONFIGICMPV6TYPESTYPE_TIME_EXCEEDED":                        1081674,
		"OPENCONFIGICMPV6TYPESTYPE_EXT_ECHO_REQUEST":                     24717980,
		"OPENCONFIGICMPV6TYPESTYPE_NODE_INFORMATION_QUERY":               45013475,
		"OPENCONFIGICMPV6TYPESTYPE_ROUTER_SOLICITATION":                  98924893,
		"OPENCONFIGICMPV6TYPESTYPE_DESTINATION_UNREACHABLE":              104111184,
		"OPENCONFIGICMPV6TYPESTYPE_INVERSE_NEIGHBOR_SOLICITATION":        113591923,
		"OPENCONFIGICMPV6TYPESTYPE_ECHO_REQUEST":                         146094964,
		"OPENCONFIGICMPV6TYPESTYPE_MULTICAST_ROUTER_ADVERTISEMENT":       158362841,
		"OPENCONFIGICMPV6TYPESTYPE_REDIRECT":                             163834461,
		"OPENCONFIGICMPV6TYPESTYPE_HOME_AGENT_ADDRESS_DISCOVERY_REPLY":   176115613,
		"OPENCONFIGICMPV6TYPESTYPE_MPL_CONTROL":                          192104808,
		"OPENCONFIGICMPV6TYPESTYPE_HOME_AGENT_ADDRESS_DISCOVERY_REQUEST": 198570822,
		"OPENCONFIGICMPV6TYPESTYPE_CERTIFICATION_PATH_ADVERTISEMENT":     219240551,
		"OPENCONFIGICMPV6TYPESTYPE_NODE_INFORMATION_RESPONSE":            243066920,
		"OPENCONFIGICMPV6TYPESTYPE_MULTICAST_LISTENER_DONE":              247370491,
		"OPENCONFIGICMPV6TYPESTYPE_ROUTER_ADVERTISEMENT":                 281134796,
		"OPENCONFIGICMPV6TYPESTYPE_MULTICAST_ROUTER_TERMINATION":         293793680,
		"OPENCONFIGICMPV6TYPESTYPE_INVERSE_NEIGHBOR_ADVERTISEMENT":       295419682,
		"OPENCONFIGICMPV6TYPESTYPE_PACKET_TOO_BIG":                       351288337,
		"OPENCONFIGICMPV6TYPESTYPE_MOBILE_PREFIX_SOLICITATION":           357008481,
		"OPENCONFIGICMPV6TYPESTYPE_RENUNBERING":                          371733096,
		"OPENCONFIGICMPV6TYPESTYPE_NEIGHBOR_SOLICITATION":                377474698,
		"OPENCONFIGICMPV6TYPESTYPE_DUPLICATE_ADDRESS_REQUEST":            388522479,
		"OPENCONFIGICMPV6TYPESTYPE_VERSION2_MULTICAST_LISTENER":          391572519,
		"OPENCONFIGICMPV6TYPESTYPE_CERTIFICATION_PATH_SOLICITATION":      402605364,
		"OPENCONFIGICMPV6TYPESTYPE_ILNPV6_LOCATOR_UPDATE":                430248453,
		"OPENCONFIGICMPV6TYPESTYPE_DUPLICATE_ADDRESS_CONFIRMATION":       430658675,
		"OPENCONFIGICMPV6TYPESTYPE_EXT_ECHO_REPLY":                       434363663,
		"OPENCONFIGICMPV6TYPESTYPE_ECHO_REPLY":                           439504551,
		"OPENCONFIGICMPV6TYPESTYPE_FMIPV6":                               443812321,
		"OPENCONFIGICMPV6TYPESTYPE_MULTICAST_LISTENER_QUERY":             445767361,
		"OPENCONFIGICMPV6TYPESTYPE_RPL_CONTROL":                          464318563,
		"OPENCONFIGICMPV6TYPESTYPE_MULTICAST_ROUTER_SOLICITATION":        475272206,
		"OPENCONFIGICMPV6TYPESTYPE_MULTICAST_LISTENER_REPORT":            480441241,
		"OPENCONFIGICMPV6TYPESTYPE_PARAMETER_PROBLEM":                    496705406,
		"OPENCONFIGICMPV6TYPESTYPE_MOBILE_PREFIX_ADVERTISEMENT":          529493424,
		"OPENCONFIGICMPV6TYPESTYPE_NEIGHBOR_ADVERTISEMENT":               533835365,
	}
)

func (x OpenconfigIcmpv6TypesTYPE) Enum() *OpenconfigIcmpv6TypesTYPE {
	p := new(OpenconfigIcmpv6TypesTYPE)
	*p = x
	return p
}

func (x OpenconfigIcmpv6TypesTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIcmpv6TypesTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[30].Descriptor()
}

func (OpenconfigIcmpv6TypesTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[30]
}

func (x OpenconfigIcmpv6TypesTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIcmpv6TypesTYPE.Descriptor instead.
func (OpenconfigIcmpv6TypesTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{30}
}

// OpenconfigIfAggregateAggregationType represents an enumerated type generated for the YANG enumerated type aggregation-type.
type OpenconfigIfAggregateAggregationType int32

const (
	OpenconfigIfAggregateAggregationType_OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_UNSET  OpenconfigIfAggregateAggregationType = 0
	OpenconfigIfAggregateAggregationType_OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_LACP   OpenconfigIfAggregateAggregationType = 1
	OpenconfigIfAggregateAggregationType_OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_STATIC OpenconfigIfAggregateAggregationType = 2
)

// Enum value maps for OpenconfigIfAggregateAggregationType.
var (
	OpenconfigIfAggregateAggregationType_name = map[int32]string{
		0: "OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_UNSET",
		1: "OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_LACP",
		2: "OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_STATIC",
	}
	OpenconfigIfAggregateAggregationType_value = map[string]int32{
		"OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_UNSET":  0,
		"OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_LACP":   1,
		"OPENCONFIGIFAGGREGATEAGGREGATIONTYPE_STATIC": 2,
	}
)

func (x OpenconfigIfAggregateAggregationType) Enum() *OpenconfigIfAggregateAggregationType {
	p := new(OpenconfigIfAggregateAggregationType)
	*p = x
	return p
}

func (x OpenconfigIfAggregateAggregationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIfAggregateAggregationType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[31].Descriptor()
}

func (OpenconfigIfAggregateAggregationType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[31]
}

func (x OpenconfigIfAggregateAggregationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIfAggregateAggregationType.Descriptor instead.
func (OpenconfigIfAggregateAggregationType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{31}
}

// OpenconfigIfEthernetETHERNETSPEED represents an enumerated type generated for the YANG identity ETHERNET_SPEED.
type OpenconfigIfEthernetETHERNETSPEED int32

const (
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_UNSET         OpenconfigIfEthernetETHERNETSPEED = 0
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_600GB   OpenconfigIfEthernetETHERNETSPEED = 33095753
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_UNKNOWN OpenconfigIfEthernetETHERNETSPEED = 63922730
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_2500MB  OpenconfigIfEthernetETHERNETSPEED = 129756682
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_800GB   OpenconfigIfEthernetETHERNETSPEED = 141062131
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_1GB     OpenconfigIfEthernetETHERNETSPEED = 158137778
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_25GB    OpenconfigIfEthernetETHERNETSPEED = 164726524
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_100MB   OpenconfigIfEthernetETHERNETSPEED = 176009444
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_10GB    OpenconfigIfEthernetETHERNETSPEED = 221101252
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_200GB   OpenconfigIfEthernetETHERNETSPEED = 231972805
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_100GB   OpenconfigIfEthernetETHERNETSPEED = 276675162
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_10MB    OpenconfigIfEthernetETHERNETSPEED = 321766842
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_400GB   OpenconfigIfEthernetETHERNETSPEED = 339939183
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_5GB     OpenconfigIfEthernetETHERNETSPEED = 425875238
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_50GB    OpenconfigIfEthernetETHERNETSPEED = 434311888
	OpenconfigIfEthernetETHERNETSPEED_OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_40GB    OpenconfigIfEthernetETHERNETSPEED = 470711119
)

// Enum value maps for OpenconfigIfEthernetETHERNETSPEED.
var (
	OpenconfigIfEthernetETHERNETSPEED_name = map[int32]string{
		0:         "OPENCONFIGIFETHERNETETHERNETSPEED_UNSET",
		33095753:  "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_600GB",
		63922730:  "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_UNKNOWN",
		129756682: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_2500MB",
		141062131: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_800GB",
		158137778: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_1GB",
		164726524: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_25GB",
		176009444: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_100MB",
		221101252: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_10GB",
		231972805: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_200GB",
		276675162: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_100GB",
		321766842: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_10MB",
		339939183: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_400GB",
		425875238: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_5GB",
		434311888: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_50GB",
		470711119: "OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_40GB",
	}
	OpenconfigIfEthernetETHERNETSPEED_value = map[string]int32{
		"OPENCONFIGIFETHERNETETHERNETSPEED_UNSET":         0,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_600GB":   33095753,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_UNKNOWN": 63922730,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_2500MB":  129756682,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_800GB":   141062131,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_1GB":     158137778,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_25GB":    164726524,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_100MB":   176009444,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_10GB":    221101252,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_200GB":   231972805,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_100GB":   276675162,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_10MB":    321766842,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_400GB":   339939183,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_5GB":     425875238,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_50GB":    434311888,
		"OPENCONFIGIFETHERNETETHERNETSPEED_SPEED_40GB":    470711119,
	}
)

func (x OpenconfigIfEthernetETHERNETSPEED) Enum() *OpenconfigIfEthernetETHERNETSPEED {
	p := new(OpenconfigIfEthernetETHERNETSPEED)
	*p = x
	return p
}

func (x OpenconfigIfEthernetETHERNETSPEED) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIfEthernetETHERNETSPEED) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[32].Descriptor()
}

func (OpenconfigIfEthernetETHERNETSPEED) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[32]
}

func (x OpenconfigIfEthernetETHERNETSPEED) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIfEthernetETHERNETSPEED.Descriptor instead.
func (OpenconfigIfEthernetETHERNETSPEED) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{32}
}

// OpenconfigIfEthernetINTERFACEFEC represents an enumerated type generated for the YANG identity INTERFACE_FEC.
type OpenconfigIfEthernetINTERFACEFEC int32

const (
	OpenconfigIfEthernetINTERFACEFEC_OPENCONFIGIFETHERNETINTERFACEFEC_UNSET                   OpenconfigIfEthernetINTERFACEFEC = 0
	OpenconfigIfEthernetINTERFACEFEC_OPENCONFIGIFETHERNETINTERFACEFEC_FEC_RS528               OpenconfigIfEthernetINTERFACEFEC = 88464744
	OpenconfigIfEthernetINTERFACEFEC_OPENCONFIGIFETHERNETINTERFACEFEC_FEC_RS544               OpenconfigIfEthernetINTERFACEFEC = 189130486
	OpenconfigIfEthernetINTERFACEFEC_OPENCONFIGIFETHERNETINTERFACEFEC_FEC_RS544_2X_INTERLEAVE OpenconfigIfEthernetINTERFACEFEC = 233860969
	OpenconfigIfEthernetINTERFACEFEC_OPENCONFIGIFETHERNETINTERFACEFEC_FEC_DISABLED            OpenconfigIfEthernetINTERFACEFEC = 292735108
	OpenconfigIfEthernetINTERFACEFEC_OPENCONFIGIFETHERNETINTERFACEFEC_FEC_FC                  OpenconfigIfEthernetINTERFACEFEC = 491224709
)

// Enum value maps for OpenconfigIfEthernetINTERFACEFEC.
var (
	OpenconfigIfEthernetINTERFACEFEC_name = map[int32]string{
		0:         "OPENCONFIGIFETHERNETINTERFACEFEC_UNSET",
		88464744:  "OPENCONFIGIFETHERNETINTERFACEFEC_FEC_RS528",
		189130486: "OPENCONFIGIFETHERNETINTERFACEFEC_FEC_RS544",
		233860969: "OPENCONFIGIFETHERNETINTERFACEFEC_FEC_RS544_2X_INTERLEAVE",
		292735108: "OPENCONFIGIFETHERNETINTERFACEFEC_FEC_DISABLED",
		491224709: "OPENCONFIGIFETHERNETINTERFACEFEC_FEC_FC",
	}
	OpenconfigIfEthernetINTERFACEFEC_value = map[string]int32{
		"OPENCONFIGIFETHERNETINTERFACEFEC_UNSET":                   0,
		"OPENCONFIGIFETHERNETINTERFACEFEC_FEC_RS528":               88464744,
		"OPENCONFIGIFETHERNETINTERFACEFEC_FEC_RS544":               189130486,
		"OPENCONFIGIFETHERNETINTERFACEFEC_FEC_RS544_2X_INTERLEAVE": 233860969,
		"OPENCONFIGIFETHERNETINTERFACEFEC_FEC_DISABLED":            292735108,
		"OPENCONFIGIFETHERNETINTERFACEFEC_FEC_FC":                  491224709,
	}
)

func (x OpenconfigIfEthernetINTERFACEFEC) Enum() *OpenconfigIfEthernetINTERFACEFEC {
	p := new(OpenconfigIfEthernetINTERFACEFEC)
	*p = x
	return p
}

func (x OpenconfigIfEthernetINTERFACEFEC) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIfEthernetINTERFACEFEC) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[33].Descriptor()
}

func (OpenconfigIfEthernetINTERFACEFEC) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[33]
}

func (x OpenconfigIfEthernetINTERFACEFEC) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIfEthernetINTERFACEFEC.Descriptor instead.
func (OpenconfigIfEthernetINTERFACEFEC) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{33}
}

// OpenconfigIsisIsisMetricFlags represents an enumerated type generated for the YANG enumerated type isis-metric-flags.
type OpenconfigIsisIsisMetricFlags int32

const (
	OpenconfigIsisIsisMetricFlags_OPENCONFIGISISISISMETRICFLAGS_UNSET       OpenconfigIsisIsisMetricFlags = 0
	OpenconfigIsisIsisMetricFlags_OPENCONFIGISISISISMETRICFLAGS_INTERNAL    OpenconfigIsisIsisMetricFlags = 1
	OpenconfigIsisIsisMetricFlags_OPENCONFIGISISISISMETRICFLAGS_UNSUPPORTED OpenconfigIsisIsisMetricFlags = 2
)

// Enum value maps for OpenconfigIsisIsisMetricFlags.
var (
	OpenconfigIsisIsisMetricFlags_name = map[int32]string{
		0: "OPENCONFIGISISISISMETRICFLAGS_UNSET",
		1: "OPENCONFIGISISISISMETRICFLAGS_INTERNAL",
		2: "OPENCONFIGISISISISMETRICFLAGS_UNSUPPORTED",
	}
	OpenconfigIsisIsisMetricFlags_value = map[string]int32{
		"OPENCONFIGISISISISMETRICFLAGS_UNSET":       0,
		"OPENCONFIGISISISISMETRICFLAGS_INTERNAL":    1,
		"OPENCONFIGISISISISMETRICFLAGS_UNSUPPORTED": 2,
	}
)

func (x OpenconfigIsisIsisMetricFlags) Enum() *OpenconfigIsisIsisMetricFlags {
	p := new(OpenconfigIsisIsisMetricFlags)
	*p = x
	return p
}

func (x OpenconfigIsisIsisMetricFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisIsisMetricFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[34].Descriptor()
}

func (OpenconfigIsisIsisMetricFlags) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[34]
}

func (x OpenconfigIsisIsisMetricFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisIsisMetricFlags.Descriptor instead.
func (OpenconfigIsisIsisMetricFlags) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{34}
}

// OpenconfigIsisLsdbTypesISISSUBTLVTYPE represents an enumerated type generated for the YANG identity ISIS_SUBTLV_TYPE.
type OpenconfigIsisLsdbTypesISISSUBTLVTYPE int32

const (
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_UNSET                                    OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 0
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_SUBTLVS_TYPE             OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 8389823
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_ADMIN_GROUP              OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 30752835
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV6_NEIGHBOR_ADDRESS    OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 62595447
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_TE_DEFAULT_METRIC        OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 84488708
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_PREFIX_FLAGS             OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 120776505
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_RESIDUAL_BANDWIDTH       OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 125276661
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_IPV4_ROUTER_ID           OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 146710436
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV4_INTERFACE_ADDRESS   OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 151077274
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_DELAY_VARIATION     OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 152169028
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_AVAILABLE_BANDWIDTH      OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 162926581
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_UTILIZED_BANDWIDTH       OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 199835886
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_LOSS                OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 204065508
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_MIN_MAX_LINK_DELAY       OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 225688360
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_ROUTER_CAPABILITY_SR_ALGORITHM           OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 238900237
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_ATTRIBUTES          OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 250713986
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_PROTECTION_TYPE     OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 262837899
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_IPV6_ROUTER_ID           OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 266502986
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_ROUTER_CAPABILITY_SR_CAPABILITY          OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 297502288
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV4_NEIGHBOR_ADDRESS    OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 302536829
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_MAX_LINK_BANDWIDTH       OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 305192025
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_PREFIX_SID               OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 311178044
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_ID                  OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 318085186
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_MAX_RESERVABLE_BANDWIDTH OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 336093730
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_UNRESERVED_BANDWIDTH     OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 347423013
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_SUBTLVS_TYPE             OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 360228928
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_BANDWIDTH_CONSTRAINTS    OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 372383028
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_DELAY               OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 407431566
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_TAG64                    OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 428754929
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV6_INTERFACE_ADDRESS   OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 447335508
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_UNCONSTRAINED_LSP        OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 462470049
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_ADJ_LAN_SID              OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 477375444
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_ADJ_SID                  OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 488894800
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_ROUTER_CAPABILITY_SUBTLVS_TYPE           OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 494655834
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_TAG                      OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 502161515
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_EXTENDED_ADMIN_GROUP     OpenconfigIsisLsdbTypesISISSUBTLVTYPE = 533689701
)

// Enum value maps for OpenconfigIsisLsdbTypesISISSUBTLVTYPE.
var (
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_name = map[int32]string{
		0:         "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_UNSET",
		8389823:   "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_SUBTLVS_TYPE",
		30752835:  "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_ADMIN_GROUP",
		62595447:  "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV6_NEIGHBOR_ADDRESS",
		84488708:  "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_TE_DEFAULT_METRIC",
		120776505: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_PREFIX_FLAGS",
		125276661: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_RESIDUAL_BANDWIDTH",
		146710436: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_IPV4_ROUTER_ID",
		151077274: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV4_INTERFACE_ADDRESS",
		152169028: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_DELAY_VARIATION",
		162926581: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_AVAILABLE_BANDWIDTH",
		199835886: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_UTILIZED_BANDWIDTH",
		204065508: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_LOSS",
		225688360: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_MIN_MAX_LINK_DELAY",
		238900237: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_ROUTER_CAPABILITY_SR_ALGORITHM",
		250713986: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_ATTRIBUTES",
		262837899: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_PROTECTION_TYPE",
		266502986: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_IPV6_ROUTER_ID",
		297502288: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_ROUTER_CAPABILITY_SR_CAPABILITY",
		302536829: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV4_NEIGHBOR_ADDRESS",
		305192025: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_MAX_LINK_BANDWIDTH",
		311178044: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_PREFIX_SID",
		318085186: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_ID",
		336093730: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_MAX_RESERVABLE_BANDWIDTH",
		347423013: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_UNRESERVED_BANDWIDTH",
		360228928: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_SUBTLVS_TYPE",
		372383028: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_BANDWIDTH_CONSTRAINTS",
		407431566: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_DELAY",
		428754929: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_TAG64",
		447335508: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV6_INTERFACE_ADDRESS",
		462470049: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_UNCONSTRAINED_LSP",
		477375444: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_ADJ_LAN_SID",
		488894800: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_ADJ_SID",
		494655834: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_ROUTER_CAPABILITY_SUBTLVS_TYPE",
		502161515: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_TAG",
		533689701: "OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_EXTENDED_ADMIN_GROUP",
	}
	OpenconfigIsisLsdbTypesISISSUBTLVTYPE_value = map[string]int32{
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_UNSET":                                    0,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_SUBTLVS_TYPE":             8389823,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_ADMIN_GROUP":              30752835,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV6_NEIGHBOR_ADDRESS":    62595447,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_TE_DEFAULT_METRIC":        84488708,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_PREFIX_FLAGS":             120776505,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_RESIDUAL_BANDWIDTH":       125276661,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_IPV4_ROUTER_ID":           146710436,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV4_INTERFACE_ADDRESS":   151077274,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_DELAY_VARIATION":     152169028,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_AVAILABLE_BANDWIDTH":      162926581,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_UTILIZED_BANDWIDTH":       199835886,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_LOSS":                204065508,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_MIN_MAX_LINK_DELAY":       225688360,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_ROUTER_CAPABILITY_SR_ALGORITHM":           238900237,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_ATTRIBUTES":          250713986,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_PROTECTION_TYPE":     262837899,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_IPV6_ROUTER_ID":           266502986,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_ROUTER_CAPABILITY_SR_CAPABILITY":          297502288,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV4_NEIGHBOR_ADDRESS":    302536829,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_MAX_LINK_BANDWIDTH":       305192025,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_PREFIX_SID":               311178044,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_ID":                  318085186,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_MAX_RESERVABLE_BANDWIDTH": 336093730,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_UNRESERVED_BANDWIDTH":     347423013,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_SUBTLVS_TYPE":             360228928,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_BANDWIDTH_CONSTRAINTS":    372383028,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_LINK_DELAY":               407431566,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_TAG64":                    428754929,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_IPV6_INTERFACE_ADDRESS":   447335508,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_UNCONSTRAINED_LSP":        462470049,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_ADJ_LAN_SID":              477375444,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_ADJ_SID":                  488894800,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_ROUTER_CAPABILITY_SUBTLVS_TYPE":           494655834,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IP_REACHABILITY_TAG":                      502161515,
		"OPENCONFIGISISLSDBTYPESISISSUBTLVTYPE_IS_REACHABILITY_EXTENDED_ADMIN_GROUP":     533689701,
	}
)

func (x OpenconfigIsisLsdbTypesISISSUBTLVTYPE) Enum() *OpenconfigIsisLsdbTypesISISSUBTLVTYPE {
	p := new(OpenconfigIsisLsdbTypesISISSUBTLVTYPE)
	*p = x
	return p
}

func (x OpenconfigIsisLsdbTypesISISSUBTLVTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisLsdbTypesISISSUBTLVTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[35].Descriptor()
}

func (OpenconfigIsisLsdbTypesISISSUBTLVTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[35]
}

func (x OpenconfigIsisLsdbTypesISISSUBTLVTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisLsdbTypesISISSUBTLVTYPE.Descriptor instead.
func (OpenconfigIsisLsdbTypesISISSUBTLVTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{35}
}

// OpenconfigIsisLsdbTypesISISTLVTYPE represents an enumerated type generated for the YANG identity ISIS_TLV_TYPE.
type OpenconfigIsisLsdbTypesISISTLVTYPE int32

const (
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_UNSET                      OpenconfigIsisLsdbTypesISISTLVTYPE = 0
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_ISN                     OpenconfigIsisLsdbTypesISISTLVTYPE = 11791417
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_SRLG                  OpenconfigIsisLsdbTypesISISTLVTYPE = 34773981
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_PURGE_OI                   OpenconfigIsisLsdbTypesISISTLVTYPE = 83596849
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_NLPID                      OpenconfigIsisLsdbTypesISISTLVTYPE = 97911270
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_REACHABILITY          OpenconfigIsisLsdbTypesISISTLVTYPE = 123793844
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_IPV6_REACHABILITY       OpenconfigIsisLsdbTypesISISTLVTYPE = 160105040
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_EXTERNAL_REACHABILITY OpenconfigIsisLsdbTypesISISTLVTYPE = 172032920
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_LSP_BUFFER_SIZE            OpenconfigIsisLsdbTypesISISTLVTYPE = 174409741
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_INSTANCE_ID                OpenconfigIsisLsdbTypesISISTLVTYPE = 190868124
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_MULTI_TOPOLOGY             OpenconfigIsisLsdbTypesISISTLVTYPE = 209052772
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_IPV4_REACHABILITY       OpenconfigIsisLsdbTypesISISTLVTYPE = 213324354
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_INTERNAL_REACHABILITY OpenconfigIsisLsdbTypesISISTLVTYPE = 215509190
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_AUTHENTICATION             OpenconfigIsisLsdbTypesISISTLVTYPE = 226539161
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_INTERFACE_ADDRESSES   OpenconfigIsisLsdbTypesISISTLVTYPE = 264046255
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_TE_ROUTER_ID          OpenconfigIsisLsdbTypesISISTLVTYPE = 278019714
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_IS_NEIGHBOR_ATTRIBUTE   OpenconfigIsisLsdbTypesISISTLVTYPE = 297996031
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_INTERFACE_ADDRESSES   OpenconfigIsisLsdbTypesISISTLVTYPE = 302296485
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_ROUTER_CAPABILITY          OpenconfigIsisLsdbTypesISISTLVTYPE = 346670691
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_DYNAMIC_NAME               OpenconfigIsisLsdbTypesISISTLVTYPE = 351978310
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_EXTENDED_IPV4_REACHABILITY OpenconfigIsisLsdbTypesISISTLVTYPE = 375140970
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_ISIS_ALIAS_ID              OpenconfigIsisLsdbTypesISISTLVTYPE = 380304980
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_AREA_ADDRESSES             OpenconfigIsisLsdbTypesISISTLVTYPE = 402418059
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_SRLG                  OpenconfigIsisLsdbTypesISISTLVTYPE = 411570407
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IIS_NEIGHBORS              OpenconfigIsisLsdbTypesISISTLVTYPE = 466521582
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_TE_ROUTER_ID          OpenconfigIsisLsdbTypesISISTLVTYPE = 490607584
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_EXTENDED_IS_REACHABILITY   OpenconfigIsisLsdbTypesISISTLVTYPE = 512182221
	OpenconfigIsisLsdbTypesISISTLVTYPE_OPENCONFIGISISLSDBTYPESISISTLVTYPE_IS_NEIGHBOR_ATTRIBUTE      OpenconfigIsisLsdbTypesISISTLVTYPE = 515453003
)

// Enum value maps for OpenconfigIsisLsdbTypesISISTLVTYPE.
var (
	OpenconfigIsisLsdbTypesISISTLVTYPE_name = map[int32]string{
		0:         "OPENCONFIGISISLSDBTYPESISISTLVTYPE_UNSET",
		11791417:  "OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_ISN",
		34773981:  "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_SRLG",
		83596849:  "OPENCONFIGISISLSDBTYPESISISTLVTYPE_PURGE_OI",
		97911270:  "OPENCONFIGISISLSDBTYPESISISTLVTYPE_NLPID",
		123793844: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_REACHABILITY",
		160105040: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_IPV6_REACHABILITY",
		172032920: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_EXTERNAL_REACHABILITY",
		174409741: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_LSP_BUFFER_SIZE",
		190868124: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_INSTANCE_ID",
		209052772: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_MULTI_TOPOLOGY",
		213324354: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_IPV4_REACHABILITY",
		215509190: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_INTERNAL_REACHABILITY",
		226539161: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_AUTHENTICATION",
		264046255: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_INTERFACE_ADDRESSES",
		278019714: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_TE_ROUTER_ID",
		297996031: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_IS_NEIGHBOR_ATTRIBUTE",
		302296485: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_INTERFACE_ADDRESSES",
		346670691: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_ROUTER_CAPABILITY",
		351978310: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_DYNAMIC_NAME",
		375140970: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_EXTENDED_IPV4_REACHABILITY",
		380304980: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_ISIS_ALIAS_ID",
		402418059: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_AREA_ADDRESSES",
		411570407: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_SRLG",
		466521582: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IIS_NEIGHBORS",
		490607584: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_TE_ROUTER_ID",
		512182221: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_EXTENDED_IS_REACHABILITY",
		515453003: "OPENCONFIGISISLSDBTYPESISISTLVTYPE_IS_NEIGHBOR_ATTRIBUTE",
	}
	OpenconfigIsisLsdbTypesISISTLVTYPE_value = map[string]int32{
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_UNSET":                      0,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_ISN":                     11791417,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_SRLG":                  34773981,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_PURGE_OI":                   83596849,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_NLPID":                      97911270,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_REACHABILITY":          123793844,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_IPV6_REACHABILITY":       160105040,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_EXTERNAL_REACHABILITY": 172032920,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_LSP_BUFFER_SIZE":            174409741,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_INSTANCE_ID":                190868124,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_MULTI_TOPOLOGY":             209052772,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_IPV4_REACHABILITY":       213324354,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_INTERNAL_REACHABILITY": 215509190,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_AUTHENTICATION":             226539161,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_INTERFACE_ADDRESSES":   264046255,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_TE_ROUTER_ID":          278019714,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_MT_IS_NEIGHBOR_ATTRIBUTE":   297996031,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_INTERFACE_ADDRESSES":   302296485,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_ROUTER_CAPABILITY":          346670691,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_DYNAMIC_NAME":               351978310,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_EXTENDED_IPV4_REACHABILITY": 375140970,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_ISIS_ALIAS_ID":              380304980,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_AREA_ADDRESSES":             402418059,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV4_SRLG":                  411570407,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IIS_NEIGHBORS":              466521582,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IPV6_TE_ROUTER_ID":          490607584,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_EXTENDED_IS_REACHABILITY":   512182221,
		"OPENCONFIGISISLSDBTYPESISISTLVTYPE_IS_NEIGHBOR_ATTRIBUTE":      515453003,
	}
)

func (x OpenconfigIsisLsdbTypesISISTLVTYPE) Enum() *OpenconfigIsisLsdbTypesISISTLVTYPE {
	p := new(OpenconfigIsisLsdbTypesISISTLVTYPE)
	*p = x
	return p
}

func (x OpenconfigIsisLsdbTypesISISTLVTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisLsdbTypesISISTLVTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[36].Descriptor()
}

func (OpenconfigIsisLsdbTypesISISTLVTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[36]
}

func (x OpenconfigIsisLsdbTypesISISTLVTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisLsdbTypesISISTLVTYPE.Descriptor instead.
func (OpenconfigIsisLsdbTypesISISTLVTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{36}
}

// OpenconfigIsisTypesAFISAFITYPE represents an enumerated type generated for the YANG identity AFI_SAFI_TYPE.
type OpenconfigIsisTypesAFISAFITYPE int32

const (
	OpenconfigIsisTypesAFISAFITYPE_OPENCONFIGISISTYPESAFISAFITYPE_UNSET          OpenconfigIsisTypesAFISAFITYPE = 0
	OpenconfigIsisTypesAFISAFITYPE_OPENCONFIGISISTYPESAFISAFITYPE_IPV6_MULTICAST OpenconfigIsisTypesAFISAFITYPE = 40100870
	OpenconfigIsisTypesAFISAFITYPE_OPENCONFIGISISTYPESAFISAFITYPE_IPV4_MULTICAST OpenconfigIsisTypesAFISAFITYPE = 161450660
	OpenconfigIsisTypesAFISAFITYPE_OPENCONFIGISISTYPESAFISAFITYPE_IPV4_UNICAST   OpenconfigIsisTypesAFISAFITYPE = 196909421
	OpenconfigIsisTypesAFISAFITYPE_OPENCONFIGISISTYPESAFISAFITYPE_IPV6_UNICAST   OpenconfigIsisTypesAFISAFITYPE = 270342995
)

// Enum value maps for OpenconfigIsisTypesAFISAFITYPE.
var (
	OpenconfigIsisTypesAFISAFITYPE_name = map[int32]string{
		0:         "OPENCONFIGISISTYPESAFISAFITYPE_UNSET",
		40100870:  "OPENCONFIGISISTYPESAFISAFITYPE_IPV6_MULTICAST",
		161450660: "OPENCONFIGISISTYPESAFISAFITYPE_IPV4_MULTICAST",
		196909421: "OPENCONFIGISISTYPESAFISAFITYPE_IPV4_UNICAST",
		270342995: "OPENCONFIGISISTYPESAFISAFITYPE_IPV6_UNICAST",
	}
	OpenconfigIsisTypesAFISAFITYPE_value = map[string]int32{
		"OPENCONFIGISISTYPESAFISAFITYPE_UNSET":          0,
		"OPENCONFIGISISTYPESAFISAFITYPE_IPV6_MULTICAST": 40100870,
		"OPENCONFIGISISTYPESAFISAFITYPE_IPV4_MULTICAST": 161450660,
		"OPENCONFIGISISTYPESAFISAFITYPE_IPV4_UNICAST":   196909421,
		"OPENCONFIGISISTYPESAFISAFITYPE_IPV6_UNICAST":   270342995,
	}
)

func (x OpenconfigIsisTypesAFISAFITYPE) Enum() *OpenconfigIsisTypesAFISAFITYPE {
	p := new(OpenconfigIsisTypesAFISAFITYPE)
	*p = x
	return p
}

func (x OpenconfigIsisTypesAFISAFITYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisTypesAFISAFITYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[37].Descriptor()
}

func (OpenconfigIsisTypesAFISAFITYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[37]
}

func (x OpenconfigIsisTypesAFISAFITYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisTypesAFISAFITYPE.Descriptor instead.
func (OpenconfigIsisTypesAFISAFITYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{37}
}

// OpenconfigIsisTypesAFITYPE represents an enumerated type generated for the YANG identity AFI_TYPE.
type OpenconfigIsisTypesAFITYPE int32

const (
	OpenconfigIsisTypesAFITYPE_OPENCONFIGISISTYPESAFITYPE_UNSET OpenconfigIsisTypesAFITYPE = 0
	OpenconfigIsisTypesAFITYPE_OPENCONFIGISISTYPESAFITYPE_IPV4  OpenconfigIsisTypesAFITYPE = 255993089
	OpenconfigIsisTypesAFITYPE_OPENCONFIGISISTYPESAFITYPE_IPV6  OpenconfigIsisTypesAFITYPE = 255993091
)

// Enum value maps for OpenconfigIsisTypesAFITYPE.
var (
	OpenconfigIsisTypesAFITYPE_name = map[int32]string{
		0:         "OPENCONFIGISISTYPESAFITYPE_UNSET",
		255993089: "OPENCONFIGISISTYPESAFITYPE_IPV4",
		255993091: "OPENCONFIGISISTYPESAFITYPE_IPV6",
	}
	OpenconfigIsisTypesAFITYPE_value = map[string]int32{
		"OPENCONFIGISISTYPESAFITYPE_UNSET": 0,
		"OPENCONFIGISISTYPESAFITYPE_IPV4":  255993089,
		"OPENCONFIGISISTYPESAFITYPE_IPV6":  255993091,
	}
)

func (x OpenconfigIsisTypesAFITYPE) Enum() *OpenconfigIsisTypesAFITYPE {
	p := new(OpenconfigIsisTypesAFITYPE)
	*p = x
	return p
}

func (x OpenconfigIsisTypesAFITYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisTypesAFITYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[38].Descriptor()
}

func (OpenconfigIsisTypesAFITYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[38]
}

func (x OpenconfigIsisTypesAFITYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisTypesAFITYPE.Descriptor instead.
func (OpenconfigIsisTypesAFITYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{38}
}

// OpenconfigIsisTypesAUTHMODE represents an enumerated type generated for the YANG identity AUTH_MODE.
type OpenconfigIsisTypesAUTHMODE int32

const (
	OpenconfigIsisTypesAUTHMODE_OPENCONFIGISISTYPESAUTHMODE_UNSET OpenconfigIsisTypesAUTHMODE = 0
	OpenconfigIsisTypesAUTHMODE_OPENCONFIGISISTYPESAUTHMODE_TEXT  OpenconfigIsisTypesAUTHMODE = 57944094
	OpenconfigIsisTypesAUTHMODE_OPENCONFIGISISTYPESAUTHMODE_MD5   OpenconfigIsisTypesAUTHMODE = 472999741
)

// Enum value maps for OpenconfigIsisTypesAUTHMODE.
var (
	OpenconfigIsisTypesAUTHMODE_name = map[int32]string{
		0:         "OPENCONFIGISISTYPESAUTHMODE_UNSET",
		57944094:  "OPENCONFIGISISTYPESAUTHMODE_TEXT",
		472999741: "OPENCONFIGISISTYPESAUTHMODE_MD5",
	}
	OpenconfigIsisTypesAUTHMODE_value = map[string]int32{
		"OPENCONFIGISISTYPESAUTHMODE_UNSET": 0,
		"OPENCONFIGISISTYPESAUTHMODE_TEXT":  57944094,
		"OPENCONFIGISISTYPESAUTHMODE_MD5":   472999741,
	}
)

func (x OpenconfigIsisTypesAUTHMODE) Enum() *OpenconfigIsisTypesAUTHMODE {
	p := new(OpenconfigIsisTypesAUTHMODE)
	*p = x
	return p
}

func (x OpenconfigIsisTypesAUTHMODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisTypesAUTHMODE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[39].Descriptor()
}

func (OpenconfigIsisTypesAUTHMODE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[39]
}

func (x OpenconfigIsisTypesAUTHMODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisTypesAUTHMODE.Descriptor instead.
func (OpenconfigIsisTypesAUTHMODE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{39}
}

// OpenconfigIsisTypesAdaptiveTimerType represents an enumerated type generated for the YANG enumerated type adaptive-timer-type.
type OpenconfigIsisTypesAdaptiveTimerType int32

const (
	OpenconfigIsisTypesAdaptiveTimerType_OPENCONFIGISISTYPESADAPTIVETIMERTYPE_UNSET       OpenconfigIsisTypesAdaptiveTimerType = 0
	OpenconfigIsisTypesAdaptiveTimerType_OPENCONFIGISISTYPESADAPTIVETIMERTYPE_LINEAR      OpenconfigIsisTypesAdaptiveTimerType = 1
	OpenconfigIsisTypesAdaptiveTimerType_OPENCONFIGISISTYPESADAPTIVETIMERTYPE_EXPONENTIAL OpenconfigIsisTypesAdaptiveTimerType = 2
)

// Enum value maps for OpenconfigIsisTypesAdaptiveTimerType.
var (
	OpenconfigIsisTypesAdaptiveTimerType_name = map[int32]string{
		0: "OPENCONFIGISISTYPESADAPTIVETIMERTYPE_UNSET",
		1: "OPENCONFIGISISTYPESADAPTIVETIMERTYPE_LINEAR",
		2: "OPENCONFIGISISTYPESADAPTIVETIMERTYPE_EXPONENTIAL",
	}
	OpenconfigIsisTypesAdaptiveTimerType_value = map[string]int32{
		"OPENCONFIGISISTYPESADAPTIVETIMERTYPE_UNSET":       0,
		"OPENCONFIGISISTYPESADAPTIVETIMERTYPE_LINEAR":      1,
		"OPENCONFIGISISTYPESADAPTIVETIMERTYPE_EXPONENTIAL": 2,
	}
)

func (x OpenconfigIsisTypesAdaptiveTimerType) Enum() *OpenconfigIsisTypesAdaptiveTimerType {
	p := new(OpenconfigIsisTypesAdaptiveTimerType)
	*p = x
	return p
}

func (x OpenconfigIsisTypesAdaptiveTimerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisTypesAdaptiveTimerType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[40].Descriptor()
}

func (OpenconfigIsisTypesAdaptiveTimerType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[40]
}

func (x OpenconfigIsisTypesAdaptiveTimerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisTypesAdaptiveTimerType.Descriptor instead.
func (OpenconfigIsisTypesAdaptiveTimerType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{40}
}

// OpenconfigIsisTypesCircuitType represents an enumerated type generated for the YANG enumerated type circuit-type.
type OpenconfigIsisTypesCircuitType int32

const (
	OpenconfigIsisTypesCircuitType_OPENCONFIGISISTYPESCIRCUITTYPE_UNSET          OpenconfigIsisTypesCircuitType = 0
	OpenconfigIsisTypesCircuitType_OPENCONFIGISISTYPESCIRCUITTYPE_POINT_TO_POINT OpenconfigIsisTypesCircuitType = 1
	OpenconfigIsisTypesCircuitType_OPENCONFIGISISTYPESCIRCUITTYPE_BROADCAST      OpenconfigIsisTypesCircuitType = 2
)

// Enum value maps for OpenconfigIsisTypesCircuitType.
var (
	OpenconfigIsisTypesCircuitType_name = map[int32]string{
		0: "OPENCONFIGISISTYPESCIRCUITTYPE_UNSET",
		1: "OPENCONFIGISISTYPESCIRCUITTYPE_POINT_TO_POINT",
		2: "OPENCONFIGISISTYPESCIRCUITTYPE_BROADCAST",
	}
	OpenconfigIsisTypesCircuitType_value = map[string]int32{
		"OPENCONFIGISISTYPESCIRCUITTYPE_UNSET":          0,
		"OPENCONFIGISISTYPESCIRCUITTYPE_POINT_TO_POINT": 1,
		"OPENCONFIGISISTYPESCIRCUITTYPE_BROADCAST":      2,
	}
)

func (x OpenconfigIsisTypesCircuitType) Enum() *OpenconfigIsisTypesCircuitType {
	p := new(OpenconfigIsisTypesCircuitType)
	*p = x
	return p
}

func (x OpenconfigIsisTypesCircuitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisTypesCircuitType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[41].Descriptor()
}

func (OpenconfigIsisTypesCircuitType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[41]
}

func (x OpenconfigIsisTypesCircuitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisTypesCircuitType.Descriptor instead.
func (OpenconfigIsisTypesCircuitType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{41}
}

// OpenconfigIsisTypesHelloPaddingType represents an enumerated type generated for the YANG enumerated type hello-padding-type.
type OpenconfigIsisTypesHelloPaddingType int32

const (
	OpenconfigIsisTypesHelloPaddingType_OPENCONFIGISISTYPESHELLOPADDINGTYPE_STRICT   OpenconfigIsisTypesHelloPaddingType = 0
	OpenconfigIsisTypesHelloPaddingType_OPENCONFIGISISTYPESHELLOPADDINGTYPE_LOOSE    OpenconfigIsisTypesHelloPaddingType = 2
	OpenconfigIsisTypesHelloPaddingType_OPENCONFIGISISTYPESHELLOPADDINGTYPE_ADAPTIVE OpenconfigIsisTypesHelloPaddingType = 3
	OpenconfigIsisTypesHelloPaddingType_OPENCONFIGISISTYPESHELLOPADDINGTYPE_DISABLE  OpenconfigIsisTypesHelloPaddingType = 4
)

// Enum value maps for OpenconfigIsisTypesHelloPaddingType.
var (
	OpenconfigIsisTypesHelloPaddingType_name = map[int32]string{
		0: "OPENCONFIGISISTYPESHELLOPADDINGTYPE_STRICT",
		2: "OPENCONFIGISISTYPESHELLOPADDINGTYPE_LOOSE",
		3: "OPENCONFIGISISTYPESHELLOPADDINGTYPE_ADAPTIVE",
		4: "OPENCONFIGISISTYPESHELLOPADDINGTYPE_DISABLE",
	}
	OpenconfigIsisTypesHelloPaddingType_value = map[string]int32{
		"OPENCONFIGISISTYPESHELLOPADDINGTYPE_STRICT":   0,
		"OPENCONFIGISISTYPESHELLOPADDINGTYPE_LOOSE":    2,
		"OPENCONFIGISISTYPESHELLOPADDINGTYPE_ADAPTIVE": 3,
		"OPENCONFIGISISTYPESHELLOPADDINGTYPE_DISABLE":  4,
	}
)

func (x OpenconfigIsisTypesHelloPaddingType) Enum() *OpenconfigIsisTypesHelloPaddingType {
	p := new(OpenconfigIsisTypesHelloPaddingType)
	*p = x
	return p
}

func (x OpenconfigIsisTypesHelloPaddingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisTypesHelloPaddingType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[42].Descriptor()
}

func (OpenconfigIsisTypesHelloPaddingType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[42]
}

func (x OpenconfigIsisTypesHelloPaddingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisTypesHelloPaddingType.Descriptor instead.
func (OpenconfigIsisTypesHelloPaddingType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{42}
}

// OpenconfigIsisTypesIsisInterfaceAdjState represents an enumerated type generated for the YANG enumerated type isis-interface-adj-state.
type OpenconfigIsisTypesIsisInterfaceAdjState int32

const (
	OpenconfigIsisTypesIsisInterfaceAdjState_OPENCONFIGISISTYPESISISINTERFACEADJSTATE_UNSET  OpenconfigIsisTypesIsisInterfaceAdjState = 0
	OpenconfigIsisTypesIsisInterfaceAdjState_OPENCONFIGISISTYPESISISINTERFACEADJSTATE_UP     OpenconfigIsisTypesIsisInterfaceAdjState = 1
	OpenconfigIsisTypesIsisInterfaceAdjState_OPENCONFIGISISTYPESISISINTERFACEADJSTATE_DOWN   OpenconfigIsisTypesIsisInterfaceAdjState = 2
	OpenconfigIsisTypesIsisInterfaceAdjState_OPENCONFIGISISTYPESISISINTERFACEADJSTATE_INIT   OpenconfigIsisTypesIsisInterfaceAdjState = 3
	OpenconfigIsisTypesIsisInterfaceAdjState_OPENCONFIGISISTYPESISISINTERFACEADJSTATE_FAILED OpenconfigIsisTypesIsisInterfaceAdjState = 4
)

// Enum value maps for OpenconfigIsisTypesIsisInterfaceAdjState.
var (
	OpenconfigIsisTypesIsisInterfaceAdjState_name = map[int32]string{
		0: "OPENCONFIGISISTYPESISISINTERFACEADJSTATE_UNSET",
		1: "OPENCONFIGISISTYPESISISINTERFACEADJSTATE_UP",
		2: "OPENCONFIGISISTYPESISISINTERFACEADJSTATE_DOWN",
		3: "OPENCONFIGISISTYPESISISINTERFACEADJSTATE_INIT",
		4: "OPENCONFIGISISTYPESISISINTERFACEADJSTATE_FAILED",
	}
	OpenconfigIsisTypesIsisInterfaceAdjState_value = map[string]int32{
		"OPENCONFIGISISTYPESISISINTERFACEADJSTATE_UNSET":  0,
		"OPENCONFIGISISTYPESISISINTERFACEADJSTATE_UP":     1,
		"OPENCONFIGISISTYPESISISINTERFACEADJSTATE_DOWN":   2,
		"OPENCONFIGISISTYPESISISINTERFACEADJSTATE_INIT":   3,
		"OPENCONFIGISISTYPESISISINTERFACEADJSTATE_FAILED": 4,
	}
)

func (x OpenconfigIsisTypesIsisInterfaceAdjState) Enum() *OpenconfigIsisTypesIsisInterfaceAdjState {
	p := new(OpenconfigIsisTypesIsisInterfaceAdjState)
	*p = x
	return p
}

func (x OpenconfigIsisTypesIsisInterfaceAdjState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisTypesIsisInterfaceAdjState) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[43].Descriptor()
}

func (OpenconfigIsisTypesIsisInterfaceAdjState) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[43]
}

func (x OpenconfigIsisTypesIsisInterfaceAdjState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisTypesIsisInterfaceAdjState.Descriptor instead.
func (OpenconfigIsisTypesIsisInterfaceAdjState) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{43}
}

// OpenconfigIsisTypesLevelType represents an enumerated type generated for the YANG enumerated type level-type.
type OpenconfigIsisTypesLevelType int32

const (
	OpenconfigIsisTypesLevelType_OPENCONFIGISISTYPESLEVELTYPE_LEVEL_1_2 OpenconfigIsisTypesLevelType = 0
	OpenconfigIsisTypesLevelType_OPENCONFIGISISTYPESLEVELTYPE_LEVEL_1   OpenconfigIsisTypesLevelType = 1
	OpenconfigIsisTypesLevelType_OPENCONFIGISISTYPESLEVELTYPE_LEVEL_2   OpenconfigIsisTypesLevelType = 2
)

// Enum value maps for OpenconfigIsisTypesLevelType.
var (
	OpenconfigIsisTypesLevelType_name = map[int32]string{
		0: "OPENCONFIGISISTYPESLEVELTYPE_LEVEL_1_2",
		1: "OPENCONFIGISISTYPESLEVELTYPE_LEVEL_1",
		2: "OPENCONFIGISISTYPESLEVELTYPE_LEVEL_2",
	}
	OpenconfigIsisTypesLevelType_value = map[string]int32{
		"OPENCONFIGISISTYPESLEVELTYPE_LEVEL_1_2": 0,
		"OPENCONFIGISISTYPESLEVELTYPE_LEVEL_1":   1,
		"OPENCONFIGISISTYPESLEVELTYPE_LEVEL_2":   2,
	}
)

func (x OpenconfigIsisTypesLevelType) Enum() *OpenconfigIsisTypesLevelType {
	p := new(OpenconfigIsisTypesLevelType)
	*p = x
	return p
}

func (x OpenconfigIsisTypesLevelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisTypesLevelType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[44].Descriptor()
}

func (OpenconfigIsisTypesLevelType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[44]
}

func (x OpenconfigIsisTypesLevelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisTypesLevelType.Descriptor instead.
func (OpenconfigIsisTypesLevelType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{44}
}

// OpenconfigIsisTypesMetricStyle represents an enumerated type generated for the YANG enumerated type metric-style.
type OpenconfigIsisTypesMetricStyle int32

const (
	OpenconfigIsisTypesMetricStyle_OPENCONFIGISISTYPESMETRICSTYLE_UNSET         OpenconfigIsisTypesMetricStyle = 0
	OpenconfigIsisTypesMetricStyle_OPENCONFIGISISTYPESMETRICSTYLE_NARROW_METRIC OpenconfigIsisTypesMetricStyle = 1
	OpenconfigIsisTypesMetricStyle_OPENCONFIGISISTYPESMETRICSTYLE_WIDE_METRIC   OpenconfigIsisTypesMetricStyle = 2
)

// Enum value maps for OpenconfigIsisTypesMetricStyle.
var (
	OpenconfigIsisTypesMetricStyle_name = map[int32]string{
		0: "OPENCONFIGISISTYPESMETRICSTYLE_UNSET",
		1: "OPENCONFIGISISTYPESMETRICSTYLE_NARROW_METRIC",
		2: "OPENCONFIGISISTYPESMETRICSTYLE_WIDE_METRIC",
	}
	OpenconfigIsisTypesMetricStyle_value = map[string]int32{
		"OPENCONFIGISISTYPESMETRICSTYLE_UNSET":         0,
		"OPENCONFIGISISTYPESMETRICSTYLE_NARROW_METRIC": 1,
		"OPENCONFIGISISTYPESMETRICSTYLE_WIDE_METRIC":   2,
	}
)

func (x OpenconfigIsisTypesMetricStyle) Enum() *OpenconfigIsisTypesMetricStyle {
	p := new(OpenconfigIsisTypesMetricStyle)
	*p = x
	return p
}

func (x OpenconfigIsisTypesMetricStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisTypesMetricStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[45].Descriptor()
}

func (OpenconfigIsisTypesMetricStyle) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[45]
}

func (x OpenconfigIsisTypesMetricStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisTypesMetricStyle.Descriptor instead.
func (OpenconfigIsisTypesMetricStyle) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{45}
}

// OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE represents an enumerated type generated for the YANG identity OVERLOAD_RESET_TRIGGER_TYPE.
type OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE int32

const (
	OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE_OPENCONFIGISISTYPESOVERLOADRESETTRIGGERTYPE_UNSET           OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE = 0
	OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE_OPENCONFIGISISTYPESOVERLOADRESETTRIGGERTYPE_WAIT_FOR_SYSTEM OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE = 29067962
	OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE_OPENCONFIGISISTYPESOVERLOADRESETTRIGGERTYPE_WAIT_FOR_BGP    OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE = 495828064
)

// Enum value maps for OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE.
var (
	OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE_name = map[int32]string{
		0:         "OPENCONFIGISISTYPESOVERLOADRESETTRIGGERTYPE_UNSET",
		29067962:  "OPENCONFIGISISTYPESOVERLOADRESETTRIGGERTYPE_WAIT_FOR_SYSTEM",
		495828064: "OPENCONFIGISISTYPESOVERLOADRESETTRIGGERTYPE_WAIT_FOR_BGP",
	}
	OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE_value = map[string]int32{
		"OPENCONFIGISISTYPESOVERLOADRESETTRIGGERTYPE_UNSET":           0,
		"OPENCONFIGISISTYPESOVERLOADRESETTRIGGERTYPE_WAIT_FOR_SYSTEM": 29067962,
		"OPENCONFIGISISTYPESOVERLOADRESETTRIGGERTYPE_WAIT_FOR_BGP":    495828064,
	}
)

func (x OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE) Enum() *OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE {
	p := new(OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE)
	*p = x
	return p
}

func (x OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[46].Descriptor()
}

func (OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[46]
}

func (x OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE.Descriptor instead.
func (OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{46}
}

// OpenconfigIsisTypesSAFITYPE represents an enumerated type generated for the YANG identity SAFI_TYPE.
type OpenconfigIsisTypesSAFITYPE int32

const (
	OpenconfigIsisTypesSAFITYPE_OPENCONFIGISISTYPESSAFITYPE_UNSET     OpenconfigIsisTypesSAFITYPE = 0
	OpenconfigIsisTypesSAFITYPE_OPENCONFIGISISTYPESSAFITYPE_UNICAST   OpenconfigIsisTypesSAFITYPE = 82321848
	OpenconfigIsisTypesSAFITYPE_OPENCONFIGISISTYPESSAFITYPE_MULTICAST OpenconfigIsisTypesSAFITYPE = 276368649
)

// Enum value maps for OpenconfigIsisTypesSAFITYPE.
var (
	OpenconfigIsisTypesSAFITYPE_name = map[int32]string{
		0:         "OPENCONFIGISISTYPESSAFITYPE_UNSET",
		82321848:  "OPENCONFIGISISTYPESSAFITYPE_UNICAST",
		276368649: "OPENCONFIGISISTYPESSAFITYPE_MULTICAST",
	}
	OpenconfigIsisTypesSAFITYPE_value = map[string]int32{
		"OPENCONFIGISISTYPESSAFITYPE_UNSET":     0,
		"OPENCONFIGISISTYPESSAFITYPE_UNICAST":   82321848,
		"OPENCONFIGISISTYPESSAFITYPE_MULTICAST": 276368649,
	}
)

func (x OpenconfigIsisTypesSAFITYPE) Enum() *OpenconfigIsisTypesSAFITYPE {
	p := new(OpenconfigIsisTypesSAFITYPE)
	*p = x
	return p
}

func (x OpenconfigIsisTypesSAFITYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigIsisTypesSAFITYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[47].Descriptor()
}

func (OpenconfigIsisTypesSAFITYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[47]
}

func (x OpenconfigIsisTypesSAFITYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigIsisTypesSAFITYPE.Descriptor instead.
func (OpenconfigIsisTypesSAFITYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{47}
}

// OpenconfigKeychainTypesAUTHTYPE represents an enumerated type generated for the YANG identity AUTH_TYPE.
type OpenconfigKeychainTypesAUTHTYPE int32

const (
	OpenconfigKeychainTypesAUTHTYPE_OPENCONFIGKEYCHAINTYPESAUTHTYPE_UNSET      OpenconfigKeychainTypesAUTHTYPE = 0
	OpenconfigKeychainTypesAUTHTYPE_OPENCONFIGKEYCHAINTYPESAUTHTYPE_SIMPLE_KEY OpenconfigKeychainTypesAUTHTYPE = 264633724
	OpenconfigKeychainTypesAUTHTYPE_OPENCONFIGKEYCHAINTYPESAUTHTYPE_KEYCHAIN   OpenconfigKeychainTypesAUTHTYPE = 489433182
)

// Enum value maps for OpenconfigKeychainTypesAUTHTYPE.
var (
	OpenconfigKeychainTypesAUTHTYPE_name = map[int32]string{
		0:         "OPENCONFIGKEYCHAINTYPESAUTHTYPE_UNSET",
		264633724: "OPENCONFIGKEYCHAINTYPESAUTHTYPE_SIMPLE_KEY",
		489433182: "OPENCONFIGKEYCHAINTYPESAUTHTYPE_KEYCHAIN",
	}
	OpenconfigKeychainTypesAUTHTYPE_value = map[string]int32{
		"OPENCONFIGKEYCHAINTYPESAUTHTYPE_UNSET":      0,
		"OPENCONFIGKEYCHAINTYPESAUTHTYPE_SIMPLE_KEY": 264633724,
		"OPENCONFIGKEYCHAINTYPESAUTHTYPE_KEYCHAIN":   489433182,
	}
)

func (x OpenconfigKeychainTypesAUTHTYPE) Enum() *OpenconfigKeychainTypesAUTHTYPE {
	p := new(OpenconfigKeychainTypesAUTHTYPE)
	*p = x
	return p
}

func (x OpenconfigKeychainTypesAUTHTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigKeychainTypesAUTHTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[48].Descriptor()
}

func (OpenconfigKeychainTypesAUTHTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[48]
}

func (x OpenconfigKeychainTypesAUTHTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigKeychainTypesAUTHTYPE.Descriptor instead.
func (OpenconfigKeychainTypesAUTHTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{48}
}

// OpenconfigKeychainTypesCRYPTOTYPE represents an enumerated type generated for the YANG identity CRYPTO_TYPE.
type OpenconfigKeychainTypesCRYPTOTYPE int32

const (
	OpenconfigKeychainTypesCRYPTOTYPE_OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_UNSET          OpenconfigKeychainTypesCRYPTOTYPE = 0
	OpenconfigKeychainTypesCRYPTOTYPE_OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_SHA_1          OpenconfigKeychainTypesCRYPTOTYPE = 63458101
	OpenconfigKeychainTypesCRYPTOTYPE_OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_MD5            OpenconfigKeychainTypesCRYPTOTYPE = 83939735
	OpenconfigKeychainTypesCRYPTOTYPE_OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_HMAC_SHA_1     OpenconfigKeychainTypesCRYPTOTYPE = 128319763
	OpenconfigKeychainTypesCRYPTOTYPE_OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_HMAC_SHA_1_96  OpenconfigKeychainTypesCRYPTOTYPE = 133599319
	OpenconfigKeychainTypesCRYPTOTYPE_OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_HMAC_MD5       OpenconfigKeychainTypesCRYPTOTYPE = 373552525
	OpenconfigKeychainTypesCRYPTOTYPE_OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_HMAC_SHA_256   OpenconfigKeychainTypesCRYPTOTYPE = 381144041
	OpenconfigKeychainTypesCRYPTOTYPE_OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_HMAC_SHA_1_20  OpenconfigKeychainTypesCRYPTOTYPE = 485916448
	OpenconfigKeychainTypesCRYPTOTYPE_OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_AES_28_CMAC_96 OpenconfigKeychainTypesCRYPTOTYPE = 504049088
	OpenconfigKeychainTypesCRYPTOTYPE_OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_CRYPTO_NONE    OpenconfigKeychainTypesCRYPTOTYPE = 526619819
	OpenconfigKeychainTypesCRYPTOTYPE_OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_HMAC_SHA_1_12  OpenconfigKeychainTypesCRYPTOTYPE = 536249339
)

// Enum value maps for OpenconfigKeychainTypesCRYPTOTYPE.
var (
	OpenconfigKeychainTypesCRYPTOTYPE_name = map[int32]string{
		0:         "OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_UNSET",
		63458101:  "OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_SHA_1",
		83939735:  "OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_MD5",
		128319763: "OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_HMAC_SHA_1",
		133599319: "OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_HMAC_SHA_1_96",
		373552525: "OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_HMAC_MD5",
		381144041: "OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_HMAC_SHA_256",
		485916448: "OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_HMAC_SHA_1_20",
		504049088: "OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_AES_28_CMAC_96",
		526619819: "OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_CRYPTO_NONE",
		536249339: "OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_HMAC_SHA_1_12",
	}
	OpenconfigKeychainTypesCRYPTOTYPE_value = map[string]int32{
		"OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_UNSET":          0,
		"OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_SHA_1":          63458101,
		"OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_MD5":            83939735,
		"OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_HMAC_SHA_1":     128319763,
		"OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_HMAC_SHA_1_96":  133599319,
		"OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_HMAC_MD5":       373552525,
		"OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_HMAC_SHA_256":   381144041,
		"OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_HMAC_SHA_1_20":  485916448,
		"OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_AES_28_CMAC_96": 504049088,
		"OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_CRYPTO_NONE":    526619819,
		"OPENCONFIGKEYCHAINTYPESCRYPTOTYPE_HMAC_SHA_1_12":  536249339,
	}
)

func (x OpenconfigKeychainTypesCRYPTOTYPE) Enum() *OpenconfigKeychainTypesCRYPTOTYPE {
	p := new(OpenconfigKeychainTypesCRYPTOTYPE)
	*p = x
	return p
}

func (x OpenconfigKeychainTypesCRYPTOTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigKeychainTypesCRYPTOTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[49].Descriptor()
}

func (OpenconfigKeychainTypesCRYPTOTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[49]
}

func (x OpenconfigKeychainTypesCRYPTOTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigKeychainTypesCRYPTOTYPE.Descriptor instead.
func (OpenconfigKeychainTypesCRYPTOTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{49}
}

// OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP represents an enumerated type generated for the YANG identity LOCAL_DEFINED_NEXT_HOP.
type OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP int32

const (
	OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP_OPENCONFIGLOCALROUTINGLOCALDEFINEDNEXTHOP_UNSET      OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP = 0
	OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP_OPENCONFIGLOCALROUTINGLOCALDEFINEDNEXTHOP_LOCAL_LINK OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP = 335034920
	OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP_OPENCONFIGLOCALROUTINGLOCALDEFINEDNEXTHOP_DROP       OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP = 485660995
)

// Enum value maps for OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP.
var (
	OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP_name = map[int32]string{
		0:         "OPENCONFIGLOCALROUTINGLOCALDEFINEDNEXTHOP_UNSET",
		335034920: "OPENCONFIGLOCALROUTINGLOCALDEFINEDNEXTHOP_LOCAL_LINK",
		485660995: "OPENCONFIGLOCALROUTINGLOCALDEFINEDNEXTHOP_DROP",
	}
	OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP_value = map[string]int32{
		"OPENCONFIGLOCALROUTINGLOCALDEFINEDNEXTHOP_UNSET":      0,
		"OPENCONFIGLOCALROUTINGLOCALDEFINEDNEXTHOP_LOCAL_LINK": 335034920,
		"OPENCONFIGLOCALROUTINGLOCALDEFINEDNEXTHOP_DROP":       485660995,
	}
)

func (x OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP) Enum() *OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP {
	p := new(OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP)
	*p = x
	return p
}

func (x OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[50].Descriptor()
}

func (OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[50]
}

func (x OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP.Descriptor instead.
func (OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{50}
}

// OpenconfigMessagesDEBUGSERVICE represents an enumerated type generated for the YANG identity DEBUG_SERVICE.
type OpenconfigMessagesDEBUGSERVICE int32

const (
	OpenconfigMessagesDEBUGSERVICE_OPENCONFIGMESSAGESDEBUGSERVICE_UNSET OpenconfigMessagesDEBUGSERVICE = 0
)

// Enum value maps for OpenconfigMessagesDEBUGSERVICE.
var (
	OpenconfigMessagesDEBUGSERVICE_name = map[int32]string{
		0: "OPENCONFIGMESSAGESDEBUGSERVICE_UNSET",
	}
	OpenconfigMessagesDEBUGSERVICE_value = map[string]int32{
		"OPENCONFIGMESSAGESDEBUGSERVICE_UNSET": 0,
	}
)

func (x OpenconfigMessagesDEBUGSERVICE) Enum() *OpenconfigMessagesDEBUGSERVICE {
	p := new(OpenconfigMessagesDEBUGSERVICE)
	*p = x
	return p
}

func (x OpenconfigMessagesDEBUGSERVICE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMessagesDEBUGSERVICE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[51].Descriptor()
}

func (OpenconfigMessagesDEBUGSERVICE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[51]
}

func (x OpenconfigMessagesDEBUGSERVICE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMessagesDEBUGSERVICE.Descriptor instead.
func (OpenconfigMessagesDEBUGSERVICE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{51}
}

// OpenconfigMplsCspfTieBreaking represents an enumerated type generated for the YANG enumerated type cspf-tie-breaking.
type OpenconfigMplsCspfTieBreaking int32

const (
	OpenconfigMplsCspfTieBreaking_OPENCONFIGMPLSCSPFTIEBREAKING_RANDOM     OpenconfigMplsCspfTieBreaking = 0
	OpenconfigMplsCspfTieBreaking_OPENCONFIGMPLSCSPFTIEBREAKING_LEAST_FILL OpenconfigMplsCspfTieBreaking = 2
	OpenconfigMplsCspfTieBreaking_OPENCONFIGMPLSCSPFTIEBREAKING_MOST_FILL  OpenconfigMplsCspfTieBreaking = 3
)

// Enum value maps for OpenconfigMplsCspfTieBreaking.
var (
	OpenconfigMplsCspfTieBreaking_name = map[int32]string{
		0: "OPENCONFIGMPLSCSPFTIEBREAKING_RANDOM",
		2: "OPENCONFIGMPLSCSPFTIEBREAKING_LEAST_FILL",
		3: "OPENCONFIGMPLSCSPFTIEBREAKING_MOST_FILL",
	}
	OpenconfigMplsCspfTieBreaking_value = map[string]int32{
		"OPENCONFIGMPLSCSPFTIEBREAKING_RANDOM":     0,
		"OPENCONFIGMPLSCSPFTIEBREAKING_LEAST_FILL": 2,
		"OPENCONFIGMPLSCSPFTIEBREAKING_MOST_FILL":  3,
	}
)

func (x OpenconfigMplsCspfTieBreaking) Enum() *OpenconfigMplsCspfTieBreaking {
	p := new(OpenconfigMplsCspfTieBreaking)
	*p = x
	return p
}

func (x OpenconfigMplsCspfTieBreaking) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsCspfTieBreaking) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[52].Descriptor()
}

func (OpenconfigMplsCspfTieBreaking) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[52]
}

func (x OpenconfigMplsCspfTieBreaking) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsCspfTieBreaking.Descriptor instead.
func (OpenconfigMplsCspfTieBreaking) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{52}
}

// OpenconfigMplsLdpLabelAdvertisementMode represents an enumerated type generated for the YANG enumerated type label-advertisement-mode.
type OpenconfigMplsLdpLabelAdvertisementMode int32

const (
	OpenconfigMplsLdpLabelAdvertisementMode_OPENCONFIGMPLSLDPLABELADVERTISEMENTMODE_UNSET                  OpenconfigMplsLdpLabelAdvertisementMode = 0
	OpenconfigMplsLdpLabelAdvertisementMode_OPENCONFIGMPLSLDPLABELADVERTISEMENTMODE_DOWNSTREAM_UNSOLICITED OpenconfigMplsLdpLabelAdvertisementMode = 1
	OpenconfigMplsLdpLabelAdvertisementMode_OPENCONFIGMPLSLDPLABELADVERTISEMENTMODE_DOWNSTREAM_ON_DEMAND   OpenconfigMplsLdpLabelAdvertisementMode = 2
)

// Enum value maps for OpenconfigMplsLdpLabelAdvertisementMode.
var (
	OpenconfigMplsLdpLabelAdvertisementMode_name = map[int32]string{
		0: "OPENCONFIGMPLSLDPLABELADVERTISEMENTMODE_UNSET",
		1: "OPENCONFIGMPLSLDPLABELADVERTISEMENTMODE_DOWNSTREAM_UNSOLICITED",
		2: "OPENCONFIGMPLSLDPLABELADVERTISEMENTMODE_DOWNSTREAM_ON_DEMAND",
	}
	OpenconfigMplsLdpLabelAdvertisementMode_value = map[string]int32{
		"OPENCONFIGMPLSLDPLABELADVERTISEMENTMODE_UNSET":                  0,
		"OPENCONFIGMPLSLDPLABELADVERTISEMENTMODE_DOWNSTREAM_UNSOLICITED": 1,
		"OPENCONFIGMPLSLDPLABELADVERTISEMENTMODE_DOWNSTREAM_ON_DEMAND":   2,
	}
)

func (x OpenconfigMplsLdpLabelAdvertisementMode) Enum() *OpenconfigMplsLdpLabelAdvertisementMode {
	p := new(OpenconfigMplsLdpLabelAdvertisementMode)
	*p = x
	return p
}

func (x OpenconfigMplsLdpLabelAdvertisementMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsLdpLabelAdvertisementMode) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[53].Descriptor()
}

func (OpenconfigMplsLdpLabelAdvertisementMode) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[53]
}

func (x OpenconfigMplsLdpLabelAdvertisementMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsLdpLabelAdvertisementMode.Descriptor instead.
func (OpenconfigMplsLdpLabelAdvertisementMode) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{53}
}

// OpenconfigMplsLdpMplsLdpAdjacencyType represents an enumerated type generated for the YANG enumerated type mpls-ldp-adjacency-type.
type OpenconfigMplsLdpMplsLdpAdjacencyType int32

const (
	OpenconfigMplsLdpMplsLdpAdjacencyType_OPENCONFIGMPLSLDPMPLSLDPADJACENCYTYPE_UNSET    OpenconfigMplsLdpMplsLdpAdjacencyType = 0
	OpenconfigMplsLdpMplsLdpAdjacencyType_OPENCONFIGMPLSLDPMPLSLDPADJACENCYTYPE_LINK     OpenconfigMplsLdpMplsLdpAdjacencyType = 1
	OpenconfigMplsLdpMplsLdpAdjacencyType_OPENCONFIGMPLSLDPMPLSLDPADJACENCYTYPE_TARGETED OpenconfigMplsLdpMplsLdpAdjacencyType = 2
)

// Enum value maps for OpenconfigMplsLdpMplsLdpAdjacencyType.
var (
	OpenconfigMplsLdpMplsLdpAdjacencyType_name = map[int32]string{
		0: "OPENCONFIGMPLSLDPMPLSLDPADJACENCYTYPE_UNSET",
		1: "OPENCONFIGMPLSLDPMPLSLDPADJACENCYTYPE_LINK",
		2: "OPENCONFIGMPLSLDPMPLSLDPADJACENCYTYPE_TARGETED",
	}
	OpenconfigMplsLdpMplsLdpAdjacencyType_value = map[string]int32{
		"OPENCONFIGMPLSLDPMPLSLDPADJACENCYTYPE_UNSET":    0,
		"OPENCONFIGMPLSLDPMPLSLDPADJACENCYTYPE_LINK":     1,
		"OPENCONFIGMPLSLDPMPLSLDPADJACENCYTYPE_TARGETED": 2,
	}
)

func (x OpenconfigMplsLdpMplsLdpAdjacencyType) Enum() *OpenconfigMplsLdpMplsLdpAdjacencyType {
	p := new(OpenconfigMplsLdpMplsLdpAdjacencyType)
	*p = x
	return p
}

func (x OpenconfigMplsLdpMplsLdpAdjacencyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsLdpMplsLdpAdjacencyType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[54].Descriptor()
}

func (OpenconfigMplsLdpMplsLdpAdjacencyType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[54]
}

func (x OpenconfigMplsLdpMplsLdpAdjacencyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsLdpMplsLdpAdjacencyType.Descriptor instead.
func (OpenconfigMplsLdpMplsLdpAdjacencyType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{54}
}

// OpenconfigMplsLdpMplsLdpAfi represents an enumerated type generated for the YANG enumerated type mpls-ldp-afi.
type OpenconfigMplsLdpMplsLdpAfi int32

const (
	OpenconfigMplsLdpMplsLdpAfi_OPENCONFIGMPLSLDPMPLSLDPAFI_UNSET OpenconfigMplsLdpMplsLdpAfi = 0
	OpenconfigMplsLdpMplsLdpAfi_OPENCONFIGMPLSLDPMPLSLDPAFI_IPV4  OpenconfigMplsLdpMplsLdpAfi = 1
	OpenconfigMplsLdpMplsLdpAfi_OPENCONFIGMPLSLDPMPLSLDPAFI_IPV6  OpenconfigMplsLdpMplsLdpAfi = 2
)

// Enum value maps for OpenconfigMplsLdpMplsLdpAfi.
var (
	OpenconfigMplsLdpMplsLdpAfi_name = map[int32]string{
		0: "OPENCONFIGMPLSLDPMPLSLDPAFI_UNSET",
		1: "OPENCONFIGMPLSLDPMPLSLDPAFI_IPV4",
		2: "OPENCONFIGMPLSLDPMPLSLDPAFI_IPV6",
	}
	OpenconfigMplsLdpMplsLdpAfi_value = map[string]int32{
		"OPENCONFIGMPLSLDPMPLSLDPAFI_UNSET": 0,
		"OPENCONFIGMPLSLDPMPLSLDPAFI_IPV4":  1,
		"OPENCONFIGMPLSLDPMPLSLDPAFI_IPV6":  2,
	}
)

func (x OpenconfigMplsLdpMplsLdpAfi) Enum() *OpenconfigMplsLdpMplsLdpAfi {
	p := new(OpenconfigMplsLdpMplsLdpAfi)
	*p = x
	return p
}

func (x OpenconfigMplsLdpMplsLdpAfi) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsLdpMplsLdpAfi) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[55].Descriptor()
}

func (OpenconfigMplsLdpMplsLdpAfi) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[55]
}

func (x OpenconfigMplsLdpMplsLdpAfi) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsLdpMplsLdpAfi.Descriptor instead.
func (OpenconfigMplsLdpMplsLdpAfi) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{55}
}

// OpenconfigMplsMplsHopType represents an enumerated type generated for the YANG enumerated type mpls-hop-type.
type OpenconfigMplsMplsHopType int32

const (
	OpenconfigMplsMplsHopType_OPENCONFIGMPLSMPLSHOPTYPE_UNSET  OpenconfigMplsMplsHopType = 0
	OpenconfigMplsMplsHopType_OPENCONFIGMPLSMPLSHOPTYPE_LOOSE  OpenconfigMplsMplsHopType = 1
	OpenconfigMplsMplsHopType_OPENCONFIGMPLSMPLSHOPTYPE_STRICT OpenconfigMplsMplsHopType = 2
)

// Enum value maps for OpenconfigMplsMplsHopType.
var (
	OpenconfigMplsMplsHopType_name = map[int32]string{
		0: "OPENCONFIGMPLSMPLSHOPTYPE_UNSET",
		1: "OPENCONFIGMPLSMPLSHOPTYPE_LOOSE",
		2: "OPENCONFIGMPLSMPLSHOPTYPE_STRICT",
	}
	OpenconfigMplsMplsHopType_value = map[string]int32{
		"OPENCONFIGMPLSMPLSHOPTYPE_UNSET":  0,
		"OPENCONFIGMPLSMPLSHOPTYPE_LOOSE":  1,
		"OPENCONFIGMPLSMPLSHOPTYPE_STRICT": 2,
	}
)

func (x OpenconfigMplsMplsHopType) Enum() *OpenconfigMplsMplsHopType {
	p := new(OpenconfigMplsMplsHopType)
	*p = x
	return p
}

func (x OpenconfigMplsMplsHopType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsMplsHopType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[56].Descriptor()
}

func (OpenconfigMplsMplsHopType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[56]
}

func (x OpenconfigMplsMplsHopType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsMplsHopType.Descriptor instead.
func (OpenconfigMplsMplsHopType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{56}
}

// OpenconfigMplsMplsSrlgFloodingType represents an enumerated type generated for the YANG enumerated type mpls-srlg-flooding-type.
type OpenconfigMplsMplsSrlgFloodingType int32

const (
	OpenconfigMplsMplsSrlgFloodingType_OPENCONFIGMPLSMPLSSRLGFLOODINGTYPE_FLOODED_SRLG OpenconfigMplsMplsSrlgFloodingType = 0
	OpenconfigMplsMplsSrlgFloodingType_OPENCONFIGMPLSMPLSSRLGFLOODINGTYPE_STATIC_SRLG  OpenconfigMplsMplsSrlgFloodingType = 2
)

// Enum value maps for OpenconfigMplsMplsSrlgFloodingType.
var (
	OpenconfigMplsMplsSrlgFloodingType_name = map[int32]string{
		0: "OPENCONFIGMPLSMPLSSRLGFLOODINGTYPE_FLOODED_SRLG",
		2: "OPENCONFIGMPLSMPLSSRLGFLOODINGTYPE_STATIC_SRLG",
	}
	OpenconfigMplsMplsSrlgFloodingType_value = map[string]int32{
		"OPENCONFIGMPLSMPLSSRLGFLOODINGTYPE_FLOODED_SRLG": 0,
		"OPENCONFIGMPLSMPLSSRLGFLOODINGTYPE_STATIC_SRLG":  2,
	}
)

func (x OpenconfigMplsMplsSrlgFloodingType) Enum() *OpenconfigMplsMplsSrlgFloodingType {
	p := new(OpenconfigMplsMplsSrlgFloodingType)
	*p = x
	return p
}

func (x OpenconfigMplsMplsSrlgFloodingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsMplsSrlgFloodingType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[57].Descriptor()
}

func (OpenconfigMplsMplsSrlgFloodingType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[57]
}

func (x OpenconfigMplsMplsSrlgFloodingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsMplsSrlgFloodingType.Descriptor instead.
func (OpenconfigMplsMplsSrlgFloodingType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{57}
}

// OpenconfigMplsTeBandwidthType represents an enumerated type generated for the YANG enumerated type te-bandwidth-type.
type OpenconfigMplsTeBandwidthType int32

const (
	OpenconfigMplsTeBandwidthType_OPENCONFIGMPLSTEBANDWIDTHTYPE_SPECIFIED OpenconfigMplsTeBandwidthType = 0
	OpenconfigMplsTeBandwidthType_OPENCONFIGMPLSTEBANDWIDTHTYPE_AUTO      OpenconfigMplsTeBandwidthType = 2
)

// Enum value maps for OpenconfigMplsTeBandwidthType.
var (
	OpenconfigMplsTeBandwidthType_name = map[int32]string{
		0: "OPENCONFIGMPLSTEBANDWIDTHTYPE_SPECIFIED",
		2: "OPENCONFIGMPLSTEBANDWIDTHTYPE_AUTO",
	}
	OpenconfigMplsTeBandwidthType_value = map[string]int32{
		"OPENCONFIGMPLSTEBANDWIDTHTYPE_SPECIFIED": 0,
		"OPENCONFIGMPLSTEBANDWIDTHTYPE_AUTO":      2,
	}
)

func (x OpenconfigMplsTeBandwidthType) Enum() *OpenconfigMplsTeBandwidthType {
	p := new(OpenconfigMplsTeBandwidthType)
	*p = x
	return p
}

func (x OpenconfigMplsTeBandwidthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTeBandwidthType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[58].Descriptor()
}

func (OpenconfigMplsTeBandwidthType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[58]
}

func (x OpenconfigMplsTeBandwidthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTeBandwidthType.Descriptor instead.
func (OpenconfigMplsTeBandwidthType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{58}
}

// OpenconfigMplsTypesLSPMETRICTYPE represents an enumerated type generated for the YANG identity LSP_METRIC_TYPE.
type OpenconfigMplsTypesLSPMETRICTYPE int32

const (
	OpenconfigMplsTypesLSPMETRICTYPE_OPENCONFIGMPLSTYPESLSPMETRICTYPE_UNSET                OpenconfigMplsTypesLSPMETRICTYPE = 0
	OpenconfigMplsTypesLSPMETRICTYPE_OPENCONFIGMPLSTYPESLSPMETRICTYPE_LSP_METRIC_INHERITED OpenconfigMplsTypesLSPMETRICTYPE = 114379355
	OpenconfigMplsTypesLSPMETRICTYPE_OPENCONFIGMPLSTYPESLSPMETRICTYPE_LSP_METRIC_ABSOLUTE  OpenconfigMplsTypesLSPMETRICTYPE = 239349140
	OpenconfigMplsTypesLSPMETRICTYPE_OPENCONFIGMPLSTYPESLSPMETRICTYPE_LSP_METRIC_RELATIVE  OpenconfigMplsTypesLSPMETRICTYPE = 414552655
)

// Enum value maps for OpenconfigMplsTypesLSPMETRICTYPE.
var (
	OpenconfigMplsTypesLSPMETRICTYPE_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESLSPMETRICTYPE_UNSET",
		114379355: "OPENCONFIGMPLSTYPESLSPMETRICTYPE_LSP_METRIC_INHERITED",
		239349140: "OPENCONFIGMPLSTYPESLSPMETRICTYPE_LSP_METRIC_ABSOLUTE",
		414552655: "OPENCONFIGMPLSTYPESLSPMETRICTYPE_LSP_METRIC_RELATIVE",
	}
	OpenconfigMplsTypesLSPMETRICTYPE_value = map[string]int32{
		"OPENCONFIGMPLSTYPESLSPMETRICTYPE_UNSET":                0,
		"OPENCONFIGMPLSTYPESLSPMETRICTYPE_LSP_METRIC_INHERITED": 114379355,
		"OPENCONFIGMPLSTYPESLSPMETRICTYPE_LSP_METRIC_ABSOLUTE":  239349140,
		"OPENCONFIGMPLSTYPESLSPMETRICTYPE_LSP_METRIC_RELATIVE":  414552655,
	}
)

func (x OpenconfigMplsTypesLSPMETRICTYPE) Enum() *OpenconfigMplsTypesLSPMETRICTYPE {
	p := new(OpenconfigMplsTypesLSPMETRICTYPE)
	*p = x
	return p
}

func (x OpenconfigMplsTypesLSPMETRICTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesLSPMETRICTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[59].Descriptor()
}

func (OpenconfigMplsTypesLSPMETRICTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[59]
}

func (x OpenconfigMplsTypesLSPMETRICTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesLSPMETRICTYPE.Descriptor instead.
func (OpenconfigMplsTypesLSPMETRICTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{59}
}

// OpenconfigMplsTypesLSPOPERSTATUS represents an enumerated type generated for the YANG identity LSP_OPER_STATUS.
type OpenconfigMplsTypesLSPOPERSTATUS int32

const (
	OpenconfigMplsTypesLSPOPERSTATUS_OPENCONFIGMPLSTYPESLSPOPERSTATUS_UNSET OpenconfigMplsTypesLSPOPERSTATUS = 0
	OpenconfigMplsTypesLSPOPERSTATUS_OPENCONFIGMPLSTYPESLSPOPERSTATUS_UP    OpenconfigMplsTypesLSPOPERSTATUS = 264074669
	OpenconfigMplsTypesLSPOPERSTATUS_OPENCONFIGMPLSTYPESLSPOPERSTATUS_DOWN  OpenconfigMplsTypesLSPOPERSTATUS = 335566726
)

// Enum value maps for OpenconfigMplsTypesLSPOPERSTATUS.
var (
	OpenconfigMplsTypesLSPOPERSTATUS_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESLSPOPERSTATUS_UNSET",
		264074669: "OPENCONFIGMPLSTYPESLSPOPERSTATUS_UP",
		335566726: "OPENCONFIGMPLSTYPESLSPOPERSTATUS_DOWN",
	}
	OpenconfigMplsTypesLSPOPERSTATUS_value = map[string]int32{
		"OPENCONFIGMPLSTYPESLSPOPERSTATUS_UNSET": 0,
		"OPENCONFIGMPLSTYPESLSPOPERSTATUS_UP":    264074669,
		"OPENCONFIGMPLSTYPESLSPOPERSTATUS_DOWN":  335566726,
	}
)

func (x OpenconfigMplsTypesLSPOPERSTATUS) Enum() *OpenconfigMplsTypesLSPOPERSTATUS {
	p := new(OpenconfigMplsTypesLSPOPERSTATUS)
	*p = x
	return p
}

func (x OpenconfigMplsTypesLSPOPERSTATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesLSPOPERSTATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[60].Descriptor()
}

func (OpenconfigMplsTypesLSPOPERSTATUS) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[60]
}

func (x OpenconfigMplsTypesLSPOPERSTATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesLSPOPERSTATUS.Descriptor instead.
func (OpenconfigMplsTypesLSPOPERSTATUS) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{60}
}

// OpenconfigMplsTypesLSPROLE represents an enumerated type generated for the YANG identity LSP_ROLE.
type OpenconfigMplsTypesLSPROLE int32

const (
	OpenconfigMplsTypesLSPROLE_OPENCONFIGMPLSTYPESLSPROLE_UNSET   OpenconfigMplsTypesLSPROLE = 0
	OpenconfigMplsTypesLSPROLE_OPENCONFIGMPLSTYPESLSPROLE_TRANSIT OpenconfigMplsTypesLSPROLE = 221541038
	OpenconfigMplsTypesLSPROLE_OPENCONFIGMPLSTYPESLSPROLE_INGRESS OpenconfigMplsTypesLSPROLE = 336963778
	OpenconfigMplsTypesLSPROLE_OPENCONFIGMPLSTYPESLSPROLE_EGRESS  OpenconfigMplsTypesLSPROLE = 375604564
)

// Enum value maps for OpenconfigMplsTypesLSPROLE.
var (
	OpenconfigMplsTypesLSPROLE_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESLSPROLE_UNSET",
		221541038: "OPENCONFIGMPLSTYPESLSPROLE_TRANSIT",
		336963778: "OPENCONFIGMPLSTYPESLSPROLE_INGRESS",
		375604564: "OPENCONFIGMPLSTYPESLSPROLE_EGRESS",
	}
	OpenconfigMplsTypesLSPROLE_value = map[string]int32{
		"OPENCONFIGMPLSTYPESLSPROLE_UNSET":   0,
		"OPENCONFIGMPLSTYPESLSPROLE_TRANSIT": 221541038,
		"OPENCONFIGMPLSTYPESLSPROLE_INGRESS": 336963778,
		"OPENCONFIGMPLSTYPESLSPROLE_EGRESS":  375604564,
	}
)

func (x OpenconfigMplsTypesLSPROLE) Enum() *OpenconfigMplsTypesLSPROLE {
	p := new(OpenconfigMplsTypesLSPROLE)
	*p = x
	return p
}

func (x OpenconfigMplsTypesLSPROLE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesLSPROLE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[61].Descriptor()
}

func (OpenconfigMplsTypesLSPROLE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[61]
}

func (x OpenconfigMplsTypesLSPROLE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesLSPROLE.Descriptor instead.
func (OpenconfigMplsTypesLSPROLE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{61}
}

// OpenconfigMplsTypesMplsLabelEnum represents an enumerated type generated for the YANG enumerated type mpls-label.
type OpenconfigMplsTypesMplsLabelEnum int32

const (
	OpenconfigMplsTypesMplsLabelEnum_OPENCONFIGMPLSTYPESMPLSLABELENUM_UNSET                   OpenconfigMplsTypesMplsLabelEnum = 0
	OpenconfigMplsTypesMplsLabelEnum_OPENCONFIGMPLSTYPESMPLSLABELENUM_IPV4_EXPLICIT_NULL      OpenconfigMplsTypesMplsLabelEnum = 1
	OpenconfigMplsTypesMplsLabelEnum_OPENCONFIGMPLSTYPESMPLSLABELENUM_ROUTER_ALERT            OpenconfigMplsTypesMplsLabelEnum = 2
	OpenconfigMplsTypesMplsLabelEnum_OPENCONFIGMPLSTYPESMPLSLABELENUM_IPV6_EXPLICIT_NULL      OpenconfigMplsTypesMplsLabelEnum = 3
	OpenconfigMplsTypesMplsLabelEnum_OPENCONFIGMPLSTYPESMPLSLABELENUM_IMPLICIT_NULL           OpenconfigMplsTypesMplsLabelEnum = 4
	OpenconfigMplsTypesMplsLabelEnum_OPENCONFIGMPLSTYPESMPLSLABELENUM_ENTROPY_LABEL_INDICATOR OpenconfigMplsTypesMplsLabelEnum = 8
	OpenconfigMplsTypesMplsLabelEnum_OPENCONFIGMPLSTYPESMPLSLABELENUM_NO_LABEL                OpenconfigMplsTypesMplsLabelEnum = 9
)

// Enum value maps for OpenconfigMplsTypesMplsLabelEnum.
var (
	OpenconfigMplsTypesMplsLabelEnum_name = map[int32]string{
		0: "OPENCONFIGMPLSTYPESMPLSLABELENUM_UNSET",
		1: "OPENCONFIGMPLSTYPESMPLSLABELENUM_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGMPLSTYPESMPLSLABELENUM_ROUTER_ALERT",
		3: "OPENCONFIGMPLSTYPESMPLSLABELENUM_IPV6_EXPLICIT_NULL",
		4: "OPENCONFIGMPLSTYPESMPLSLABELENUM_IMPLICIT_NULL",
		8: "OPENCONFIGMPLSTYPESMPLSLABELENUM_ENTROPY_LABEL_INDICATOR",
		9: "OPENCONFIGMPLSTYPESMPLSLABELENUM_NO_LABEL",
	}
	OpenconfigMplsTypesMplsLabelEnum_value = map[string]int32{
		"OPENCONFIGMPLSTYPESMPLSLABELENUM_UNSET":                   0,
		"OPENCONFIGMPLSTYPESMPLSLABELENUM_IPV4_EXPLICIT_NULL":      1,
		"OPENCONFIGMPLSTYPESMPLSLABELENUM_ROUTER_ALERT":            2,
		"OPENCONFIGMPLSTYPESMPLSLABELENUM_IPV6_EXPLICIT_NULL":      3,
		"OPENCONFIGMPLSTYPESMPLSLABELENUM_IMPLICIT_NULL":           4,
		"OPENCONFIGMPLSTYPESMPLSLABELENUM_ENTROPY_LABEL_INDICATOR": 8,
		"OPENCONFIGMPLSTYPESMPLSLABELENUM_NO_LABEL":                9,
	}
)

func (x OpenconfigMplsTypesMplsLabelEnum) Enum() *OpenconfigMplsTypesMplsLabelEnum {
	p := new(OpenconfigMplsTypesMplsLabelEnum)
	*p = x
	return p
}

func (x OpenconfigMplsTypesMplsLabelEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesMplsLabelEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[62].Descriptor()
}

func (OpenconfigMplsTypesMplsLabelEnum) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[62]
}

func (x OpenconfigMplsTypesMplsLabelEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesMplsLabelEnum.Descriptor instead.
func (OpenconfigMplsTypesMplsLabelEnum) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{62}
}

// OpenconfigMplsTypesNULLLABELTYPE represents an enumerated type generated for the YANG identity NULL_LABEL_TYPE.
type OpenconfigMplsTypesNULLLABELTYPE int32

const (
	OpenconfigMplsTypesNULLLABELTYPE_OPENCONFIGMPLSTYPESNULLLABELTYPE_UNSET    OpenconfigMplsTypesNULLLABELTYPE = 0
	OpenconfigMplsTypesNULLLABELTYPE_OPENCONFIGMPLSTYPESNULLLABELTYPE_IMPLICIT OpenconfigMplsTypesNULLLABELTYPE = 26700381
	OpenconfigMplsTypesNULLLABELTYPE_OPENCONFIGMPLSTYPESNULLLABELTYPE_EXPLICIT OpenconfigMplsTypesNULLLABELTYPE = 440297628
)

// Enum value maps for OpenconfigMplsTypesNULLLABELTYPE.
var (
	OpenconfigMplsTypesNULLLABELTYPE_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESNULLLABELTYPE_UNSET",
		26700381:  "OPENCONFIGMPLSTYPESNULLLABELTYPE_IMPLICIT",
		440297628: "OPENCONFIGMPLSTYPESNULLLABELTYPE_EXPLICIT",
	}
	OpenconfigMplsTypesNULLLABELTYPE_value = map[string]int32{
		"OPENCONFIGMPLSTYPESNULLLABELTYPE_UNSET":    0,
		"OPENCONFIGMPLSTYPESNULLLABELTYPE_IMPLICIT": 26700381,
		"OPENCONFIGMPLSTYPESNULLLABELTYPE_EXPLICIT": 440297628,
	}
)

func (x OpenconfigMplsTypesNULLLABELTYPE) Enum() *OpenconfigMplsTypesNULLLABELTYPE {
	p := new(OpenconfigMplsTypesNULLLABELTYPE)
	*p = x
	return p
}

func (x OpenconfigMplsTypesNULLLABELTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesNULLLABELTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[63].Descriptor()
}

func (OpenconfigMplsTypesNULLLABELTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[63]
}

func (x OpenconfigMplsTypesNULLLABELTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesNULLLABELTYPE.Descriptor instead.
func (OpenconfigMplsTypesNULLLABELTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{63}
}

// OpenconfigMplsTypesPATHCOMPUTATIONMETHOD represents an enumerated type generated for the YANG identity PATH_COMPUTATION_METHOD.
type OpenconfigMplsTypesPATHCOMPUTATIONMETHOD int32

const (
	OpenconfigMplsTypesPATHCOMPUTATIONMETHOD_OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_UNSET              OpenconfigMplsTypesPATHCOMPUTATIONMETHOD = 0
	OpenconfigMplsTypesPATHCOMPUTATIONMETHOD_OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_EXTERNALLY_QUERIED OpenconfigMplsTypesPATHCOMPUTATIONMETHOD = 417421502
	OpenconfigMplsTypesPATHCOMPUTATIONMETHOD_OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_EXPLICITLY_DEFINED OpenconfigMplsTypesPATHCOMPUTATIONMETHOD = 423111651
	OpenconfigMplsTypesPATHCOMPUTATIONMETHOD_OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_LOCALLY_COMPUTED   OpenconfigMplsTypesPATHCOMPUTATIONMETHOD = 445762314
)

// Enum value maps for OpenconfigMplsTypesPATHCOMPUTATIONMETHOD.
var (
	OpenconfigMplsTypesPATHCOMPUTATIONMETHOD_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_UNSET",
		417421502: "OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_EXTERNALLY_QUERIED",
		423111651: "OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_EXPLICITLY_DEFINED",
		445762314: "OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_LOCALLY_COMPUTED",
	}
	OpenconfigMplsTypesPATHCOMPUTATIONMETHOD_value = map[string]int32{
		"OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_UNSET":              0,
		"OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_EXTERNALLY_QUERIED": 417421502,
		"OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_EXPLICITLY_DEFINED": 423111651,
		"OPENCONFIGMPLSTYPESPATHCOMPUTATIONMETHOD_LOCALLY_COMPUTED":   445762314,
	}
)

func (x OpenconfigMplsTypesPATHCOMPUTATIONMETHOD) Enum() *OpenconfigMplsTypesPATHCOMPUTATIONMETHOD {
	p := new(OpenconfigMplsTypesPATHCOMPUTATIONMETHOD)
	*p = x
	return p
}

func (x OpenconfigMplsTypesPATHCOMPUTATIONMETHOD) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesPATHCOMPUTATIONMETHOD) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[64].Descriptor()
}

func (OpenconfigMplsTypesPATHCOMPUTATIONMETHOD) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[64]
}

func (x OpenconfigMplsTypesPATHCOMPUTATIONMETHOD) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesPATHCOMPUTATIONMETHOD.Descriptor instead.
func (OpenconfigMplsTypesPATHCOMPUTATIONMETHOD) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{64}
}

// OpenconfigMplsTypesPATHMETRICTYPE represents an enumerated type generated for the YANG identity PATH_METRIC_TYPE.
type OpenconfigMplsTypesPATHMETRICTYPE int32

const (
	OpenconfigMplsTypesPATHMETRICTYPE_OPENCONFIGMPLSTYPESPATHMETRICTYPE_UNSET      OpenconfigMplsTypesPATHMETRICTYPE = 0
	OpenconfigMplsTypesPATHMETRICTYPE_OPENCONFIGMPLSTYPESPATHMETRICTYPE_TE_METRIC  OpenconfigMplsTypesPATHMETRICTYPE = 202164790
	OpenconfigMplsTypesPATHMETRICTYPE_OPENCONFIGMPLSTYPESPATHMETRICTYPE_HOP_COUNT  OpenconfigMplsTypesPATHMETRICTYPE = 428891163
	OpenconfigMplsTypesPATHMETRICTYPE_OPENCONFIGMPLSTYPESPATHMETRICTYPE_PATH_DELAY OpenconfigMplsTypesPATHMETRICTYPE = 451188151
	OpenconfigMplsTypesPATHMETRICTYPE_OPENCONFIGMPLSTYPESPATHMETRICTYPE_IGP_METRIC OpenconfigMplsTypesPATHMETRICTYPE = 465719573
)

// Enum value maps for OpenconfigMplsTypesPATHMETRICTYPE.
var (
	OpenconfigMplsTypesPATHMETRICTYPE_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESPATHMETRICTYPE_UNSET",
		202164790: "OPENCONFIGMPLSTYPESPATHMETRICTYPE_TE_METRIC",
		428891163: "OPENCONFIGMPLSTYPESPATHMETRICTYPE_HOP_COUNT",
		451188151: "OPENCONFIGMPLSTYPESPATHMETRICTYPE_PATH_DELAY",
		465719573: "OPENCONFIGMPLSTYPESPATHMETRICTYPE_IGP_METRIC",
	}
	OpenconfigMplsTypesPATHMETRICTYPE_value = map[string]int32{
		"OPENCONFIGMPLSTYPESPATHMETRICTYPE_UNSET":      0,
		"OPENCONFIGMPLSTYPESPATHMETRICTYPE_TE_METRIC":  202164790,
		"OPENCONFIGMPLSTYPESPATHMETRICTYPE_HOP_COUNT":  428891163,
		"OPENCONFIGMPLSTYPESPATHMETRICTYPE_PATH_DELAY": 451188151,
		"OPENCONFIGMPLSTYPESPATHMETRICTYPE_IGP_METRIC": 465719573,
	}
)

func (x OpenconfigMplsTypesPATHMETRICTYPE) Enum() *OpenconfigMplsTypesPATHMETRICTYPE {
	p := new(OpenconfigMplsTypesPATHMETRICTYPE)
	*p = x
	return p
}

func (x OpenconfigMplsTypesPATHMETRICTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesPATHMETRICTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[65].Descriptor()
}

func (OpenconfigMplsTypesPATHMETRICTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[65]
}

func (x OpenconfigMplsTypesPATHMETRICTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesPATHMETRICTYPE.Descriptor instead.
func (OpenconfigMplsTypesPATHMETRICTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{65}
}

// OpenconfigMplsTypesPATHSETUPPROTOCOL represents an enumerated type generated for the YANG identity PATH_SETUP_PROTOCOL.
type OpenconfigMplsTypesPATHSETUPPROTOCOL int32

const (
	OpenconfigMplsTypesPATHSETUPPROTOCOL_OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_UNSET           OpenconfigMplsTypesPATHSETUPPROTOCOL = 0
	OpenconfigMplsTypesPATHSETUPPROTOCOL_OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_PATH_SETUP_RSVP OpenconfigMplsTypesPATHSETUPPROTOCOL = 32490986
	OpenconfigMplsTypesPATHSETUPPROTOCOL_OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_PATH_SETUP_SR   OpenconfigMplsTypesPATHSETUPPROTOCOL = 259153130
	OpenconfigMplsTypesPATHSETUPPROTOCOL_OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_PATH_SETUP_LDP  OpenconfigMplsTypesPATHSETUPPROTOCOL = 523024019
)

// Enum value maps for OpenconfigMplsTypesPATHSETUPPROTOCOL.
var (
	OpenconfigMplsTypesPATHSETUPPROTOCOL_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_UNSET",
		32490986:  "OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_PATH_SETUP_RSVP",
		259153130: "OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_PATH_SETUP_SR",
		523024019: "OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_PATH_SETUP_LDP",
	}
	OpenconfigMplsTypesPATHSETUPPROTOCOL_value = map[string]int32{
		"OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_UNSET":           0,
		"OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_PATH_SETUP_RSVP": 32490986,
		"OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_PATH_SETUP_SR":   259153130,
		"OPENCONFIGMPLSTYPESPATHSETUPPROTOCOL_PATH_SETUP_LDP":  523024019,
	}
)

func (x OpenconfigMplsTypesPATHSETUPPROTOCOL) Enum() *OpenconfigMplsTypesPATHSETUPPROTOCOL {
	p := new(OpenconfigMplsTypesPATHSETUPPROTOCOL)
	*p = x
	return p
}

func (x OpenconfigMplsTypesPATHSETUPPROTOCOL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesPATHSETUPPROTOCOL) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[66].Descriptor()
}

func (OpenconfigMplsTypesPATHSETUPPROTOCOL) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[66]
}

func (x OpenconfigMplsTypesPATHSETUPPROTOCOL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesPATHSETUPPROTOCOL.Descriptor instead.
func (OpenconfigMplsTypesPATHSETUPPROTOCOL) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{66}
}

// OpenconfigMplsTypesPROTECTIONTYPE represents an enumerated type generated for the YANG identity PROTECTION_TYPE.
type OpenconfigMplsTypesPROTECTIONTYPE int32

const (
	OpenconfigMplsTypesPROTECTIONTYPE_OPENCONFIGMPLSTYPESPROTECTIONTYPE_UNSET                          OpenconfigMplsTypesPROTECTIONTYPE = 0
	OpenconfigMplsTypesPROTECTIONTYPE_OPENCONFIGMPLSTYPESPROTECTIONTYPE_UNPROTECTED                    OpenconfigMplsTypesPROTECTIONTYPE = 54186176
	OpenconfigMplsTypesPROTECTIONTYPE_OPENCONFIGMPLSTYPESPROTECTIONTYPE_LINK_NODE_PROTECTION_REQUESTED OpenconfigMplsTypesPROTECTIONTYPE = 298364029
	OpenconfigMplsTypesPROTECTIONTYPE_OPENCONFIGMPLSTYPESPROTECTIONTYPE_LINK_PROTECTION_REQUIRED       OpenconfigMplsTypesPROTECTIONTYPE = 390056449
)

// Enum value maps for OpenconfigMplsTypesPROTECTIONTYPE.
var (
	OpenconfigMplsTypesPROTECTIONTYPE_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESPROTECTIONTYPE_UNSET",
		54186176:  "OPENCONFIGMPLSTYPESPROTECTIONTYPE_UNPROTECTED",
		298364029: "OPENCONFIGMPLSTYPESPROTECTIONTYPE_LINK_NODE_PROTECTION_REQUESTED",
		390056449: "OPENCONFIGMPLSTYPESPROTECTIONTYPE_LINK_PROTECTION_REQUIRED",
	}
	OpenconfigMplsTypesPROTECTIONTYPE_value = map[string]int32{
		"OPENCONFIGMPLSTYPESPROTECTIONTYPE_UNSET":                          0,
		"OPENCONFIGMPLSTYPESPROTECTIONTYPE_UNPROTECTED":                    54186176,
		"OPENCONFIGMPLSTYPESPROTECTIONTYPE_LINK_NODE_PROTECTION_REQUESTED": 298364029,
		"OPENCONFIGMPLSTYPESPROTECTIONTYPE_LINK_PROTECTION_REQUIRED":       390056449,
	}
)

func (x OpenconfigMplsTypesPROTECTIONTYPE) Enum() *OpenconfigMplsTypesPROTECTIONTYPE {
	p := new(OpenconfigMplsTypesPROTECTIONTYPE)
	*p = x
	return p
}

func (x OpenconfigMplsTypesPROTECTIONTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesPROTECTIONTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[67].Descriptor()
}

func (OpenconfigMplsTypesPROTECTIONTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[67]
}

func (x OpenconfigMplsTypesPROTECTIONTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesPROTECTIONTYPE.Descriptor instead.
func (OpenconfigMplsTypesPROTECTIONTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{67}
}

// OpenconfigMplsTypesPSEUDOWIREENCAPSULATION represents an enumerated type generated for the YANG identity PSEUDOWIRE_ENCAPSULATION.
type OpenconfigMplsTypesPSEUDOWIREENCAPSULATION int32

const (
	OpenconfigMplsTypesPSEUDOWIREENCAPSULATION_OPENCONFIGMPLSTYPESPSEUDOWIREENCAPSULATION_UNSET                    OpenconfigMplsTypesPSEUDOWIREENCAPSULATION = 0
	OpenconfigMplsTypesPSEUDOWIREENCAPSULATION_OPENCONFIGMPLSTYPESPSEUDOWIREENCAPSULATION_PWE_ETHERNET_RAW_MODE    OpenconfigMplsTypesPSEUDOWIREENCAPSULATION = 439293174
	OpenconfigMplsTypesPSEUDOWIREENCAPSULATION_OPENCONFIGMPLSTYPESPSEUDOWIREENCAPSULATION_PWE_ETHERNET_TAGGED_MODE OpenconfigMplsTypesPSEUDOWIREENCAPSULATION = 461760696
)

// Enum value maps for OpenconfigMplsTypesPSEUDOWIREENCAPSULATION.
var (
	OpenconfigMplsTypesPSEUDOWIREENCAPSULATION_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESPSEUDOWIREENCAPSULATION_UNSET",
		439293174: "OPENCONFIGMPLSTYPESPSEUDOWIREENCAPSULATION_PWE_ETHERNET_RAW_MODE",
		461760696: "OPENCONFIGMPLSTYPESPSEUDOWIREENCAPSULATION_PWE_ETHERNET_TAGGED_MODE",
	}
	OpenconfigMplsTypesPSEUDOWIREENCAPSULATION_value = map[string]int32{
		"OPENCONFIGMPLSTYPESPSEUDOWIREENCAPSULATION_UNSET":                    0,
		"OPENCONFIGMPLSTYPESPSEUDOWIREENCAPSULATION_PWE_ETHERNET_RAW_MODE":    439293174,
		"OPENCONFIGMPLSTYPESPSEUDOWIREENCAPSULATION_PWE_ETHERNET_TAGGED_MODE": 461760696,
	}
)

func (x OpenconfigMplsTypesPSEUDOWIREENCAPSULATION) Enum() *OpenconfigMplsTypesPSEUDOWIREENCAPSULATION {
	p := new(OpenconfigMplsTypesPSEUDOWIREENCAPSULATION)
	*p = x
	return p
}

func (x OpenconfigMplsTypesPSEUDOWIREENCAPSULATION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesPSEUDOWIREENCAPSULATION) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[68].Descriptor()
}

func (OpenconfigMplsTypesPSEUDOWIREENCAPSULATION) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[68]
}

func (x OpenconfigMplsTypesPSEUDOWIREENCAPSULATION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesPSEUDOWIREENCAPSULATION.Descriptor instead.
func (OpenconfigMplsTypesPSEUDOWIREENCAPSULATION) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{68}
}

// OpenconfigMplsTypesRSVPAUTHTYPE represents an enumerated type generated for the YANG identity RSVP_AUTH_TYPE.
type OpenconfigMplsTypesRSVPAUTHTYPE int32

const (
	OpenconfigMplsTypesRSVPAUTHTYPE_OPENCONFIGMPLSTYPESRSVPAUTHTYPE_UNSET         OpenconfigMplsTypesRSVPAUTHTYPE = 0
	OpenconfigMplsTypesRSVPAUTHTYPE_OPENCONFIGMPLSTYPESRSVPAUTHTYPE_RSVP_AUTH_MD5 OpenconfigMplsTypesRSVPAUTHTYPE = 457917047
)

// Enum value maps for OpenconfigMplsTypesRSVPAUTHTYPE.
var (
	OpenconfigMplsTypesRSVPAUTHTYPE_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESRSVPAUTHTYPE_UNSET",
		457917047: "OPENCONFIGMPLSTYPESRSVPAUTHTYPE_RSVP_AUTH_MD5",
	}
	OpenconfigMplsTypesRSVPAUTHTYPE_value = map[string]int32{
		"OPENCONFIGMPLSTYPESRSVPAUTHTYPE_UNSET":         0,
		"OPENCONFIGMPLSTYPESRSVPAUTHTYPE_RSVP_AUTH_MD5": 457917047,
	}
)

func (x OpenconfigMplsTypesRSVPAUTHTYPE) Enum() *OpenconfigMplsTypesRSVPAUTHTYPE {
	p := new(OpenconfigMplsTypesRSVPAUTHTYPE)
	*p = x
	return p
}

func (x OpenconfigMplsTypesRSVPAUTHTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesRSVPAUTHTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[69].Descriptor()
}

func (OpenconfigMplsTypesRSVPAUTHTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[69]
}

func (x OpenconfigMplsTypesRSVPAUTHTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesRSVPAUTHTYPE.Descriptor instead.
func (OpenconfigMplsTypesRSVPAUTHTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{69}
}

// OpenconfigMplsTypesTUNNELADMINSTATUS represents an enumerated type generated for the YANG identity TUNNEL_ADMIN_STATUS.
type OpenconfigMplsTypesTUNNELADMINSTATUS int32

const (
	OpenconfigMplsTypesTUNNELADMINSTATUS_OPENCONFIGMPLSTYPESTUNNELADMINSTATUS_UNSET      OpenconfigMplsTypesTUNNELADMINSTATUS = 0
	OpenconfigMplsTypesTUNNELADMINSTATUS_OPENCONFIGMPLSTYPESTUNNELADMINSTATUS_ADMIN_UP   OpenconfigMplsTypesTUNNELADMINSTATUS = 74384195
	OpenconfigMplsTypesTUNNELADMINSTATUS_OPENCONFIGMPLSTYPESTUNNELADMINSTATUS_ADMIN_DOWN OpenconfigMplsTypesTUNNELADMINSTATUS = 141379584
)

// Enum value maps for OpenconfigMplsTypesTUNNELADMINSTATUS.
var (
	OpenconfigMplsTypesTUNNELADMINSTATUS_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESTUNNELADMINSTATUS_UNSET",
		74384195:  "OPENCONFIGMPLSTYPESTUNNELADMINSTATUS_ADMIN_UP",
		141379584: "OPENCONFIGMPLSTYPESTUNNELADMINSTATUS_ADMIN_DOWN",
	}
	OpenconfigMplsTypesTUNNELADMINSTATUS_value = map[string]int32{
		"OPENCONFIGMPLSTYPESTUNNELADMINSTATUS_UNSET":      0,
		"OPENCONFIGMPLSTYPESTUNNELADMINSTATUS_ADMIN_UP":   74384195,
		"OPENCONFIGMPLSTYPESTUNNELADMINSTATUS_ADMIN_DOWN": 141379584,
	}
)

func (x OpenconfigMplsTypesTUNNELADMINSTATUS) Enum() *OpenconfigMplsTypesTUNNELADMINSTATUS {
	p := new(OpenconfigMplsTypesTUNNELADMINSTATUS)
	*p = x
	return p
}

func (x OpenconfigMplsTypesTUNNELADMINSTATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesTUNNELADMINSTATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[70].Descriptor()
}

func (OpenconfigMplsTypesTUNNELADMINSTATUS) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[70]
}

func (x OpenconfigMplsTypesTUNNELADMINSTATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesTUNNELADMINSTATUS.Descriptor instead.
func (OpenconfigMplsTypesTUNNELADMINSTATUS) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{70}
}

// OpenconfigMplsTypesTUNNELTYPE represents an enumerated type generated for the YANG identity TUNNEL_TYPE.
type OpenconfigMplsTypesTUNNELTYPE int32

const (
	OpenconfigMplsTypesTUNNELTYPE_OPENCONFIGMPLSTYPESTUNNELTYPE_UNSET OpenconfigMplsTypesTUNNELTYPE = 0
	OpenconfigMplsTypesTUNNELTYPE_OPENCONFIGMPLSTYPESTUNNELTYPE_P2P   OpenconfigMplsTypesTUNNELTYPE = 234390308
	OpenconfigMplsTypesTUNNELTYPE_OPENCONFIGMPLSTYPESTUNNELTYPE_P2MP  OpenconfigMplsTypesTUNNELTYPE = 389452523
)

// Enum value maps for OpenconfigMplsTypesTUNNELTYPE.
var (
	OpenconfigMplsTypesTUNNELTYPE_name = map[int32]string{
		0:         "OPENCONFIGMPLSTYPESTUNNELTYPE_UNSET",
		234390308: "OPENCONFIGMPLSTYPESTUNNELTYPE_P2P",
		389452523: "OPENCONFIGMPLSTYPESTUNNELTYPE_P2MP",
	}
	OpenconfigMplsTypesTUNNELTYPE_value = map[string]int32{
		"OPENCONFIGMPLSTYPESTUNNELTYPE_UNSET": 0,
		"OPENCONFIGMPLSTYPESTUNNELTYPE_P2P":   234390308,
		"OPENCONFIGMPLSTYPESTUNNELTYPE_P2MP":  389452523,
	}
)

func (x OpenconfigMplsTypesTUNNELTYPE) Enum() *OpenconfigMplsTypesTUNNELTYPE {
	p := new(OpenconfigMplsTypesTUNNELTYPE)
	*p = x
	return p
}

func (x OpenconfigMplsTypesTUNNELTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigMplsTypesTUNNELTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[71].Descriptor()
}

func (OpenconfigMplsTypesTUNNELTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[71]
}

func (x OpenconfigMplsTypesTUNNELTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigMplsTypesTUNNELTYPE.Descriptor instead.
func (OpenconfigMplsTypesTUNNELTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{71}
}

// OpenconfigNetworkInstanceTypesENCAPSULATION represents an enumerated type generated for the YANG identity ENCAPSULATION.
type OpenconfigNetworkInstanceTypesENCAPSULATION int32

const (
	OpenconfigNetworkInstanceTypesENCAPSULATION_OPENCONFIGNETWORKINSTANCETYPESENCAPSULATION_UNSET OpenconfigNetworkInstanceTypesENCAPSULATION = 0
	OpenconfigNetworkInstanceTypesENCAPSULATION_OPENCONFIGNETWORKINSTANCETYPESENCAPSULATION_MPLS  OpenconfigNetworkInstanceTypesENCAPSULATION = 365922551
	OpenconfigNetworkInstanceTypesENCAPSULATION_OPENCONFIGNETWORKINSTANCETYPESENCAPSULATION_VXLAN OpenconfigNetworkInstanceTypesENCAPSULATION = 518286338
)

// Enum value maps for OpenconfigNetworkInstanceTypesENCAPSULATION.
var (
	OpenconfigNetworkInstanceTypesENCAPSULATION_name = map[int32]string{
		0:         "OPENCONFIGNETWORKINSTANCETYPESENCAPSULATION_UNSET",
		365922551: "OPENCONFIGNETWORKINSTANCETYPESENCAPSULATION_MPLS",
		518286338: "OPENCONFIGNETWORKINSTANCETYPESENCAPSULATION_VXLAN",
	}
	OpenconfigNetworkInstanceTypesENCAPSULATION_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCETYPESENCAPSULATION_UNSET": 0,
		"OPENCONFIGNETWORKINSTANCETYPESENCAPSULATION_MPLS":  365922551,
		"OPENCONFIGNETWORKINSTANCETYPESENCAPSULATION_VXLAN": 518286338,
	}
)

func (x OpenconfigNetworkInstanceTypesENCAPSULATION) Enum() *OpenconfigNetworkInstanceTypesENCAPSULATION {
	p := new(OpenconfigNetworkInstanceTypesENCAPSULATION)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceTypesENCAPSULATION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceTypesENCAPSULATION) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[72].Descriptor()
}

func (OpenconfigNetworkInstanceTypesENCAPSULATION) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[72]
}

func (x OpenconfigNetworkInstanceTypesENCAPSULATION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceTypesENCAPSULATION.Descriptor instead.
func (OpenconfigNetworkInstanceTypesENCAPSULATION) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{72}
}

// OpenconfigNetworkInstanceTypesENDPOINTTYPE represents an enumerated type generated for the YANG identity ENDPOINT_TYPE.
type OpenconfigNetworkInstanceTypesENDPOINTTYPE int32

const (
	OpenconfigNetworkInstanceTypesENDPOINTTYPE_OPENCONFIGNETWORKINSTANCETYPESENDPOINTTYPE_UNSET  OpenconfigNetworkInstanceTypesENDPOINTTYPE = 0
	OpenconfigNetworkInstanceTypesENDPOINTTYPE_OPENCONFIGNETWORKINSTANCETYPESENDPOINTTYPE_REMOTE OpenconfigNetworkInstanceTypesENDPOINTTYPE = 315230175
	OpenconfigNetworkInstanceTypesENDPOINTTYPE_OPENCONFIGNETWORKINSTANCETYPESENDPOINTTYPE_LOCAL  OpenconfigNetworkInstanceTypesENDPOINTTYPE = 473263274
)

// Enum value maps for OpenconfigNetworkInstanceTypesENDPOINTTYPE.
var (
	OpenconfigNetworkInstanceTypesENDPOINTTYPE_name = map[int32]string{
		0:         "OPENCONFIGNETWORKINSTANCETYPESENDPOINTTYPE_UNSET",
		315230175: "OPENCONFIGNETWORKINSTANCETYPESENDPOINTTYPE_REMOTE",
		473263274: "OPENCONFIGNETWORKINSTANCETYPESENDPOINTTYPE_LOCAL",
	}
	OpenconfigNetworkInstanceTypesENDPOINTTYPE_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCETYPESENDPOINTTYPE_UNSET":  0,
		"OPENCONFIGNETWORKINSTANCETYPESENDPOINTTYPE_REMOTE": 315230175,
		"OPENCONFIGNETWORKINSTANCETYPESENDPOINTTYPE_LOCAL":  473263274,
	}
)

func (x OpenconfigNetworkInstanceTypesENDPOINTTYPE) Enum() *OpenconfigNetworkInstanceTypesENDPOINTTYPE {
	p := new(OpenconfigNetworkInstanceTypesENDPOINTTYPE)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceTypesENDPOINTTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceTypesENDPOINTTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[73].Descriptor()
}

func (OpenconfigNetworkInstanceTypesENDPOINTTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[73]
}

func (x OpenconfigNetworkInstanceTypesENDPOINTTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceTypesENDPOINTTYPE.Descriptor instead.
func (OpenconfigNetworkInstanceTypesENDPOINTTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{73}
}

// OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE represents an enumerated type generated for the YANG identity LABEL_ALLOCATION_MODE.
type OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE int32

const (
	OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE_OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_UNSET          OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE = 0
	OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE_OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_PER_NEXTHOP    OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE = 42305384
	OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE_OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_PER_PREFIX     OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE = 147569928
	OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE_OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_INSTANCE_LABEL OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE = 260096202
)

// Enum value maps for OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE.
var (
	OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE_name = map[int32]string{
		0:         "OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_UNSET",
		42305384:  "OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_PER_NEXTHOP",
		147569928: "OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_PER_PREFIX",
		260096202: "OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_INSTANCE_LABEL",
	}
	OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_UNSET":          0,
		"OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_PER_NEXTHOP":    42305384,
		"OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_PER_PREFIX":     147569928,
		"OPENCONFIGNETWORKINSTANCETYPESLABELALLOCATIONMODE_INSTANCE_LABEL": 260096202,
	}
)

func (x OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE) Enum() *OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE {
	p := new(OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[74].Descriptor()
}

func (OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[74]
}

func (x OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE.Descriptor instead.
func (OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{74}
}

// OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE represents an enumerated type generated for the YANG identity NETWORK_INSTANCE_TYPE.
type OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE int32

const (
	OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE_OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_UNSET            OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE = 0
	OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE_OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L2P2P            OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE = 49773504
	OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE_OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L2VSI            OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE = 65578160
	OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE_OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L3VRF            OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE = 161283259
	OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE_OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L2L3             OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE = 409599277
	OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE_OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_DEFAULT_INSTANCE OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE = 476488119
)

// Enum value maps for OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE.
var (
	OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE_name = map[int32]string{
		0:         "OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_UNSET",
		49773504:  "OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L2P2P",
		65578160:  "OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L2VSI",
		161283259: "OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L3VRF",
		409599277: "OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L2L3",
		476488119: "OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_DEFAULT_INSTANCE",
	}
	OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE_value = map[string]int32{
		"OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_UNSET":            0,
		"OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L2P2P":            49773504,
		"OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L2VSI":            65578160,
		"OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L3VRF":            161283259,
		"OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_L2L3":             409599277,
		"OPENCONFIGNETWORKINSTANCETYPESNETWORKINSTANCETYPE_DEFAULT_INSTANCE": 476488119,
	}
)

func (x OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE) Enum() *OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE {
	p := new(OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE)
	*p = x
	return p
}

func (x OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[75].Descriptor()
}

func (OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[75]
}

func (x OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE.Descriptor instead.
func (OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{75}
}

// OpenconfigOspfTypesGRACELSATLVTYPES represents an enumerated type generated for the YANG identity GRACE_LSA_TLV_TYPES.
type OpenconfigOspfTypesGRACELSATLVTYPES int32

const (
	OpenconfigOspfTypesGRACELSATLVTYPES_OPENCONFIGOSPFTYPESGRACELSATLVTYPES_UNSET                      OpenconfigOspfTypesGRACELSATLVTYPES = 0
	OpenconfigOspfTypesGRACELSATLVTYPES_OPENCONFIGOSPFTYPESGRACELSATLVTYPES_GRACE_RESTART_REASON       OpenconfigOspfTypesGRACELSATLVTYPES = 71890108
	OpenconfigOspfTypesGRACELSATLVTYPES_OPENCONFIGOSPFTYPESGRACELSATLVTYPES_GRACE_IP_INTERFACE_ADDRESS OpenconfigOspfTypesGRACELSATLVTYPES = 152130218
	OpenconfigOspfTypesGRACELSATLVTYPES_OPENCONFIGOSPFTYPESGRACELSATLVTYPES_GRACE_PERIOD               OpenconfigOspfTypesGRACELSATLVTYPES = 243906855
)

// Enum value maps for OpenconfigOspfTypesGRACELSATLVTYPES.
var (
	OpenconfigOspfTypesGRACELSATLVTYPES_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESGRACELSATLVTYPES_UNSET",
		71890108:  "OPENCONFIGOSPFTYPESGRACELSATLVTYPES_GRACE_RESTART_REASON",
		152130218: "OPENCONFIGOSPFTYPESGRACELSATLVTYPES_GRACE_IP_INTERFACE_ADDRESS",
		243906855: "OPENCONFIGOSPFTYPESGRACELSATLVTYPES_GRACE_PERIOD",
	}
	OpenconfigOspfTypesGRACELSATLVTYPES_value = map[string]int32{
		"OPENCONFIGOSPFTYPESGRACELSATLVTYPES_UNSET":                      0,
		"OPENCONFIGOSPFTYPESGRACELSATLVTYPES_GRACE_RESTART_REASON":       71890108,
		"OPENCONFIGOSPFTYPESGRACELSATLVTYPES_GRACE_IP_INTERFACE_ADDRESS": 152130218,
		"OPENCONFIGOSPFTYPESGRACELSATLVTYPES_GRACE_PERIOD":               243906855,
	}
)

func (x OpenconfigOspfTypesGRACELSATLVTYPES) Enum() *OpenconfigOspfTypesGRACELSATLVTYPES {
	p := new(OpenconfigOspfTypesGRACELSATLVTYPES)
	*p = x
	return p
}

func (x OpenconfigOspfTypesGRACELSATLVTYPES) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesGRACELSATLVTYPES) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[76].Descriptor()
}

func (OpenconfigOspfTypesGRACELSATLVTYPES) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[76]
}

func (x OpenconfigOspfTypesGRACELSATLVTYPES) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesGRACELSATLVTYPES.Descriptor instead.
func (OpenconfigOspfTypesGRACELSATLVTYPES) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{76}
}

// OpenconfigOspfTypesMAXMETRICINCLUDE represents an enumerated type generated for the YANG identity MAX_METRIC_INCLUDE.
type OpenconfigOspfTypesMAXMETRICINCLUDE int32

const (
	OpenconfigOspfTypesMAXMETRICINCLUDE_OPENCONFIGOSPFTYPESMAXMETRICINCLUDE_UNSET                             OpenconfigOspfTypesMAXMETRICINCLUDE = 0
	OpenconfigOspfTypesMAXMETRICINCLUDE_OPENCONFIGOSPFTYPESMAXMETRICINCLUDE_MAX_METRIC_INCLUDE_STUB           OpenconfigOspfTypesMAXMETRICINCLUDE = 49035700
	OpenconfigOspfTypesMAXMETRICINCLUDE_OPENCONFIGOSPFTYPESMAXMETRICINCLUDE_MAX_METRIC_INCLUDE_TYPE2_EXTERNAL OpenconfigOspfTypesMAXMETRICINCLUDE = 174031936
)

// Enum value maps for OpenconfigOspfTypesMAXMETRICINCLUDE.
var (
	OpenconfigOspfTypesMAXMETRICINCLUDE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESMAXMETRICINCLUDE_UNSET",
		49035700:  "OPENCONFIGOSPFTYPESMAXMETRICINCLUDE_MAX_METRIC_INCLUDE_STUB",
		174031936: "OPENCONFIGOSPFTYPESMAXMETRICINCLUDE_MAX_METRIC_INCLUDE_TYPE2_EXTERNAL",
	}
	OpenconfigOspfTypesMAXMETRICINCLUDE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESMAXMETRICINCLUDE_UNSET":                             0,
		"OPENCONFIGOSPFTYPESMAXMETRICINCLUDE_MAX_METRIC_INCLUDE_STUB":           49035700,
		"OPENCONFIGOSPFTYPESMAXMETRICINCLUDE_MAX_METRIC_INCLUDE_TYPE2_EXTERNAL": 174031936,
	}
)

func (x OpenconfigOspfTypesMAXMETRICINCLUDE) Enum() *OpenconfigOspfTypesMAXMETRICINCLUDE {
	p := new(OpenconfigOspfTypesMAXMETRICINCLUDE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesMAXMETRICINCLUDE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesMAXMETRICINCLUDE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[77].Descriptor()
}

func (OpenconfigOspfTypesMAXMETRICINCLUDE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[77]
}

func (x OpenconfigOspfTypesMAXMETRICINCLUDE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesMAXMETRICINCLUDE.Descriptor instead.
func (OpenconfigOspfTypesMAXMETRICINCLUDE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{77}
}

// OpenconfigOspfTypesMAXMETRICTRIGGER represents an enumerated type generated for the YANG identity MAX_METRIC_TRIGGER.
type OpenconfigOspfTypesMAXMETRICTRIGGER int32

const (
	OpenconfigOspfTypesMAXMETRICTRIGGER_OPENCONFIGOSPFTYPESMAXMETRICTRIGGER_UNSET                     OpenconfigOspfTypesMAXMETRICTRIGGER = 0
	OpenconfigOspfTypesMAXMETRICTRIGGER_OPENCONFIGOSPFTYPESMAXMETRICTRIGGER_MAX_METRIC_ON_SYSTEM_BOOT OpenconfigOspfTypesMAXMETRICTRIGGER = 428003983
)

// Enum value maps for OpenconfigOspfTypesMAXMETRICTRIGGER.
var (
	OpenconfigOspfTypesMAXMETRICTRIGGER_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESMAXMETRICTRIGGER_UNSET",
		428003983: "OPENCONFIGOSPFTYPESMAXMETRICTRIGGER_MAX_METRIC_ON_SYSTEM_BOOT",
	}
	OpenconfigOspfTypesMAXMETRICTRIGGER_value = map[string]int32{
		"OPENCONFIGOSPFTYPESMAXMETRICTRIGGER_UNSET":                     0,
		"OPENCONFIGOSPFTYPESMAXMETRICTRIGGER_MAX_METRIC_ON_SYSTEM_BOOT": 428003983,
	}
)

func (x OpenconfigOspfTypesMAXMETRICTRIGGER) Enum() *OpenconfigOspfTypesMAXMETRICTRIGGER {
	p := new(OpenconfigOspfTypesMAXMETRICTRIGGER)
	*p = x
	return p
}

func (x OpenconfigOspfTypesMAXMETRICTRIGGER) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesMAXMETRICTRIGGER) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[78].Descriptor()
}

func (OpenconfigOspfTypesMAXMETRICTRIGGER) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[78]
}

func (x OpenconfigOspfTypesMAXMETRICTRIGGER) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesMAXMETRICTRIGGER.Descriptor instead.
func (OpenconfigOspfTypesMAXMETRICTRIGGER) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{78}
}

// OpenconfigOspfTypesOSPFLSATYPE represents an enumerated type generated for the YANG identity OSPF_LSA_TYPE.
type OpenconfigOspfTypesOSPFLSATYPE int32

const (
	OpenconfigOspfTypesOSPFLSATYPE_OPENCONFIGOSPFTYPESOSPFLSATYPE_UNSET                        OpenconfigOspfTypesOSPFLSATYPE = 0
	OpenconfigOspfTypesOSPFLSATYPE_OPENCONFIGOSPFTYPESOSPFLSATYPE_SUMMARY_ASBR_LSA             OpenconfigOspfTypesOSPFLSATYPE = 125037213
	OpenconfigOspfTypesOSPFLSATYPE_OPENCONFIGOSPFTYPESOSPFLSATYPE_OSPFV2_LINK_SCOPE_OPAQUE_LSA OpenconfigOspfTypesOSPFLSATYPE = 137304350
	OpenconfigOspfTypesOSPFLSATYPE_OPENCONFIGOSPFTYPESOSPFLSATYPE_OSPFV2_AS_SCOPE_OPAQUE_LSA   OpenconfigOspfTypesOSPFLSATYPE = 186883594
	OpenconfigOspfTypesOSPFLSATYPE_OPENCONFIGOSPFTYPESOSPFLSATYPE_SUMMARY_IP_NETWORK_LSA       OpenconfigOspfTypesOSPFLSATYPE = 188591841
	OpenconfigOspfTypesOSPFLSATYPE_OPENCONFIGOSPFTYPESOSPFLSATYPE_OSPFV2_AREA_SCOPE_OPAQUE_LSA OpenconfigOspfTypesOSPFLSATYPE = 215291727
	OpenconfigOspfTypesOSPFLSATYPE_OPENCONFIGOSPFTYPESOSPFLSATYPE_ROUTER_LSA                   OpenconfigOspfTypesOSPFLSATYPE = 260046265
	OpenconfigOspfTypesOSPFLSATYPE_OPENCONFIGOSPFTYPESOSPFLSATYPE_NETWORK_LSA                  OpenconfigOspfTypesOSPFLSATYPE = 350986634
	OpenconfigOspfTypesOSPFLSATYPE_OPENCONFIGOSPFTYPESOSPFLSATYPE_NSSA_AS_EXTERNAL_LSA         OpenconfigOspfTypesOSPFLSATYPE = 444724228
	OpenconfigOspfTypesOSPFLSATYPE_OPENCONFIGOSPFTYPESOSPFLSATYPE_AS_EXTERNAL_LSA              OpenconfigOspfTypesOSPFLSATYPE = 492019634
)

// Enum value maps for OpenconfigOspfTypesOSPFLSATYPE.
var (
	OpenconfigOspfTypesOSPFLSATYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFLSATYPE_UNSET",
		125037213: "OPENCONFIGOSPFTYPESOSPFLSATYPE_SUMMARY_ASBR_LSA",
		137304350: "OPENCONFIGOSPFTYPESOSPFLSATYPE_OSPFV2_LINK_SCOPE_OPAQUE_LSA",
		186883594: "OPENCONFIGOSPFTYPESOSPFLSATYPE_OSPFV2_AS_SCOPE_OPAQUE_LSA",
		188591841: "OPENCONFIGOSPFTYPESOSPFLSATYPE_SUMMARY_IP_NETWORK_LSA",
		215291727: "OPENCONFIGOSPFTYPESOSPFLSATYPE_OSPFV2_AREA_SCOPE_OPAQUE_LSA",
		260046265: "OPENCONFIGOSPFTYPESOSPFLSATYPE_ROUTER_LSA",
		350986634: "OPENCONFIGOSPFTYPESOSPFLSATYPE_NETWORK_LSA",
		444724228: "OPENCONFIGOSPFTYPESOSPFLSATYPE_NSSA_AS_EXTERNAL_LSA",
		492019634: "OPENCONFIGOSPFTYPESOSPFLSATYPE_AS_EXTERNAL_LSA",
	}
	OpenconfigOspfTypesOSPFLSATYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFLSATYPE_UNSET":                        0,
		"OPENCONFIGOSPFTYPESOSPFLSATYPE_SUMMARY_ASBR_LSA":             125037213,
		"OPENCONFIGOSPFTYPESOSPFLSATYPE_OSPFV2_LINK_SCOPE_OPAQUE_LSA": 137304350,
		"OPENCONFIGOSPFTYPESOSPFLSATYPE_OSPFV2_AS_SCOPE_OPAQUE_LSA":   186883594,
		"OPENCONFIGOSPFTYPESOSPFLSATYPE_SUMMARY_IP_NETWORK_LSA":       188591841,
		"OPENCONFIGOSPFTYPESOSPFLSATYPE_OSPFV2_AREA_SCOPE_OPAQUE_LSA": 215291727,
		"OPENCONFIGOSPFTYPESOSPFLSATYPE_ROUTER_LSA":                   260046265,
		"OPENCONFIGOSPFTYPESOSPFLSATYPE_NETWORK_LSA":                  350986634,
		"OPENCONFIGOSPFTYPESOSPFLSATYPE_NSSA_AS_EXTERNAL_LSA":         444724228,
		"OPENCONFIGOSPFTYPESOSPFLSATYPE_AS_EXTERNAL_LSA":              492019634,
	}
)

func (x OpenconfigOspfTypesOSPFLSATYPE) Enum() *OpenconfigOspfTypesOSPFLSATYPE {
	p := new(OpenconfigOspfTypesOSPFLSATYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFLSATYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFLSATYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[79].Descriptor()
}

func (OpenconfigOspfTypesOSPFLSATYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[79]
}

func (x OpenconfigOspfTypesOSPFLSATYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFLSATYPE.Descriptor instead.
func (OpenconfigOspfTypesOSPFLSATYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{79}
}

// OpenconfigOspfTypesOSPFNEIGHBORSTATE represents an enumerated type generated for the YANG identity OSPF_NEIGHBOR_STATE.
type OpenconfigOspfTypesOSPFNEIGHBORSTATE int32

const (
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_UNSET    OpenconfigOspfTypesOSPFNEIGHBORSTATE = 0
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_INIT     OpenconfigOspfTypesOSPFNEIGHBORSTATE = 37357902
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_FULL     OpenconfigOspfTypesOSPFNEIGHBORSTATE = 66779439
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_ATTEMPT  OpenconfigOspfTypesOSPFNEIGHBORSTATE = 115294523
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_TWO_WAY  OpenconfigOspfTypesOSPFNEIGHBORSTATE = 143682058
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_DOWN     OpenconfigOspfTypesOSPFNEIGHBORSTATE = 324638956
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_LOADING  OpenconfigOspfTypesOSPFNEIGHBORSTATE = 380579724
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_EXCHANGE OpenconfigOspfTypesOSPFNEIGHBORSTATE = 384166631
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_EXSTART  OpenconfigOspfTypesOSPFNEIGHBORSTATE = 428183021
)

// Enum value maps for OpenconfigOspfTypesOSPFNEIGHBORSTATE.
var (
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_UNSET",
		37357902:  "OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_INIT",
		66779439:  "OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_FULL",
		115294523: "OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_ATTEMPT",
		143682058: "OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_TWO_WAY",
		324638956: "OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_DOWN",
		380579724: "OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_LOADING",
		384166631: "OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_EXCHANGE",
		428183021: "OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_EXSTART",
	}
	OpenconfigOspfTypesOSPFNEIGHBORSTATE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_UNSET":    0,
		"OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_INIT":     37357902,
		"OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_FULL":     66779439,
		"OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_ATTEMPT":  115294523,
		"OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_TWO_WAY":  143682058,
		"OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_DOWN":     324638956,
		"OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_LOADING":  380579724,
		"OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_EXCHANGE": 384166631,
		"OPENCONFIGOSPFTYPESOSPFNEIGHBORSTATE_EXSTART":  428183021,
	}
)

func (x OpenconfigOspfTypesOSPFNEIGHBORSTATE) Enum() *OpenconfigOspfTypesOSPFNEIGHBORSTATE {
	p := new(OpenconfigOspfTypesOSPFNEIGHBORSTATE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFNEIGHBORSTATE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFNEIGHBORSTATE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[80].Descriptor()
}

func (OpenconfigOspfTypesOSPFNEIGHBORSTATE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[80]
}

func (x OpenconfigOspfTypesOSPFNEIGHBORSTATE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFNEIGHBORSTATE.Descriptor instead.
func (OpenconfigOspfTypesOSPFNEIGHBORSTATE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{80}
}

// OpenconfigOspfTypesOSPFNETWORKTYPE represents an enumerated type generated for the YANG identity OSPF_NETWORK_TYPE.
type OpenconfigOspfTypesOSPFNETWORKTYPE int32

const (
	OpenconfigOspfTypesOSPFNETWORKTYPE_OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_UNSET                  OpenconfigOspfTypesOSPFNETWORKTYPE = 0
	OpenconfigOspfTypesOSPFNETWORKTYPE_OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_POINT_TO_POINT_NETWORK OpenconfigOspfTypesOSPFNETWORKTYPE = 33508311
	OpenconfigOspfTypesOSPFNETWORKTYPE_OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_BROADCAST_NETWORK      OpenconfigOspfTypesOSPFNETWORKTYPE = 330434029
	OpenconfigOspfTypesOSPFNETWORKTYPE_OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_NON_BROADCAST_NETWORK  OpenconfigOspfTypesOSPFNETWORKTYPE = 449794969
)

// Enum value maps for OpenconfigOspfTypesOSPFNETWORKTYPE.
var (
	OpenconfigOspfTypesOSPFNETWORKTYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_UNSET",
		33508311:  "OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_POINT_TO_POINT_NETWORK",
		330434029: "OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_BROADCAST_NETWORK",
		449794969: "OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_NON_BROADCAST_NETWORK",
	}
	OpenconfigOspfTypesOSPFNETWORKTYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_UNSET":                  0,
		"OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_POINT_TO_POINT_NETWORK": 33508311,
		"OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_BROADCAST_NETWORK":      330434029,
		"OPENCONFIGOSPFTYPESOSPFNETWORKTYPE_NON_BROADCAST_NETWORK":  449794969,
	}
)

func (x OpenconfigOspfTypesOSPFNETWORKTYPE) Enum() *OpenconfigOspfTypesOSPFNETWORKTYPE {
	p := new(OpenconfigOspfTypesOSPFNETWORKTYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFNETWORKTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFNETWORKTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[81].Descriptor()
}

func (OpenconfigOspfTypesOSPFNETWORKTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[81]
}

func (x OpenconfigOspfTypesOSPFNETWORKTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFNETWORKTYPE.Descriptor instead.
func (OpenconfigOspfTypesOSPFNETWORKTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{81}
}

// OpenconfigOspfTypesOSPFOPAQUELSATYPE represents an enumerated type generated for the YANG identity OSPF_OPAQUE_LSA_TYPE.
type OpenconfigOspfTypesOSPFOPAQUELSATYPE int32

const (
	OpenconfigOspfTypesOSPFOPAQUELSATYPE_OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_UNSET                  OpenconfigOspfTypesOSPFOPAQUELSATYPE = 0
	OpenconfigOspfTypesOSPFOPAQUELSATYPE_OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_OSPFV2_EXTENDED_PREFIX OpenconfigOspfTypesOSPFOPAQUELSATYPE = 19017104
	OpenconfigOspfTypesOSPFOPAQUELSATYPE_OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_GRACE_LSA              OpenconfigOspfTypesOSPFOPAQUELSATYPE = 196570736
	OpenconfigOspfTypesOSPFOPAQUELSATYPE_OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_TRAFFIC_ENGINEERING    OpenconfigOspfTypesOSPFOPAQUELSATYPE = 198655238
	OpenconfigOspfTypesOSPFOPAQUELSATYPE_OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_OSPFV2_EXTENDED_LINK   OpenconfigOspfTypesOSPFOPAQUELSATYPE = 213605388
	OpenconfigOspfTypesOSPFOPAQUELSATYPE_OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_ROUTER_INFORMATION     OpenconfigOspfTypesOSPFOPAQUELSATYPE = 246496211
)

// Enum value maps for OpenconfigOspfTypesOSPFOPAQUELSATYPE.
var (
	OpenconfigOspfTypesOSPFOPAQUELSATYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_UNSET",
		19017104:  "OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_OSPFV2_EXTENDED_PREFIX",
		196570736: "OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_GRACE_LSA",
		198655238: "OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_TRAFFIC_ENGINEERING",
		213605388: "OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_OSPFV2_EXTENDED_LINK",
		246496211: "OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_ROUTER_INFORMATION",
	}
	OpenconfigOspfTypesOSPFOPAQUELSATYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_UNSET":                  0,
		"OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_OSPFV2_EXTENDED_PREFIX": 19017104,
		"OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_GRACE_LSA":              196570736,
		"OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_TRAFFIC_ENGINEERING":    198655238,
		"OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_OSPFV2_EXTENDED_LINK":   213605388,
		"OPENCONFIGOSPFTYPESOSPFOPAQUELSATYPE_ROUTER_INFORMATION":     246496211,
	}
)

func (x OpenconfigOspfTypesOSPFOPAQUELSATYPE) Enum() *OpenconfigOspfTypesOSPFOPAQUELSATYPE {
	p := new(OpenconfigOspfTypesOSPFOPAQUELSATYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFOPAQUELSATYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFOPAQUELSATYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[82].Descriptor()
}

func (OpenconfigOspfTypesOSPFOPAQUELSATYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[82]
}

func (x OpenconfigOspfTypesOSPFOPAQUELSATYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFOPAQUELSATYPE.Descriptor instead.
func (OpenconfigOspfTypesOSPFOPAQUELSATYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{82}
}

// OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES represents an enumerated type generated for the YANG identity OSPF_RI_SR_SID_LABEL_TLV_TYPES.
type OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES int32

const (
	OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES_OPENCONFIGOSPFTYPESOSPFRISRSIDLABELTLVTYPES_UNSET            OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES = 0
	OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES_OPENCONFIGOSPFTYPESOSPFRISRSIDLABELTLVTYPES_SR_SID_LABEL_TLV OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES = 411420284
)

// Enum value maps for OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES.
var (
	OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFRISRSIDLABELTLVTYPES_UNSET",
		411420284: "OPENCONFIGOSPFTYPESOSPFRISRSIDLABELTLVTYPES_SR_SID_LABEL_TLV",
	}
	OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFRISRSIDLABELTLVTYPES_UNSET":            0,
		"OPENCONFIGOSPFTYPESOSPFRISRSIDLABELTLVTYPES_SR_SID_LABEL_TLV": 411420284,
	}
)

func (x OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES) Enum() *OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES {
	p := new(OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[83].Descriptor()
}

func (OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[83]
}

func (x OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES.Descriptor instead.
func (OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{83}
}

// OpenconfigOspfTypesOSPFTELINKTLVTYPE represents an enumerated type generated for the YANG identity OSPF_TE_LINK_TLV_TYPE.
type OpenconfigOspfTypesOSPFTELINKTLVTYPE int32

const (
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_UNSET                                OpenconfigOspfTypesOSPFTELINKTLVTYPE = 0
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_ADMIN_GROUP                  OpenconfigOspfTypesOSPFTELINKTLVTYPE = 41688158
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_MAXIMUM_RESERVABLE_BANDWIDTH OpenconfigOspfTypesOSPFTELINKTLVTYPE = 81262405
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_UNRESERVED_BANDWIDTH         OpenconfigOspfTypesOSPFTELINKTLVTYPE = 237811802
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_METRIC                       OpenconfigOspfTypesOSPFTELINKTLVTYPE = 275089009
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_MAXIMUM_BANDWIDTH            OpenconfigOspfTypesOSPFTELINKTLVTYPE = 357259331
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_LOCAL_IP                     OpenconfigOspfTypesOSPFTELINKTLVTYPE = 399771326
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_ID                           OpenconfigOspfTypesOSPFTELINKTLVTYPE = 464176934
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_REMOTE_IP                    OpenconfigOspfTypesOSPFTELINKTLVTYPE = 469648989
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_TYPE                         OpenconfigOspfTypesOSPFTELINKTLVTYPE = 494048733
)

// Enum value maps for OpenconfigOspfTypesOSPFTELINKTLVTYPE.
var (
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_UNSET",
		41688158:  "OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_ADMIN_GROUP",
		81262405:  "OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_MAXIMUM_RESERVABLE_BANDWIDTH",
		237811802: "OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_UNRESERVED_BANDWIDTH",
		275089009: "OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_METRIC",
		357259331: "OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_MAXIMUM_BANDWIDTH",
		399771326: "OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_LOCAL_IP",
		464176934: "OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_ID",
		469648989: "OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_REMOTE_IP",
		494048733: "OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_TYPE",
	}
	OpenconfigOspfTypesOSPFTELINKTLVTYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_UNSET":                                0,
		"OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_ADMIN_GROUP":                  41688158,
		"OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_MAXIMUM_RESERVABLE_BANDWIDTH": 81262405,
		"OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_UNRESERVED_BANDWIDTH":         237811802,
		"OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_METRIC":                       275089009,
		"OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_MAXIMUM_BANDWIDTH":            357259331,
		"OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_LOCAL_IP":                     399771326,
		"OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_ID":                           464176934,
		"OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_REMOTE_IP":                    469648989,
		"OPENCONFIGOSPFTYPESOSPFTELINKTLVTYPE_TE_LINK_TYPE":                         494048733,
	}
)

func (x OpenconfigOspfTypesOSPFTELINKTLVTYPE) Enum() *OpenconfigOspfTypesOSPFTELINKTLVTYPE {
	p := new(OpenconfigOspfTypesOSPFTELINKTLVTYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFTELINKTLVTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFTELINKTLVTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[84].Descriptor()
}

func (OpenconfigOspfTypesOSPFTELINKTLVTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[84]
}

func (x OpenconfigOspfTypesOSPFTELINKTLVTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFTELINKTLVTYPE.Descriptor instead.
func (OpenconfigOspfTypesOSPFTELINKTLVTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{84}
}

// OpenconfigOspfTypesOSPFTELSATLVTYPE represents an enumerated type generated for the YANG identity OSPF_TE_LSA_TLV_TYPE.
type OpenconfigOspfTypesOSPFTELSATLVTYPE int32

const (
	OpenconfigOspfTypesOSPFTELSATLVTYPE_OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_UNSET                    OpenconfigOspfTypesOSPFTELSATLVTYPE = 0
	OpenconfigOspfTypesOSPFTELSATLVTYPE_OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_ROUTER_IPV6_ADDRESS   OpenconfigOspfTypesOSPFTELSATLVTYPE = 47313214
	OpenconfigOspfTypesOSPFTELSATLVTYPE_OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_NODE_ATTRIBUTE        OpenconfigOspfTypesOSPFTELSATLVTYPE = 60513351
	OpenconfigOspfTypesOSPFTELSATLVTYPE_OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_LINK                  OpenconfigOspfTypesOSPFTELSATLVTYPE = 105910866
	OpenconfigOspfTypesOSPFTELSATLVTYPE_OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_OPTICAL_NODE_PROPERTY OpenconfigOspfTypesOSPFTELSATLVTYPE = 237041647
	OpenconfigOspfTypesOSPFTELSATLVTYPE_OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_LINK_LOCAL            OpenconfigOspfTypesOSPFTELSATLVTYPE = 348906014
	OpenconfigOspfTypesOSPFTELSATLVTYPE_OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_ROUTER_ADDRESS        OpenconfigOspfTypesOSPFTELSATLVTYPE = 367832736
)

// Enum value maps for OpenconfigOspfTypesOSPFTELSATLVTYPE.
var (
	OpenconfigOspfTypesOSPFTELSATLVTYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_UNSET",
		47313214:  "OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_ROUTER_IPV6_ADDRESS",
		60513351:  "OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_NODE_ATTRIBUTE",
		105910866: "OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_LINK",
		237041647: "OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_OPTICAL_NODE_PROPERTY",
		348906014: "OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_LINK_LOCAL",
		367832736: "OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_ROUTER_ADDRESS",
	}
	OpenconfigOspfTypesOSPFTELSATLVTYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_UNSET":                    0,
		"OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_ROUTER_IPV6_ADDRESS":   47313214,
		"OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_NODE_ATTRIBUTE":        60513351,
		"OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_LINK":                  105910866,
		"OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_OPTICAL_NODE_PROPERTY": 237041647,
		"OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_LINK_LOCAL":            348906014,
		"OPENCONFIGOSPFTYPESOSPFTELSATLVTYPE_TE_ROUTER_ADDRESS":        367832736,
	}
)

func (x OpenconfigOspfTypesOSPFTELSATLVTYPE) Enum() *OpenconfigOspfTypesOSPFTELSATLVTYPE {
	p := new(OpenconfigOspfTypesOSPFTELSATLVTYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFTELSATLVTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFTELSATLVTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[85].Descriptor()
}

func (OpenconfigOspfTypesOSPFTELSATLVTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[85]
}

func (x OpenconfigOspfTypesOSPFTELSATLVTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFTELSATLVTYPE.Descriptor instead.
func (OpenconfigOspfTypesOSPFTELSATLVTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{85}
}

// OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE represents an enumerated type generated for the YANG identity OSPFV2_EXTENDED_LINK_SUBTLV_TYPE.
type OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE int32

const (
	OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTENDEDLINKSUBTLVTYPE_UNSET         OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE = 0
	OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTENDEDLINKSUBTLVTYPE_ADJACENCY_SID OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE = 334305683
)

// Enum value maps for OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE.
var (
	OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFV2EXTENDEDLINKSUBTLVTYPE_UNSET",
		334305683: "OPENCONFIGOSPFTYPESOSPFV2EXTENDEDLINKSUBTLVTYPE_ADJACENCY_SID",
	}
	OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFV2EXTENDEDLINKSUBTLVTYPE_UNSET":         0,
		"OPENCONFIGOSPFTYPESOSPFV2EXTENDEDLINKSUBTLVTYPE_ADJACENCY_SID": 334305683,
	}
)

func (x OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE) Enum() *OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE {
	p := new(OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[86].Descriptor()
}

func (OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[86]
}

func (x OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE.Descriptor instead.
func (OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{86}
}

// OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE represents an enumerated type generated for the YANG identity OSPFV2_EXTENDED_PREFIX_SID_LABEL_BINDING_SUBTLV_TYPE.
type OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE int32

const (
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_UNSET                  OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE = 0
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_ERO_PATH               OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE = 1829898
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_ERO_METRIC             OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE = 48923107
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_SID_MPLS_LABEL_BINDING OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE = 526744022
)

// Enum value maps for OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE.
var (
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_UNSET",
		1829898:   "OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_ERO_PATH",
		48923107:  "OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_ERO_METRIC",
		526744022: "OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_SID_MPLS_LABEL_BINDING",
	}
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_UNSET":                  0,
		"OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_ERO_PATH":               1829898,
		"OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_ERO_METRIC":             48923107,
		"OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE_SID_MPLS_LABEL_BINDING": 526744022,
	}
)

func (x OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE) Enum() *OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE {
	p := new(OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[87].Descriptor()
}

func (OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[87]
}

func (x OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE.Descriptor instead.
func (OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{87}
}

// OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE represents an enumerated type generated for the YANG identity OSPFV2_EXTENDED_PREFIX_SUBTLV_TYPE.
type OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE int32

const (
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_UNSET                 OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE = 0
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_SID_LABEL_BINDING     OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE = 2971965
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_EXTENDED_PREFIX_RANGE OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE = 203356488
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_PREFIX_SID            OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE = 237697073
)

// Enum value maps for OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE.
var (
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_UNSET",
		2971965:   "OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_SID_LABEL_BINDING",
		203356488: "OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_EXTENDED_PREFIX_RANGE",
		237697073: "OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_PREFIX_SID",
	}
	OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_UNSET":                 0,
		"OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_SID_LABEL_BINDING":     2971965,
		"OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_EXTENDED_PREFIX_RANGE": 203356488,
		"OPENCONFIGOSPFTYPESOSPFV2EXTENDEDPREFIXSUBTLVTYPE_PREFIX_SID":            237697073,
	}
)

func (x OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE) Enum() *OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE {
	p := new(OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[88].Descriptor()
}

func (OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[88]
}

func (x OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE.Descriptor instead.
func (OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{88}
}

// OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE represents an enumerated type generated for the YANG identity OSPFV2_EXTPREFIX_BINDING_ERO_PATH_SEGMENT_TYPE.
type OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE int32

const (
	OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_UNSET                        OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE = 0
	OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_IPV4_SEGMENT                 OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE = 340016298
	OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_OPENCONFIGOSPFTYPESOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_UNNUMBERED_INTERFACE_SEGMENT OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE = 502490798
)

// Enum value maps for OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE.
var (
	OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_UNSET",
		340016298: "OPENCONFIGOSPFTYPESOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_IPV4_SEGMENT",
		502490798: "OPENCONFIGOSPFTYPESOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_UNNUMBERED_INTERFACE_SEGMENT",
	}
	OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_UNSET":                        0,
		"OPENCONFIGOSPFTYPESOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_IPV4_SEGMENT":                 340016298,
		"OPENCONFIGOSPFTYPESOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE_UNNUMBERED_INTERFACE_SEGMENT": 502490798,
	}
)

func (x OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE) Enum() *OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE {
	p := new(OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[89].Descriptor()
}

func (OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[89]
}

func (x OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE.Descriptor instead.
func (OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{89}
}

// OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE represents an enumerated type generated for the YANG identity OSPFV2_ROUTER_LINK_TYPE.
type OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE int32

const (
	OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE_OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_UNSET                OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE = 0
	OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE_OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_STUB_NETWORK_LINK    OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE = 94378445
	OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE_OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_VIRTUAL_LINK         OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE = 172444033
	OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE_OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_POINT_TO_POINT_LINK  OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE = 244608719
	OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE_OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_TRANSIT_NETWORK_LINK OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE = 516096852
)

// Enum value maps for OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE.
var (
	OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_UNSET",
		94378445:  "OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_STUB_NETWORK_LINK",
		172444033: "OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_VIRTUAL_LINK",
		244608719: "OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_POINT_TO_POINT_LINK",
		516096852: "OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_TRANSIT_NETWORK_LINK",
	}
	OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_UNSET":                0,
		"OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_STUB_NETWORK_LINK":    94378445,
		"OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_VIRTUAL_LINK":         172444033,
		"OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_POINT_TO_POINT_LINK":  244608719,
		"OPENCONFIGOSPFTYPESOSPFV2ROUTERLINKTYPE_TRANSIT_NETWORK_LINK": 516096852,
	}
)

func (x OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE) Enum() *OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE {
	p := new(OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[90].Descriptor()
}

func (OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[90]
}

func (x OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE.Descriptor instead.
func (OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{90}
}

// OpenconfigOspfTypesRILSATLVTYPES represents an enumerated type generated for the YANG identity RI_LSA_TLV_TYPES.
type OpenconfigOspfTypesRILSATLVTYPES int32

const (
	OpenconfigOspfTypesRILSATLVTYPES_OPENCONFIGOSPFTYPESRILSATLVTYPES_UNSET                         OpenconfigOspfTypesRILSATLVTYPES = 0
	OpenconfigOspfTypesRILSATLVTYPES_OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_NODE_ADMIN_TAG             OpenconfigOspfTypesRILSATLVTYPES = 97947365
	OpenconfigOspfTypesRILSATLVTYPES_OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_FUNCTIONAL_CAPABILITIES    OpenconfigOspfTypesRILSATLVTYPES = 121815788
	OpenconfigOspfTypesRILSATLVTYPES_OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_INFORMATIONAL_CAPABILITIES OpenconfigOspfTypesRILSATLVTYPES = 231438658
	OpenconfigOspfTypesRILSATLVTYPES_OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_SR_ALGORITHM               OpenconfigOspfTypesRILSATLVTYPES = 317127065
	OpenconfigOspfTypesRILSATLVTYPES_OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_SR_SID_LABEL_RANGE         OpenconfigOspfTypesRILSATLVTYPES = 397406623
)

// Enum value maps for OpenconfigOspfTypesRILSATLVTYPES.
var (
	OpenconfigOspfTypesRILSATLVTYPES_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESRILSATLVTYPES_UNSET",
		97947365:  "OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_NODE_ADMIN_TAG",
		121815788: "OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_FUNCTIONAL_CAPABILITIES",
		231438658: "OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_INFORMATIONAL_CAPABILITIES",
		317127065: "OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_SR_ALGORITHM",
		397406623: "OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_SR_SID_LABEL_RANGE",
	}
	OpenconfigOspfTypesRILSATLVTYPES_value = map[string]int32{
		"OPENCONFIGOSPFTYPESRILSATLVTYPES_UNSET":                         0,
		"OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_NODE_ADMIN_TAG":             97947365,
		"OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_FUNCTIONAL_CAPABILITIES":    121815788,
		"OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_INFORMATIONAL_CAPABILITIES": 231438658,
		"OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_SR_ALGORITHM":               317127065,
		"OPENCONFIGOSPFTYPESRILSATLVTYPES_RI_SR_SID_LABEL_RANGE":         397406623,
	}
)

func (x OpenconfigOspfTypesRILSATLVTYPES) Enum() *OpenconfigOspfTypesRILSATLVTYPES {
	p := new(OpenconfigOspfTypesRILSATLVTYPES)
	*p = x
	return p
}

func (x OpenconfigOspfTypesRILSATLVTYPES) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesRILSATLVTYPES) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[91].Descriptor()
}

func (OpenconfigOspfTypesRILSATLVTYPES) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[91]
}

func (x OpenconfigOspfTypesRILSATLVTYPES) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesRILSATLVTYPES.Descriptor instead.
func (OpenconfigOspfTypesRILSATLVTYPES) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{91}
}

// OpenconfigOspfTypesROUTERLSATYPES represents an enumerated type generated for the YANG identity ROUTER_LSA_TYPES.
type OpenconfigOspfTypesROUTERLSATYPES int32

const (
	OpenconfigOspfTypesROUTERLSATYPES_OPENCONFIGOSPFTYPESROUTERLSATYPES_UNSET                      OpenconfigOspfTypesROUTERLSATYPES = 0
	OpenconfigOspfTypesROUTERLSATYPES_OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_STUB_NETWORK    OpenconfigOspfTypesROUTERLSATYPES = 67415949
	OpenconfigOspfTypesROUTERLSATYPES_OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_P2P             OpenconfigOspfTypesROUTERLSATYPES = 75093792
	OpenconfigOspfTypesROUTERLSATYPES_OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_TRANSIT_NETWORK OpenconfigOspfTypesROUTERLSATYPES = 193866836
	OpenconfigOspfTypesROUTERLSATYPES_OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_VIRTUAL_LINK    OpenconfigOspfTypesROUTERLSATYPES = 347259778
)

// Enum value maps for OpenconfigOspfTypesROUTERLSATYPES.
var (
	OpenconfigOspfTypesROUTERLSATYPES_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESROUTERLSATYPES_UNSET",
		67415949:  "OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_STUB_NETWORK",
		75093792:  "OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_P2P",
		193866836: "OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_TRANSIT_NETWORK",
		347259778: "OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_VIRTUAL_LINK",
	}
	OpenconfigOspfTypesROUTERLSATYPES_value = map[string]int32{
		"OPENCONFIGOSPFTYPESROUTERLSATYPES_UNSET":                      0,
		"OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_STUB_NETWORK":    67415949,
		"OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_P2P":             75093792,
		"OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_TRANSIT_NETWORK": 193866836,
		"OPENCONFIGOSPFTYPESROUTERLSATYPES_ROUTER_LSA_VIRTUAL_LINK":    347259778,
	}
)

func (x OpenconfigOspfTypesROUTERLSATYPES) Enum() *OpenconfigOspfTypesROUTERLSATYPES {
	p := new(OpenconfigOspfTypesROUTERLSATYPES)
	*p = x
	return p
}

func (x OpenconfigOspfTypesROUTERLSATYPES) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesROUTERLSATYPES) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[92].Descriptor()
}

func (OpenconfigOspfTypesROUTERLSATYPES) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[92]
}

func (x OpenconfigOspfTypesROUTERLSATYPES) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesROUTERLSATYPES.Descriptor instead.
func (OpenconfigOspfTypesROUTERLSATYPES) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{92}
}

// OpenconfigOspfTypesSRALGORITHM represents an enumerated type generated for the YANG identity SR_ALGORITHM.
type OpenconfigOspfTypesSRALGORITHM int32

const (
	OpenconfigOspfTypesSRALGORITHM_OPENCONFIGOSPFTYPESSRALGORITHM_UNSET      OpenconfigOspfTypesSRALGORITHM = 0
	OpenconfigOspfTypesSRALGORITHM_OPENCONFIGOSPFTYPESSRALGORITHM_SPF        OpenconfigOspfTypesSRALGORITHM = 245503321
	OpenconfigOspfTypesSRALGORITHM_OPENCONFIGOSPFTYPESSRALGORITHM_STRICT_SPF OpenconfigOspfTypesSRALGORITHM = 435702079
)

// Enum value maps for OpenconfigOspfTypesSRALGORITHM.
var (
	OpenconfigOspfTypesSRALGORITHM_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESSRALGORITHM_UNSET",
		245503321: "OPENCONFIGOSPFTYPESSRALGORITHM_SPF",
		435702079: "OPENCONFIGOSPFTYPESSRALGORITHM_STRICT_SPF",
	}
	OpenconfigOspfTypesSRALGORITHM_value = map[string]int32{
		"OPENCONFIGOSPFTYPESSRALGORITHM_UNSET":      0,
		"OPENCONFIGOSPFTYPESSRALGORITHM_SPF":        245503321,
		"OPENCONFIGOSPFTYPESSRALGORITHM_STRICT_SPF": 435702079,
	}
)

func (x OpenconfigOspfTypesSRALGORITHM) Enum() *OpenconfigOspfTypesSRALGORITHM {
	p := new(OpenconfigOspfTypesSRALGORITHM)
	*p = x
	return p
}

func (x OpenconfigOspfTypesSRALGORITHM) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesSRALGORITHM) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[93].Descriptor()
}

func (OpenconfigOspfTypesSRALGORITHM) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[93]
}

func (x OpenconfigOspfTypesSRALGORITHM) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesSRALGORITHM.Descriptor instead.
func (OpenconfigOspfTypesSRALGORITHM) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{93}
}

// OpenconfigOspfTypesSrSidType represents an enumerated type generated for the YANG enumerated type sr-sid-type.
type OpenconfigOspfTypesSrSidType int32

const (
	OpenconfigOspfTypesSrSidType_OPENCONFIGOSPFTYPESSRSIDTYPE_UNSET OpenconfigOspfTypesSrSidType = 0
	OpenconfigOspfTypesSrSidType_OPENCONFIGOSPFTYPESSRSIDTYPE_LABEL OpenconfigOspfTypesSrSidType = 1
	OpenconfigOspfTypesSrSidType_OPENCONFIGOSPFTYPESSRSIDTYPE_SID   OpenconfigOspfTypesSrSidType = 2
)

// Enum value maps for OpenconfigOspfTypesSrSidType.
var (
	OpenconfigOspfTypesSrSidType_name = map[int32]string{
		0: "OPENCONFIGOSPFTYPESSRSIDTYPE_UNSET",
		1: "OPENCONFIGOSPFTYPESSRSIDTYPE_LABEL",
		2: "OPENCONFIGOSPFTYPESSRSIDTYPE_SID",
	}
	OpenconfigOspfTypesSrSidType_value = map[string]int32{
		"OPENCONFIGOSPFTYPESSRSIDTYPE_UNSET": 0,
		"OPENCONFIGOSPFTYPESSRSIDTYPE_LABEL": 1,
		"OPENCONFIGOSPFTYPESSRSIDTYPE_SID":   2,
	}
)

func (x OpenconfigOspfTypesSrSidType) Enum() *OpenconfigOspfTypesSrSidType {
	p := new(OpenconfigOspfTypesSrSidType)
	*p = x
	return p
}

func (x OpenconfigOspfTypesSrSidType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesSrSidType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[94].Descriptor()
}

func (OpenconfigOspfTypesSrSidType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[94]
}

func (x OpenconfigOspfTypesSrSidType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesSrSidType.Descriptor instead.
func (OpenconfigOspfTypesSrSidType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{94}
}

// OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE represents an enumerated type generated for the YANG identity TE_NODE_ATTRIBUTE_TLV_TYPE.
type OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE int32

const (
	OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE_OPENCONFIGOSPFTYPESTENODEATTRIBUTETLVTYPE_UNSET                   OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE = 0
	OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE_OPENCONFIGOSPFTYPESTENODEATTRIBUTETLVTYPE_NODE_IPV4_LOCAL_ADDRESS OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE = 171010107
	OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE_OPENCONFIGOSPFTYPESTENODEATTRIBUTETLVTYPE_NODE_IPV6_LOCAL_ADDRESS OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE = 183121285
)

// Enum value maps for OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE.
var (
	OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE_name = map[int32]string{
		0:         "OPENCONFIGOSPFTYPESTENODEATTRIBUTETLVTYPE_UNSET",
		171010107: "OPENCONFIGOSPFTYPESTENODEATTRIBUTETLVTYPE_NODE_IPV4_LOCAL_ADDRESS",
		183121285: "OPENCONFIGOSPFTYPESTENODEATTRIBUTETLVTYPE_NODE_IPV6_LOCAL_ADDRESS",
	}
	OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE_value = map[string]int32{
		"OPENCONFIGOSPFTYPESTENODEATTRIBUTETLVTYPE_UNSET":                   0,
		"OPENCONFIGOSPFTYPESTENODEATTRIBUTETLVTYPE_NODE_IPV4_LOCAL_ADDRESS": 171010107,
		"OPENCONFIGOSPFTYPESTENODEATTRIBUTETLVTYPE_NODE_IPV6_LOCAL_ADDRESS": 183121285,
	}
)

func (x OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE) Enum() *OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE {
	p := new(OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE)
	*p = x
	return p
}

func (x OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[95].Descriptor()
}

func (OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[95]
}

func (x OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE.Descriptor instead.
func (OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{95}
}

// OpenconfigPacketMatchTypesETHERTYPE represents an enumerated type generated for the YANG identity ETHERTYPE.
type OpenconfigPacketMatchTypesETHERTYPE int32

const (
	OpenconfigPacketMatchTypesETHERTYPE_OPENCONFIGPACKETMATCHTYPESETHERTYPE_UNSET          OpenconfigPacketMatchTypesETHERTYPE = 0
	OpenconfigPacketMatchTypesETHERTYPE_OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_ROCE OpenconfigPacketMatchTypesETHERTYPE = 14086673
	OpenconfigPacketMatchTypesETHERTYPE_OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_LLDP OpenconfigPacketMatchTypesETHERTYPE = 63862784
	OpenconfigPacketMatchTypesETHERTYPE_OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_IPV4 OpenconfigPacketMatchTypesETHERTYPE = 140115701
	OpenconfigPacketMatchTypesETHERTYPE_OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_IPV6 OpenconfigPacketMatchTypesETHERTYPE = 140115703
	OpenconfigPacketMatchTypesETHERTYPE_OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_ARP  OpenconfigPacketMatchTypesETHERTYPE = 383275775
	OpenconfigPacketMatchTypesETHERTYPE_OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_MPLS OpenconfigPacketMatchTypesETHERTYPE = 427890540
	OpenconfigPacketMatchTypesETHERTYPE_OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_VLAN OpenconfigPacketMatchTypesETHERTYPE = 522848603
)

// Enum value maps for OpenconfigPacketMatchTypesETHERTYPE.
var (
	OpenconfigPacketMatchTypesETHERTYPE_name = map[int32]string{
		0:         "OPENCONFIGPACKETMATCHTYPESETHERTYPE_UNSET",
		14086673:  "OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_ROCE",
		63862784:  "OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_LLDP",
		140115701: "OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_IPV4",
		140115703: "OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_IPV6",
		383275775: "OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_ARP",
		427890540: "OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_MPLS",
		522848603: "OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_VLAN",
	}
	OpenconfigPacketMatchTypesETHERTYPE_value = map[string]int32{
		"OPENCONFIGPACKETMATCHTYPESETHERTYPE_UNSET":          0,
		"OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_ROCE": 14086673,
		"OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_LLDP": 63862784,
		"OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_IPV4": 140115701,
		"OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_IPV6": 140115703,
		"OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_ARP":  383275775,
		"OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_MPLS": 427890540,
		"OPENCONFIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_VLAN": 522848603,
	}
)

func (x OpenconfigPacketMatchTypesETHERTYPE) Enum() *OpenconfigPacketMatchTypesETHERTYPE {
	p := new(OpenconfigPacketMatchTypesETHERTYPE)
	*p = x
	return p
}

func (x OpenconfigPacketMatchTypesETHERTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPacketMatchTypesETHERTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[96].Descriptor()
}

func (OpenconfigPacketMatchTypesETHERTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[96]
}

func (x OpenconfigPacketMatchTypesETHERTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPacketMatchTypesETHERTYPE.Descriptor instead.
func (OpenconfigPacketMatchTypesETHERTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{96}
}

// OpenconfigPacketMatchTypesIPPROTOCOL represents an enumerated type generated for the YANG identity IP_PROTOCOL.
type OpenconfigPacketMatchTypesIPPROTOCOL int32

const (
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_UNSET    OpenconfigPacketMatchTypesIPPROTOCOL = 0
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_GRE   OpenconfigPacketMatchTypesIPPROTOCOL = 24050007
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_TCP   OpenconfigPacketMatchTypesIPPROTOCOL = 38721802
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_L2TP  OpenconfigPacketMatchTypesIPPROTOCOL = 81903923
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_AUTH  OpenconfigPacketMatchTypesIPPROTOCOL = 203904199
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_PIM   OpenconfigPacketMatchTypesIPPROTOCOL = 272904165
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_IN_IP OpenconfigPacketMatchTypesIPPROTOCOL = 309674436
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_IGMP  OpenconfigPacketMatchTypesIPPROTOCOL = 512271866
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_ICMP  OpenconfigPacketMatchTypesIPPROTOCOL = 512860246
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_UDP   OpenconfigPacketMatchTypesIPPROTOCOL = 525100026
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_RSVP  OpenconfigPacketMatchTypesIPPROTOCOL = 530070378
)

// Enum value maps for OpenconfigPacketMatchTypesIPPROTOCOL.
var (
	OpenconfigPacketMatchTypesIPPROTOCOL_name = map[int32]string{
		0:         "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_UNSET",
		24050007:  "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_GRE",
		38721802:  "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_TCP",
		81903923:  "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_L2TP",
		203904199: "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_AUTH",
		272904165: "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_PIM",
		309674436: "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_IN_IP",
		512271866: "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_IGMP",
		512860246: "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_ICMP",
		525100026: "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_UDP",
		530070378: "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_RSVP",
	}
	OpenconfigPacketMatchTypesIPPROTOCOL_value = map[string]int32{
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_UNSET":    0,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_GRE":   24050007,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_TCP":   38721802,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_L2TP":  81903923,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_AUTH":  203904199,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_PIM":   272904165,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_IN_IP": 309674436,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_IGMP":  512271866,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_ICMP":  512860246,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_UDP":   525100026,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_RSVP":  530070378,
	}
)

func (x OpenconfigPacketMatchTypesIPPROTOCOL) Enum() *OpenconfigPacketMatchTypesIPPROTOCOL {
	p := new(OpenconfigPacketMatchTypesIPPROTOCOL)
	*p = x
	return p
}

func (x OpenconfigPacketMatchTypesIPPROTOCOL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPacketMatchTypesIPPROTOCOL) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[97].Descriptor()
}

func (OpenconfigPacketMatchTypesIPPROTOCOL) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[97]
}

func (x OpenconfigPacketMatchTypesIPPROTOCOL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPacketMatchTypesIPPROTOCOL.Descriptor instead.
func (OpenconfigPacketMatchTypesIPPROTOCOL) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{97}
}

// OpenconfigPacketMatchTypesPortNumRangeEnum represents an enumerated type generated for the YANG enumerated type port-num-range.
type OpenconfigPacketMatchTypesPortNumRangeEnum int32

const (
	OpenconfigPacketMatchTypesPortNumRangeEnum_OPENCONFIGPACKETMATCHTYPESPORTNUMRANGEENUM_UNSET OpenconfigPacketMatchTypesPortNumRangeEnum = 0
	OpenconfigPacketMatchTypesPortNumRangeEnum_OPENCONFIGPACKETMATCHTYPESPORTNUMRANGEENUM_ANY   OpenconfigPacketMatchTypesPortNumRangeEnum = 1
)

// Enum value maps for OpenconfigPacketMatchTypesPortNumRangeEnum.
var (
	OpenconfigPacketMatchTypesPortNumRangeEnum_name = map[int32]string{
		0: "OPENCONFIGPACKETMATCHTYPESPORTNUMRANGEENUM_UNSET",
		1: "OPENCONFIGPACKETMATCHTYPESPORTNUMRANGEENUM_ANY",
	}
	OpenconfigPacketMatchTypesPortNumRangeEnum_value = map[string]int32{
		"OPENCONFIGPACKETMATCHTYPESPORTNUMRANGEENUM_UNSET": 0,
		"OPENCONFIGPACKETMATCHTYPESPORTNUMRANGEENUM_ANY":   1,
	}
)

func (x OpenconfigPacketMatchTypesPortNumRangeEnum) Enum() *OpenconfigPacketMatchTypesPortNumRangeEnum {
	p := new(OpenconfigPacketMatchTypesPortNumRangeEnum)
	*p = x
	return p
}

func (x OpenconfigPacketMatchTypesPortNumRangeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPacketMatchTypesPortNumRangeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[98].Descriptor()
}

func (OpenconfigPacketMatchTypesPortNumRangeEnum) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[98]
}

func (x OpenconfigPacketMatchTypesPortNumRangeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPacketMatchTypesPortNumRangeEnum.Descriptor instead.
func (OpenconfigPacketMatchTypesPortNumRangeEnum) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{98}
}

// OpenconfigPacketMatchTypesTCPFLAGS represents an enumerated type generated for the YANG identity TCP_FLAGS.
type OpenconfigPacketMatchTypesTCPFLAGS int32

const (
	OpenconfigPacketMatchTypesTCPFLAGS_OPENCONFIGPACKETMATCHTYPESTCPFLAGS_UNSET   OpenconfigPacketMatchTypesTCPFLAGS = 0
	OpenconfigPacketMatchTypesTCPFLAGS_OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_CWR OpenconfigPacketMatchTypesTCPFLAGS = 7246418
	OpenconfigPacketMatchTypesTCPFLAGS_OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_ACK OpenconfigPacketMatchTypesTCPFLAGS = 74689745
	OpenconfigPacketMatchTypesTCPFLAGS_OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_RST OpenconfigPacketMatchTypesTCPFLAGS = 76795313
	OpenconfigPacketMatchTypesTCPFLAGS_OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_ECE OpenconfigPacketMatchTypesTCPFLAGS = 208309299
	OpenconfigPacketMatchTypesTCPFLAGS_OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_PSH OpenconfigPacketMatchTypesTCPFLAGS = 211387811
	OpenconfigPacketMatchTypesTCPFLAGS_OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_SYN OpenconfigPacketMatchTypesTCPFLAGS = 244795956
	OpenconfigPacketMatchTypesTCPFLAGS_OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_FIN OpenconfigPacketMatchTypesTCPFLAGS = 308430701
	OpenconfigPacketMatchTypesTCPFLAGS_OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_URG OpenconfigPacketMatchTypesTCPFLAGS = 496075790
)

// Enum value maps for OpenconfigPacketMatchTypesTCPFLAGS.
var (
	OpenconfigPacketMatchTypesTCPFLAGS_name = map[int32]string{
		0:         "OPENCONFIGPACKETMATCHTYPESTCPFLAGS_UNSET",
		7246418:   "OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_CWR",
		74689745:  "OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_ACK",
		76795313:  "OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_RST",
		208309299: "OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_ECE",
		211387811: "OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_PSH",
		244795956: "OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_SYN",
		308430701: "OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_FIN",
		496075790: "OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_URG",
	}
	OpenconfigPacketMatchTypesTCPFLAGS_value = map[string]int32{
		"OPENCONFIGPACKETMATCHTYPESTCPFLAGS_UNSET":   0,
		"OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_CWR": 7246418,
		"OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_ACK": 74689745,
		"OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_RST": 76795313,
		"OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_ECE": 208309299,
		"OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_PSH": 211387811,
		"OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_SYN": 244795956,
		"OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_FIN": 308430701,
		"OPENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_URG": 496075790,
	}
)

func (x OpenconfigPacketMatchTypesTCPFLAGS) Enum() *OpenconfigPacketMatchTypesTCPFLAGS {
	p := new(OpenconfigPacketMatchTypesTCPFLAGS)
	*p = x
	return p
}

func (x OpenconfigPacketMatchTypesTCPFLAGS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPacketMatchTypesTCPFLAGS) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[99].Descriptor()
}

func (OpenconfigPacketMatchTypesTCPFLAGS) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[99]
}

func (x OpenconfigPacketMatchTypesTCPFLAGS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPacketMatchTypesTCPFLAGS.Descriptor instead.
func (OpenconfigPacketMatchTypesTCPFLAGS) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{99}
}

// OpenconfigPcepLspControlType represents an enumerated type generated for the YANG enumerated type lsp-control-type.
type OpenconfigPcepLspControlType int32

const (
	OpenconfigPcepLspControlType_OPENCONFIGPCEPLSPCONTROLTYPE_UNSET           OpenconfigPcepLspControlType = 0
	OpenconfigPcepLspControlType_OPENCONFIGPCEPLSPCONTROLTYPE_PCE_DELEGATED   OpenconfigPcepLspControlType = 1
	OpenconfigPcepLspControlType_OPENCONFIGPCEPLSPCONTROLTYPE_PCC_CONTROLLED  OpenconfigPcepLspControlType = 2
	OpenconfigPcepLspControlType_OPENCONFIGPCEPLSPCONTROLTYPE_PCC_REPORT_ONLY OpenconfigPcepLspControlType = 3
)

// Enum value maps for OpenconfigPcepLspControlType.
var (
	OpenconfigPcepLspControlType_name = map[int32]string{
		0: "OPENCONFIGPCEPLSPCONTROLTYPE_UNSET",
		1: "OPENCONFIGPCEPLSPCONTROLTYPE_PCE_DELEGATED",
		2: "OPENCONFIGPCEPLSPCONTROLTYPE_PCC_CONTROLLED",
		3: "OPENCONFIGPCEPLSPCONTROLTYPE_PCC_REPORT_ONLY",
	}
	OpenconfigPcepLspControlType_value = map[string]int32{
		"OPENCONFIGPCEPLSPCONTROLTYPE_UNSET":           0,
		"OPENCONFIGPCEPLSPCONTROLTYPE_PCE_DELEGATED":   1,
		"OPENCONFIGPCEPLSPCONTROLTYPE_PCC_CONTROLLED":  2,
		"OPENCONFIGPCEPLSPCONTROLTYPE_PCC_REPORT_ONLY": 3,
	}
)

func (x OpenconfigPcepLspControlType) Enum() *OpenconfigPcepLspControlType {
	p := new(OpenconfigPcepLspControlType)
	*p = x
	return p
}

func (x OpenconfigPcepLspControlType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPcepLspControlType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[100].Descriptor()
}

func (OpenconfigPcepLspControlType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[100]
}

func (x OpenconfigPcepLspControlType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPcepLspControlType.Descriptor instead.
func (OpenconfigPcepLspControlType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{100}
}

// OpenconfigPcepPceModeType represents an enumerated type generated for the YANG enumerated type pce-mode-type.
type OpenconfigPcepPceModeType int32

const (
	OpenconfigPcepPceModeType_OPENCONFIGPCEPPCEMODETYPE_UNSET            OpenconfigPcepPceModeType = 0
	OpenconfigPcepPceModeType_OPENCONFIGPCEPPCEMODETYPE_STATELESS        OpenconfigPcepPceModeType = 1
	OpenconfigPcepPceModeType_OPENCONFIGPCEPPCEMODETYPE_STATEFUL_PASSIVE OpenconfigPcepPceModeType = 2
	OpenconfigPcepPceModeType_OPENCONFIGPCEPPCEMODETYPE_STATEFUL_ACTIVE  OpenconfigPcepPceModeType = 3
)

// Enum value maps for OpenconfigPcepPceModeType.
var (
	OpenconfigPcepPceModeType_name = map[int32]string{
		0: "OPENCONFIGPCEPPCEMODETYPE_UNSET",
		1: "OPENCONFIGPCEPPCEMODETYPE_STATELESS",
		2: "OPENCONFIGPCEPPCEMODETYPE_STATEFUL_PASSIVE",
		3: "OPENCONFIGPCEPPCEMODETYPE_STATEFUL_ACTIVE",
	}
	OpenconfigPcepPceModeType_value = map[string]int32{
		"OPENCONFIGPCEPPCEMODETYPE_UNSET":            0,
		"OPENCONFIGPCEPPCEMODETYPE_STATELESS":        1,
		"OPENCONFIGPCEPPCEMODETYPE_STATEFUL_PASSIVE": 2,
		"OPENCONFIGPCEPPCEMODETYPE_STATEFUL_ACTIVE":  3,
	}
)

func (x OpenconfigPcepPceModeType) Enum() *OpenconfigPcepPceModeType {
	p := new(OpenconfigPcepPceModeType)
	*p = x
	return p
}

func (x OpenconfigPcepPceModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPcepPceModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[101].Descriptor()
}

func (OpenconfigPcepPceModeType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[101]
}

func (x OpenconfigPcepPceModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPcepPceModeType.Descriptor instead.
func (OpenconfigPcepPceModeType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{101}
}

// OpenconfigPimTypesPIMMODE represents an enumerated type generated for the YANG identity PIM_MODE.
type OpenconfigPimTypesPIMMODE int32

const (
	OpenconfigPimTypesPIMMODE_OPENCONFIGPIMTYPESPIMMODE_UNSET           OpenconfigPimTypesPIMMODE = 0
	OpenconfigPimTypesPIMMODE_OPENCONFIGPIMTYPESPIMMODE_PIM_MODE_DENSE  OpenconfigPimTypesPIMMODE = 286716321
	OpenconfigPimTypesPIMMODE_OPENCONFIGPIMTYPESPIMMODE_PIM_MODE_SPARSE OpenconfigPimTypesPIMMODE = 535294624
)

// Enum value maps for OpenconfigPimTypesPIMMODE.
var (
	OpenconfigPimTypesPIMMODE_name = map[int32]string{
		0:         "OPENCONFIGPIMTYPESPIMMODE_UNSET",
		286716321: "OPENCONFIGPIMTYPESPIMMODE_PIM_MODE_DENSE",
		535294624: "OPENCONFIGPIMTYPESPIMMODE_PIM_MODE_SPARSE",
	}
	OpenconfigPimTypesPIMMODE_value = map[string]int32{
		"OPENCONFIGPIMTYPESPIMMODE_UNSET":           0,
		"OPENCONFIGPIMTYPESPIMMODE_PIM_MODE_DENSE":  286716321,
		"OPENCONFIGPIMTYPESPIMMODE_PIM_MODE_SPARSE": 535294624,
	}
)

func (x OpenconfigPimTypesPIMMODE) Enum() *OpenconfigPimTypesPIMMODE {
	p := new(OpenconfigPimTypesPIMMODE)
	*p = x
	return p
}

func (x OpenconfigPimTypesPIMMODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPimTypesPIMMODE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[102].Descriptor()
}

func (OpenconfigPimTypesPIMMODE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[102]
}

func (x OpenconfigPimTypesPIMMODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPimTypesPIMMODE.Descriptor instead.
func (OpenconfigPimTypesPIMMODE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{102}
}

// OpenconfigPlatformTypesCOMPONENTOPERSTATUS represents an enumerated type generated for the YANG identity COMPONENT_OPER_STATUS.
type OpenconfigPlatformTypesCOMPONENTOPERSTATUS int32

const (
	OpenconfigPlatformTypesCOMPONENTOPERSTATUS_OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_UNSET    OpenconfigPlatformTypesCOMPONENTOPERSTATUS = 0
	OpenconfigPlatformTypesCOMPONENTOPERSTATUS_OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_INACTIVE OpenconfigPlatformTypesCOMPONENTOPERSTATUS = 66232085
	OpenconfigPlatformTypesCOMPONENTOPERSTATUS_OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_ACTIVE   OpenconfigPlatformTypesCOMPONENTOPERSTATUS = 350531364
	OpenconfigPlatformTypesCOMPONENTOPERSTATUS_OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_DISABLED OpenconfigPlatformTypesCOMPONENTOPERSTATUS = 449140422
)

// Enum value maps for OpenconfigPlatformTypesCOMPONENTOPERSTATUS.
var (
	OpenconfigPlatformTypesCOMPONENTOPERSTATUS_name = map[int32]string{
		0:         "OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_UNSET",
		66232085:  "OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_INACTIVE",
		350531364: "OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_ACTIVE",
		449140422: "OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_DISABLED",
	}
	OpenconfigPlatformTypesCOMPONENTOPERSTATUS_value = map[string]int32{
		"OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_UNSET":    0,
		"OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_INACTIVE": 66232085,
		"OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_ACTIVE":   350531364,
		"OPENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS_DISABLED": 449140422,
	}
)

func (x OpenconfigPlatformTypesCOMPONENTOPERSTATUS) Enum() *OpenconfigPlatformTypesCOMPONENTOPERSTATUS {
	p := new(OpenconfigPlatformTypesCOMPONENTOPERSTATUS)
	*p = x
	return p
}

func (x OpenconfigPlatformTypesCOMPONENTOPERSTATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPlatformTypesCOMPONENTOPERSTATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[103].Descriptor()
}

func (OpenconfigPlatformTypesCOMPONENTOPERSTATUS) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[103]
}

func (x OpenconfigPlatformTypesCOMPONENTOPERSTATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPlatformTypesCOMPONENTOPERSTATUS.Descriptor instead.
func (OpenconfigPlatformTypesCOMPONENTOPERSTATUS) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{103}
}

// OpenconfigPlatformTypesCOMPONENTREBOOTREASON represents an enumerated type generated for the YANG identity COMPONENT_REBOOT_REASON.
type OpenconfigPlatformTypesCOMPONENTREBOOTREASON int32

const (
	OpenconfigPlatformTypesCOMPONENTREBOOTREASON_OPENCONFIGPLATFORMTYPESCOMPONENTREBOOTREASON_UNSET                 OpenconfigPlatformTypesCOMPONENTREBOOTREASON = 0
	OpenconfigPlatformTypesCOMPONENTREBOOTREASON_OPENCONFIGPLATFORMTYPESCOMPONENTREBOOTREASON_REBOOT_POWER_FAILURE  OpenconfigPlatformTypesCOMPONENTREBOOTREASON = 242089167
	OpenconfigPlatformTypesCOMPONENTREBOOTREASON_OPENCONFIGPLATFORMTYPESCOMPONENTREBOOTREASON_REBOOT_CRITICAL_ERROR OpenconfigPlatformTypesCOMPONENTREBOOTREASON = 298505285
	OpenconfigPlatformTypesCOMPONENTREBOOTREASON_OPENCONFIGPLATFORMTYPESCOMPONENTREBOOTREASON_REBOOT_USER_INITIATED OpenconfigPlatformTypesCOMPONENTREBOOTREASON = 399832126
)

// Enum value maps for OpenconfigPlatformTypesCOMPONENTREBOOTREASON.
var (
	OpenconfigPlatformTypesCOMPONENTREBOOTREASON_name = map[int32]string{
		0:         "OPENCONFIGPLATFORMTYPESCOMPONENTREBOOTREASON_UNSET",
		242089167: "OPENCONFIGPLATFORMTYPESCOMPONENTREBOOTREASON_REBOOT_POWER_FAILURE",
		298505285: "OPENCONFIGPLATFORMTYPESCOMPONENTREBOOTREASON_REBOOT_CRITICAL_ERROR",
		399832126: "OPENCONFIGPLATFORMTYPESCOMPONENTREBOOTREASON_REBOOT_USER_INITIATED",
	}
	OpenconfigPlatformTypesCOMPONENTREBOOTREASON_value = map[string]int32{
		"OPENCONFIGPLATFORMTYPESCOMPONENTREBOOTREASON_UNSET":                 0,
		"OPENCONFIGPLATFORMTYPESCOMPONENTREBOOTREASON_REBOOT_POWER_FAILURE":  242089167,
		"OPENCONFIGPLATFORMTYPESCOMPONENTREBOOTREASON_REBOOT_CRITICAL_ERROR": 298505285,
		"OPENCONFIGPLATFORMTYPESCOMPONENTREBOOTREASON_REBOOT_USER_INITIATED": 399832126,
	}
)

func (x OpenconfigPlatformTypesCOMPONENTREBOOTREASON) Enum() *OpenconfigPlatformTypesCOMPONENTREBOOTREASON {
	p := new(OpenconfigPlatformTypesCOMPONENTREBOOTREASON)
	*p = x
	return p
}

func (x OpenconfigPlatformTypesCOMPONENTREBOOTREASON) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPlatformTypesCOMPONENTREBOOTREASON) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[104].Descriptor()
}

func (OpenconfigPlatformTypesCOMPONENTREBOOTREASON) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[104]
}

func (x OpenconfigPlatformTypesCOMPONENTREBOOTREASON) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPlatformTypesCOMPONENTREBOOTREASON.Descriptor instead.
func (OpenconfigPlatformTypesCOMPONENTREBOOTREASON) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{104}
}

// OpenconfigPlatformTypesComponentRedundantRole represents an enumerated type generated for the YANG enumerated type component-redundant-role.
type OpenconfigPlatformTypesComponentRedundantRole int32

const (
	OpenconfigPlatformTypesComponentRedundantRole_OPENCONFIGPLATFORMTYPESCOMPONENTREDUNDANTROLE_UNSET     OpenconfigPlatformTypesComponentRedundantRole = 0
	OpenconfigPlatformTypesComponentRedundantRole_OPENCONFIGPLATFORMTYPESCOMPONENTREDUNDANTROLE_PRIMARY   OpenconfigPlatformTypesComponentRedundantRole = 1
	OpenconfigPlatformTypesComponentRedundantRole_OPENCONFIGPLATFORMTYPESCOMPONENTREDUNDANTROLE_SECONDARY OpenconfigPlatformTypesComponentRedundantRole = 2
)

// Enum value maps for OpenconfigPlatformTypesComponentRedundantRole.
var (
	OpenconfigPlatformTypesComponentRedundantRole_name = map[int32]string{
		0: "OPENCONFIGPLATFORMTYPESCOMPONENTREDUNDANTROLE_UNSET",
		1: "OPENCONFIGPLATFORMTYPESCOMPONENTREDUNDANTROLE_PRIMARY",
		2: "OPENCONFIGPLATFORMTYPESCOMPONENTREDUNDANTROLE_SECONDARY",
	}
	OpenconfigPlatformTypesComponentRedundantRole_value = map[string]int32{
		"OPENCONFIGPLATFORMTYPESCOMPONENTREDUNDANTROLE_UNSET":     0,
		"OPENCONFIGPLATFORMTYPESCOMPONENTREDUNDANTROLE_PRIMARY":   1,
		"OPENCONFIGPLATFORMTYPESCOMPONENTREDUNDANTROLE_SECONDARY": 2,
	}
)

func (x OpenconfigPlatformTypesComponentRedundantRole) Enum() *OpenconfigPlatformTypesComponentRedundantRole {
	p := new(OpenconfigPlatformTypesComponentRedundantRole)
	*p = x
	return p
}

func (x OpenconfigPlatformTypesComponentRedundantRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPlatformTypesComponentRedundantRole) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[105].Descriptor()
}

func (OpenconfigPlatformTypesComponentRedundantRole) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[105]
}

func (x OpenconfigPlatformTypesComponentRedundantRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPlatformTypesComponentRedundantRole.Descriptor instead.
func (OpenconfigPlatformTypesComponentRedundantRole) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{105}
}

// OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger represents an enumerated type generated for the YANG enumerated type component-redundant-role-switchover-reason-trigger.
type OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger int32

const (
	OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger_OPENCONFIGPLATFORMTYPESCOMPONENTREDUNDANTROLESWITCHOVERREASONTRIGGER_UNSET            OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger = 0
	OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger_OPENCONFIGPLATFORMTYPESCOMPONENTREDUNDANTROLESWITCHOVERREASONTRIGGER_USER_INITIATED   OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger = 1
	OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger_OPENCONFIGPLATFORMTYPESCOMPONENTREDUNDANTROLESWITCHOVERREASONTRIGGER_SYSTEM_INITIATED OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger = 2
)

// Enum value maps for OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger.
var (
	OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger_name = map[int32]string{
		0: "OPENCONFIGPLATFORMTYPESCOMPONENTREDUNDANTROLESWITCHOVERREASONTRIGGER_UNSET",
		1: "OPENCONFIGPLATFORMTYPESCOMPONENTREDUNDANTROLESWITCHOVERREASONTRIGGER_USER_INITIATED",
		2: "OPENCONFIGPLATFORMTYPESCOMPONENTREDUNDANTROLESWITCHOVERREASONTRIGGER_SYSTEM_INITIATED",
	}
	OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger_value = map[string]int32{
		"OPENCONFIGPLATFORMTYPESCOMPONENTREDUNDANTROLESWITCHOVERREASONTRIGGER_UNSET":            0,
		"OPENCONFIGPLATFORMTYPESCOMPONENTREDUNDANTROLESWITCHOVERREASONTRIGGER_USER_INITIATED":   1,
		"OPENCONFIGPLATFORMTYPESCOMPONENTREDUNDANTROLESWITCHOVERREASONTRIGGER_SYSTEM_INITIATED": 2,
	}
)

func (x OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger) Enum() *OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger {
	p := new(OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger)
	*p = x
	return p
}

func (x OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[106].Descriptor()
}

func (OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[106]
}

func (x OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger.Descriptor instead.
func (OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{106}
}

// OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT represents an enumerated type generated for the YANG identity OPENCONFIG_HARDWARE_COMPONENT.
type OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT int32

const (
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_UNSET              OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 0
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_OPTICAL_CHANNEL    OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 17598998
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_FABRIC             OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 72327189
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_POWER_SUPPLY       OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 156519681
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_SENSOR             OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 163406904
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_STORAGE            OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 169410761
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_PORT               OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 208831331
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_FAN                OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 248256101
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_WIFI_ACCESS_POINT  OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 248502337
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_BACKPLANE          OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 267672527
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_LINECARD           OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 290488750
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_INTEGRATED_CIRCUIT OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 344879553
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_CHASSIS            OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 384589570
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_CONTROLLER_CARD    OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 462407431
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_CPU                OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 467229440
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_TRANSCEIVER        OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 483792688
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_FRU                OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT = 533475515
)

// Enum value maps for OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT.
var (
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_name = map[int32]string{
		0:         "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_UNSET",
		17598998:  "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_OPTICAL_CHANNEL",
		72327189:  "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_FABRIC",
		156519681: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_POWER_SUPPLY",
		163406904: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_SENSOR",
		169410761: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_STORAGE",
		208831331: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_PORT",
		248256101: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_FAN",
		248502337: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_WIFI_ACCESS_POINT",
		267672527: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_BACKPLANE",
		290488750: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_LINECARD",
		344879553: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_INTEGRATED_CIRCUIT",
		384589570: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_CHASSIS",
		462407431: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_CONTROLLER_CARD",
		467229440: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_CPU",
		483792688: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_TRANSCEIVER",
		533475515: "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_FRU",
	}
	OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_value = map[string]int32{
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_UNSET":              0,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_OPTICAL_CHANNEL":    17598998,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_FABRIC":             72327189,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_POWER_SUPPLY":       156519681,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_SENSOR":             163406904,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_STORAGE":            169410761,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_PORT":               208831331,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_FAN":                248256101,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_WIFI_ACCESS_POINT":  248502337,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_BACKPLANE":          267672527,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_LINECARD":           290488750,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_INTEGRATED_CIRCUIT": 344879553,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_CHASSIS":            384589570,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_CONTROLLER_CARD":    462407431,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_CPU":                467229440,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_TRANSCEIVER":        483792688,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWARECOMPONENT_FRU":                533475515,
	}
)

func (x OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT) Enum() *OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT {
	p := new(OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT)
	*p = x
	return p
}

func (x OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[107].Descriptor()
}

func (OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[107]
}

func (x OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT.Descriptor instead.
func (OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{107}
}

// OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT represents an enumerated type generated for the YANG identity OPENCONFIG_SOFTWARE_COMPONENT.
type OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT int32

const (
	OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_UNSET                   OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT = 0
	OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_OPERATING_SYSTEM        OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT = 9246962
	OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_BOOT_LOADER             OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT = 12056953
	OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_SOFTWARE_MODULE         OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT = 86825049
	OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_OPERATING_SYSTEM_UPDATE OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT = 350799246
	OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT_OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_BIOS                    OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT = 427663680
)

// Enum value maps for OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT.
var (
	OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT_name = map[int32]string{
		0:         "OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_UNSET",
		9246962:   "OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_OPERATING_SYSTEM",
		12056953:  "OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_BOOT_LOADER",
		86825049:  "OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_SOFTWARE_MODULE",
		350799246: "OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_OPERATING_SYSTEM_UPDATE",
		427663680: "OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_BIOS",
	}
	OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT_value = map[string]int32{
		"OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_UNSET":                   0,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_OPERATING_SYSTEM":        9246962,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_BOOT_LOADER":             12056953,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_SOFTWARE_MODULE":         86825049,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_OPERATING_SYSTEM_UPDATE": 350799246,
		"OPENCONFIGPLATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_BIOS":                    427663680,
	}
)

func (x OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT) Enum() *OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT {
	p := new(OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT)
	*p = x
	return p
}

func (x OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[108].Descriptor()
}

func (OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[108]
}

func (x OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT.Descriptor instead.
func (OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{108}
}

// OpenconfigPolicyTypesINSTALLPROTOCOLTYPE represents an enumerated type generated for the YANG identity INSTALL_PROTOCOL_TYPE.
type OpenconfigPolicyTypesINSTALLPROTOCOLTYPE int32

const (
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_UNSET              OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 0
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_LOCAL              OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 47233937
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_STATIC             OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 164198026
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_LOCAL_AGGREGATE    OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 167243989
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF               OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 187006448
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_PIM                OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 203990878
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_GRIBI              OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 288936531
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_ISIS               OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 308545656
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_PCEP               OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 370633388
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_IGMP               OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 378946099
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_BGP                OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 436650411
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_DIRECTLY_CONNECTED OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 463126862
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF3              OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 470106339
)

// Enum value maps for OpenconfigPolicyTypesINSTALLPROTOCOLTYPE.
var (
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_name = map[int32]string{
		0:         "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_UNSET",
		47233937:  "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_LOCAL",
		164198026: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_STATIC",
		167243989: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_LOCAL_AGGREGATE",
		187006448: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF",
		203990878: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_PIM",
		288936531: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_GRIBI",
		308545656: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_ISIS",
		370633388: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_PCEP",
		378946099: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_IGMP",
		436650411: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_BGP",
		463126862: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_DIRECTLY_CONNECTED",
		470106339: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF3",
	}
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_value = map[string]int32{
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_UNSET":              0,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_LOCAL":              47233937,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_STATIC":             164198026,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_LOCAL_AGGREGATE":    167243989,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF":               187006448,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_PIM":                203990878,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_GRIBI":              288936531,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_ISIS":               308545656,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_PCEP":               370633388,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_IGMP":               378946099,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_BGP":                436650411,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_DIRECTLY_CONNECTED": 463126862,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF3":              470106339,
	}
)

func (x OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) Enum() *OpenconfigPolicyTypesINSTALLPROTOCOLTYPE {
	p := new(OpenconfigPolicyTypesINSTALLPROTOCOLTYPE)
	*p = x
	return p
}

func (x OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[109].Descriptor()
}

func (OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[109]
}

func (x OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPolicyTypesINSTALLPROTOCOLTYPE.Descriptor instead.
func (OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{109}
}

// OpenconfigPolicyTypesMatchSetOptionsRestrictedType represents an enumerated type generated for the YANG enumerated type match-set-options-restricted-type.
type OpenconfigPolicyTypesMatchSetOptionsRestrictedType int32

const (
	OpenconfigPolicyTypesMatchSetOptionsRestrictedType_OPENCONFIGPOLICYTYPESMATCHSETOPTIONSRESTRICTEDTYPE_ANY    OpenconfigPolicyTypesMatchSetOptionsRestrictedType = 0
	OpenconfigPolicyTypesMatchSetOptionsRestrictedType_OPENCONFIGPOLICYTYPESMATCHSETOPTIONSRESTRICTEDTYPE_INVERT OpenconfigPolicyTypesMatchSetOptionsRestrictedType = 2
)

// Enum value maps for OpenconfigPolicyTypesMatchSetOptionsRestrictedType.
var (
	OpenconfigPolicyTypesMatchSetOptionsRestrictedType_name = map[int32]string{
		0: "OPENCONFIGPOLICYTYPESMATCHSETOPTIONSRESTRICTEDTYPE_ANY",
		2: "OPENCONFIGPOLICYTYPESMATCHSETOPTIONSRESTRICTEDTYPE_INVERT",
	}
	OpenconfigPolicyTypesMatchSetOptionsRestrictedType_value = map[string]int32{
		"OPENCONFIGPOLICYTYPESMATCHSETOPTIONSRESTRICTEDTYPE_ANY":    0,
		"OPENCONFIGPOLICYTYPESMATCHSETOPTIONSRESTRICTEDTYPE_INVERT": 2,
	}
)

func (x OpenconfigPolicyTypesMatchSetOptionsRestrictedType) Enum() *OpenconfigPolicyTypesMatchSetOptionsRestrictedType {
	p := new(OpenconfigPolicyTypesMatchSetOptionsRestrictedType)
	*p = x
	return p
}

func (x OpenconfigPolicyTypesMatchSetOptionsRestrictedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPolicyTypesMatchSetOptionsRestrictedType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[110].Descriptor()
}

func (OpenconfigPolicyTypesMatchSetOptionsRestrictedType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[110]
}

func (x OpenconfigPolicyTypesMatchSetOptionsRestrictedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPolicyTypesMatchSetOptionsRestrictedType.Descriptor instead.
func (OpenconfigPolicyTypesMatchSetOptionsRestrictedType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{110}
}

// OpenconfigRibBgpTypesINVALIDROUTEREASON represents an enumerated type generated for the YANG identity INVALID_ROUTE_REASON.
type OpenconfigRibBgpTypesINVALIDROUTEREASON int32

const (
	OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET                OpenconfigRibBgpTypesINVALIDROUTEREASON = 0
	OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_AS_LOOP      OpenconfigRibBgpTypesINVALIDROUTEREASON = 281940072
	OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_ORIGINATOR   OpenconfigRibBgpTypesINVALIDROUTEREASON = 329543457
	OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_CLUSTER_LOOP OpenconfigRibBgpTypesINVALIDROUTEREASON = 363552896
	OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_CONFED       OpenconfigRibBgpTypesINVALIDROUTEREASON = 404003798
)

// Enum value maps for OpenconfigRibBgpTypesINVALIDROUTEREASON.
var (
	OpenconfigRibBgpTypesINVALIDROUTEREASON_name = map[int32]string{
		0:         "OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET",
		281940072: "OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_AS_LOOP",
		329543457: "OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_ORIGINATOR",
		363552896: "OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_CLUSTER_LOOP",
		404003798: "OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_CONFED",
	}
	OpenconfigRibBgpTypesINVALIDROUTEREASON_value = map[string]int32{
		"OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET":                0,
		"OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_AS_LOOP":      281940072,
		"OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_ORIGINATOR":   329543457,
		"OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_CLUSTER_LOOP": 363552896,
		"OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_CONFED":       404003798,
	}
)

func (x OpenconfigRibBgpTypesINVALIDROUTEREASON) Enum() *OpenconfigRibBgpTypesINVALIDROUTEREASON {
	p := new(OpenconfigRibBgpTypesINVALIDROUTEREASON)
	*p = x
	return p
}

func (x OpenconfigRibBgpTypesINVALIDROUTEREASON) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigRibBgpTypesINVALIDROUTEREASON) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[111].Descriptor()
}

func (OpenconfigRibBgpTypesINVALIDROUTEREASON) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[111]
}

func (x OpenconfigRibBgpTypesINVALIDROUTEREASON) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigRibBgpTypesINVALIDROUTEREASON.Descriptor instead.
func (OpenconfigRibBgpTypesINVALIDROUTEREASON) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{111}
}

// OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE represents an enumerated type generated for the YANG identity TUNNEL_ENCAPSULATION_SUBTLV_TYPE.
type OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE int32

const (
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE_OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_UNSET                  OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE = 0
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE_OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_SRTE_PREFERENCE        OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE = 68217326
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE_OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_SRTE_BINDING_SID       OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE = 365388805
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE_OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_TUNNEL_REMOTE_ENDPOINT OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE = 408846061
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE_OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_SRTE_SEGMENT_LIST      OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE = 471686299
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE_OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_TUNNEL_COLOR           OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE = 494500102
)

// Enum value maps for OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE.
var (
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE_name = map[int32]string{
		0:         "OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_UNSET",
		68217326:  "OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_SRTE_PREFERENCE",
		365388805: "OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_SRTE_BINDING_SID",
		408846061: "OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_TUNNEL_REMOTE_ENDPOINT",
		471686299: "OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_SRTE_SEGMENT_LIST",
		494500102: "OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_TUNNEL_COLOR",
	}
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE_value = map[string]int32{
		"OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_UNSET":                  0,
		"OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_SRTE_PREFERENCE":        68217326,
		"OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_SRTE_BINDING_SID":       365388805,
		"OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_TUNNEL_REMOTE_ENDPOINT": 408846061,
		"OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_SRTE_SEGMENT_LIST":      471686299,
		"OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONSUBTLVTYPE_TUNNEL_COLOR":           494500102,
	}
)

func (x OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE) Enum() *OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE {
	p := new(OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE)
	*p = x
	return p
}

func (x OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[112].Descriptor()
}

func (OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[112]
}

func (x OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE.Descriptor instead.
func (OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{112}
}

// OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE represents an enumerated type generated for the YANG identity TUNNEL_ENCAPSULATION_TYPE.
type OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE int32

const (
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE_OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONTYPE_UNSET              OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE = 0
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE_OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONTYPE_SRTE_POLICY_TUNNEL OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE = 189389033
)

// Enum value maps for OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE.
var (
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE_name = map[int32]string{
		0:         "OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONTYPE_UNSET",
		189389033: "OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONTYPE_SRTE_POLICY_TUNNEL",
	}
	OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE_value = map[string]int32{
		"OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONTYPE_UNSET":              0,
		"OPENCONFIGRIBBGPTYPESTUNNELENCAPSULATIONTYPE_SRTE_POLICY_TUNNEL": 189389033,
	}
)

func (x OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE) Enum() *OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE {
	p := new(OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE)
	*p = x
	return p
}

func (x OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[113].Descriptor()
}

func (OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[113]
}

func (x OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE.Descriptor instead.
func (OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{113}
}

// OpenconfigRoutingPolicyDefaultPolicyType represents an enumerated type generated for the YANG enumerated type default-policy-type.
type OpenconfigRoutingPolicyDefaultPolicyType int32

const (
	OpenconfigRoutingPolicyDefaultPolicyType_OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE OpenconfigRoutingPolicyDefaultPolicyType = 0
	OpenconfigRoutingPolicyDefaultPolicyType_OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_ACCEPT_ROUTE OpenconfigRoutingPolicyDefaultPolicyType = 1
)

// Enum value maps for OpenconfigRoutingPolicyDefaultPolicyType.
var (
	OpenconfigRoutingPolicyDefaultPolicyType_name = map[int32]string{
		0: "OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE",
		1: "OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_ACCEPT_ROUTE",
	}
	OpenconfigRoutingPolicyDefaultPolicyType_value = map[string]int32{
		"OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_REJECT_ROUTE": 0,
		"OPENCONFIGROUTINGPOLICYDEFAULTPOLICYTYPE_ACCEPT_ROUTE": 1,
	}
)

func (x OpenconfigRoutingPolicyDefaultPolicyType) Enum() *OpenconfigRoutingPolicyDefaultPolicyType {
	p := new(OpenconfigRoutingPolicyDefaultPolicyType)
	*p = x
	return p
}

func (x OpenconfigRoutingPolicyDefaultPolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigRoutingPolicyDefaultPolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[114].Descriptor()
}

func (OpenconfigRoutingPolicyDefaultPolicyType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[114]
}

func (x OpenconfigRoutingPolicyDefaultPolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigRoutingPolicyDefaultPolicyType.Descriptor instead.
func (OpenconfigRoutingPolicyDefaultPolicyType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{114}
}

// OpenconfigRoutingPolicyPolicyResultType represents an enumerated type generated for the YANG enumerated type policy-result-type.
type OpenconfigRoutingPolicyPolicyResultType int32

const (
	OpenconfigRoutingPolicyPolicyResultType_OPENCONFIGROUTINGPOLICYPOLICYRESULTTYPE_NEXT_STATEMENT OpenconfigRoutingPolicyPolicyResultType = 0
	OpenconfigRoutingPolicyPolicyResultType_OPENCONFIGROUTINGPOLICYPOLICYRESULTTYPE_ACCEPT_ROUTE   OpenconfigRoutingPolicyPolicyResultType = 1
	OpenconfigRoutingPolicyPolicyResultType_OPENCONFIGROUTINGPOLICYPOLICYRESULTTYPE_REJECT_ROUTE   OpenconfigRoutingPolicyPolicyResultType = 2
)

// Enum value maps for OpenconfigRoutingPolicyPolicyResultType.
var (
	OpenconfigRoutingPolicyPolicyResultType_name = map[int32]string{
		0: "OPENCONFIGROUTINGPOLICYPOLICYRESULTTYPE_NEXT_STATEMENT",
		1: "OPENCONFIGROUTINGPOLICYPOLICYRESULTTYPE_ACCEPT_ROUTE",
		2: "OPENCONFIGROUTINGPOLICYPOLICYRESULTTYPE_REJECT_ROUTE",
	}
	OpenconfigRoutingPolicyPolicyResultType_value = map[string]int32{
		"OPENCONFIGROUTINGPOLICYPOLICYRESULTTYPE_NEXT_STATEMENT": 0,
		"OPENCONFIGROUTINGPOLICYPOLICYRESULTTYPE_ACCEPT_ROUTE":   1,
		"OPENCONFIGROUTINGPOLICYPOLICYRESULTTYPE_REJECT_ROUTE":   2,
	}
)

func (x OpenconfigRoutingPolicyPolicyResultType) Enum() *OpenconfigRoutingPolicyPolicyResultType {
	p := new(OpenconfigRoutingPolicyPolicyResultType)
	*p = x
	return p
}

func (x OpenconfigRoutingPolicyPolicyResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigRoutingPolicyPolicyResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[115].Descriptor()
}

func (OpenconfigRoutingPolicyPolicyResultType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[115]
}

func (x OpenconfigRoutingPolicyPolicyResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigRoutingPolicyPolicyResultType.Descriptor instead.
func (OpenconfigRoutingPolicyPolicyResultType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{115}
}

// OpenconfigSegmentRoutingTypesEnlpType represents an enumerated type generated for the YANG enumerated type enlp-type.
type OpenconfigSegmentRoutingTypesEnlpType int32

const (
	OpenconfigSegmentRoutingTypesEnlpType_OPENCONFIGSEGMENTROUTINGTYPESENLPTYPE_UNSET                    OpenconfigSegmentRoutingTypesEnlpType = 0
	OpenconfigSegmentRoutingTypesEnlpType_OPENCONFIGSEGMENTROUTINGTYPESENLPTYPE_PUSH_IPV4_EXPLICIT_NULL  OpenconfigSegmentRoutingTypesEnlpType = 1
	OpenconfigSegmentRoutingTypesEnlpType_OPENCONFIGSEGMENTROUTINGTYPESENLPTYPE_PUSH_IPV6_EXPLICIT_NULL  OpenconfigSegmentRoutingTypesEnlpType = 2
	OpenconfigSegmentRoutingTypesEnlpType_OPENCONFIGSEGMENTROUTINGTYPESENLPTYPE_PUSH_IPV46_EXPLICIT_NULL OpenconfigSegmentRoutingTypesEnlpType = 3
	OpenconfigSegmentRoutingTypesEnlpType_OPENCONFIGSEGMENTROUTINGTYPESENLPTYPE_NO_EXPLICIT_NULL         OpenconfigSegmentRoutingTypesEnlpType = 4
)

// Enum value maps for OpenconfigSegmentRoutingTypesEnlpType.
var (
	OpenconfigSegmentRoutingTypesEnlpType_name = map[int32]string{
		0: "OPENCONFIGSEGMENTROUTINGTYPESENLPTYPE_UNSET",
		1: "OPENCONFIGSEGMENTROUTINGTYPESENLPTYPE_PUSH_IPV4_EXPLICIT_NULL",
		2: "OPENCONFIGSEGMENTROUTINGTYPESENLPTYPE_PUSH_IPV6_EXPLICIT_NULL",
		3: "OPENCONFIGSEGMENTROUTINGTYPESENLPTYPE_PUSH_IPV46_EXPLICIT_NULL",
		4: "OPENCONFIGSEGMENTROUTINGTYPESENLPTYPE_NO_EXPLICIT_NULL",
	}
	OpenconfigSegmentRoutingTypesEnlpType_value = map[string]int32{
		"OPENCONFIGSEGMENTROUTINGTYPESENLPTYPE_UNSET":                    0,
		"OPENCONFIGSEGMENTROUTINGTYPESENLPTYPE_PUSH_IPV4_EXPLICIT_NULL":  1,
		"OPENCONFIGSEGMENTROUTINGTYPESENLPTYPE_PUSH_IPV6_EXPLICIT_NULL":  2,
		"OPENCONFIGSEGMENTROUTINGTYPESENLPTYPE_PUSH_IPV46_EXPLICIT_NULL": 3,
		"OPENCONFIGSEGMENTROUTINGTYPESENLPTYPE_NO_EXPLICIT_NULL":         4,
	}
)

func (x OpenconfigSegmentRoutingTypesEnlpType) Enum() *OpenconfigSegmentRoutingTypesEnlpType {
	p := new(OpenconfigSegmentRoutingTypesEnlpType)
	*p = x
	return p
}

func (x OpenconfigSegmentRoutingTypesEnlpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigSegmentRoutingTypesEnlpType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[116].Descriptor()
}

func (OpenconfigSegmentRoutingTypesEnlpType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[116]
}

func (x OpenconfigSegmentRoutingTypesEnlpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigSegmentRoutingTypesEnlpType.Descriptor instead.
func (OpenconfigSegmentRoutingTypesEnlpType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{116}
}

// OpenconfigSegmentRoutingTypesSrDataplaneType represents an enumerated type generated for the YANG enumerated type sr-dataplane-type.
type OpenconfigSegmentRoutingTypesSrDataplaneType int32

const (
	OpenconfigSegmentRoutingTypesSrDataplaneType_OPENCONFIGSEGMENTROUTINGTYPESSRDATAPLANETYPE_UNSET OpenconfigSegmentRoutingTypesSrDataplaneType = 0
	OpenconfigSegmentRoutingTypesSrDataplaneType_OPENCONFIGSEGMENTROUTINGTYPESSRDATAPLANETYPE_MPLS  OpenconfigSegmentRoutingTypesSrDataplaneType = 1
	OpenconfigSegmentRoutingTypesSrDataplaneType_OPENCONFIGSEGMENTROUTINGTYPESSRDATAPLANETYPE_IPV6  OpenconfigSegmentRoutingTypesSrDataplaneType = 2
)

// Enum value maps for OpenconfigSegmentRoutingTypesSrDataplaneType.
var (
	OpenconfigSegmentRoutingTypesSrDataplaneType_name = map[int32]string{
		0: "OPENCONFIGSEGMENTROUTINGTYPESSRDATAPLANETYPE_UNSET",
		1: "OPENCONFIGSEGMENTROUTINGTYPESSRDATAPLANETYPE_MPLS",
		2: "OPENCONFIGSEGMENTROUTINGTYPESSRDATAPLANETYPE_IPV6",
	}
	OpenconfigSegmentRoutingTypesSrDataplaneType_value = map[string]int32{
		"OPENCONFIGSEGMENTROUTINGTYPESSRDATAPLANETYPE_UNSET": 0,
		"OPENCONFIGSEGMENTROUTINGTYPESSRDATAPLANETYPE_MPLS":  1,
		"OPENCONFIGSEGMENTROUTINGTYPESSRDATAPLANETYPE_IPV6":  2,
	}
)

func (x OpenconfigSegmentRoutingTypesSrDataplaneType) Enum() *OpenconfigSegmentRoutingTypesSrDataplaneType {
	p := new(OpenconfigSegmentRoutingTypesSrDataplaneType)
	*p = x
	return p
}

func (x OpenconfigSegmentRoutingTypesSrDataplaneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigSegmentRoutingTypesSrDataplaneType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[117].Descriptor()
}

func (OpenconfigSegmentRoutingTypesSrDataplaneType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[117]
}

func (x OpenconfigSegmentRoutingTypesSrDataplaneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigSegmentRoutingTypesSrDataplaneType.Descriptor instead.
func (OpenconfigSegmentRoutingTypesSrDataplaneType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{117}
}

// OpenconfigSegmentRoutingTypesSrteInvalidSlReason represents an enumerated type generated for the YANG enumerated type srte-invalid-sl-reason.
type OpenconfigSegmentRoutingTypesSrteInvalidSlReason int32

const (
	OpenconfigSegmentRoutingTypesSrteInvalidSlReason_OPENCONFIGSEGMENTROUTINGTYPESSRTEINVALIDSLREASON_UNSET                  OpenconfigSegmentRoutingTypesSrteInvalidSlReason = 0
	OpenconfigSegmentRoutingTypesSrteInvalidSlReason_OPENCONFIGSEGMENTROUTINGTYPESSRTEINVALIDSLREASON_EMPTY_SL               OpenconfigSegmentRoutingTypesSrteInvalidSlReason = 1
	OpenconfigSegmentRoutingTypesSrteInvalidSlReason_OPENCONFIGSEGMENTROUTINGTYPESSRTEINVALIDSLREASON_ZERO_WEIGHT            OpenconfigSegmentRoutingTypesSrteInvalidSlReason = 2
	OpenconfigSegmentRoutingTypesSrteInvalidSlReason_OPENCONFIGSEGMENTROUTINGTYPESSRTEINVALIDSLREASON_FIRST_SID_UNRESOLVABLE OpenconfigSegmentRoutingTypesSrteInvalidSlReason = 3
	OpenconfigSegmentRoutingTypesSrteInvalidSlReason_OPENCONFIGSEGMENTROUTINGTYPESSRTEINVALIDSLREASON_OTHER_SID_UNRESOLVABLE OpenconfigSegmentRoutingTypesSrteInvalidSlReason = 4
	OpenconfigSegmentRoutingTypesSrteInvalidSlReason_OPENCONFIGSEGMENTROUTINGTYPESSRTEINVALIDSLREASON_VERIFICATION_FAIL      OpenconfigSegmentRoutingTypesSrteInvalidSlReason = 5
)

// Enum value maps for OpenconfigSegmentRoutingTypesSrteInvalidSlReason.
var (
	OpenconfigSegmentRoutingTypesSrteInvalidSlReason_name = map[int32]string{
		0: "OPENCONFIGSEGMENTROUTINGTYPESSRTEINVALIDSLREASON_UNSET",
		1: "OPENCONFIGSEGMENTROUTINGTYPESSRTEINVALIDSLREASON_EMPTY_SL",
		2: "OPENCONFIGSEGMENTROUTINGTYPESSRTEINVALIDSLREASON_ZERO_WEIGHT",
		3: "OPENCONFIGSEGMENTROUTINGTYPESSRTEINVALIDSLREASON_FIRST_SID_UNRESOLVABLE",
		4: "OPENCONFIGSEGMENTROUTINGTYPESSRTEINVALIDSLREASON_OTHER_SID_UNRESOLVABLE",
		5: "OPENCONFIGSEGMENTROUTINGTYPESSRTEINVALIDSLREASON_VERIFICATION_FAIL",
	}
	OpenconfigSegmentRoutingTypesSrteInvalidSlReason_value = map[string]int32{
		"OPENCONFIGSEGMENTROUTINGTYPESSRTEINVALIDSLREASON_UNSET":                  0,
		"OPENCONFIGSEGMENTROUTINGTYPESSRTEINVALIDSLREASON_EMPTY_SL":               1,
		"OPENCONFIGSEGMENTROUTINGTYPESSRTEINVALIDSLREASON_ZERO_WEIGHT":            2,
		"OPENCONFIGSEGMENTROUTINGTYPESSRTEINVALIDSLREASON_FIRST_SID_UNRESOLVABLE": 3,
		"OPENCONFIGSEGMENTROUTINGTYPESSRTEINVALIDSLREASON_OTHER_SID_UNRESOLVABLE": 4,
		"OPENCONFIGSEGMENTROUTINGTYPESSRTEINVALIDSLREASON_VERIFICATION_FAIL":      5,
	}
)

func (x OpenconfigSegmentRoutingTypesSrteInvalidSlReason) Enum() *OpenconfigSegmentRoutingTypesSrteInvalidSlReason {
	p := new(OpenconfigSegmentRoutingTypesSrteInvalidSlReason)
	*p = x
	return p
}

func (x OpenconfigSegmentRoutingTypesSrteInvalidSlReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigSegmentRoutingTypesSrteInvalidSlReason) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[118].Descriptor()
}

func (OpenconfigSegmentRoutingTypesSrteInvalidSlReason) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[118]
}

func (x OpenconfigSegmentRoutingTypesSrteInvalidSlReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigSegmentRoutingTypesSrteInvalidSlReason.Descriptor instead.
func (OpenconfigSegmentRoutingTypesSrteInvalidSlReason) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{118}
}

// OpenconfigSegmentRoutingTypesSrteProtocolType represents an enumerated type generated for the YANG enumerated type srte-protocol-type.
type OpenconfigSegmentRoutingTypesSrteProtocolType int32

const (
	OpenconfigSegmentRoutingTypesSrteProtocolType_OPENCONFIGSEGMENTROUTINGTYPESSRTEPROTOCOLTYPE_UNSET  OpenconfigSegmentRoutingTypesSrteProtocolType = 0
	OpenconfigSegmentRoutingTypesSrteProtocolType_OPENCONFIGSEGMENTROUTINGTYPESSRTEPROTOCOLTYPE_PCEP   OpenconfigSegmentRoutingTypesSrteProtocolType = 11
	OpenconfigSegmentRoutingTypesSrteProtocolType_OPENCONFIGSEGMENTROUTINGTYPESSRTEPROTOCOLTYPE_BGP    OpenconfigSegmentRoutingTypesSrteProtocolType = 21
	OpenconfigSegmentRoutingTypesSrteProtocolType_OPENCONFIGSEGMENTROUTINGTYPESSRTEPROTOCOLTYPE_CONFIG OpenconfigSegmentRoutingTypesSrteProtocolType = 31
)

// Enum value maps for OpenconfigSegmentRoutingTypesSrteProtocolType.
var (
	OpenconfigSegmentRoutingTypesSrteProtocolType_name = map[int32]string{
		0:  "OPENCONFIGSEGMENTROUTINGTYPESSRTEPROTOCOLTYPE_UNSET",
		11: "OPENCONFIGSEGMENTROUTINGTYPESSRTEPROTOCOLTYPE_PCEP",
		21: "OPENCONFIGSEGMENTROUTINGTYPESSRTEPROTOCOLTYPE_BGP",
		31: "OPENCONFIGSEGMENTROUTINGTYPESSRTEPROTOCOLTYPE_CONFIG",
	}
	OpenconfigSegmentRoutingTypesSrteProtocolType_value = map[string]int32{
		"OPENCONFIGSEGMENTROUTINGTYPESSRTEPROTOCOLTYPE_UNSET":  0,
		"OPENCONFIGSEGMENTROUTINGTYPESSRTEPROTOCOLTYPE_PCEP":   11,
		"OPENCONFIGSEGMENTROUTINGTYPESSRTEPROTOCOLTYPE_BGP":    21,
		"OPENCONFIGSEGMENTROUTINGTYPESSRTEPROTOCOLTYPE_CONFIG": 31,
	}
)

func (x OpenconfigSegmentRoutingTypesSrteProtocolType) Enum() *OpenconfigSegmentRoutingTypesSrteProtocolType {
	p := new(OpenconfigSegmentRoutingTypesSrteProtocolType)
	*p = x
	return p
}

func (x OpenconfigSegmentRoutingTypesSrteProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigSegmentRoutingTypesSrteProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[119].Descriptor()
}

func (OpenconfigSegmentRoutingTypesSrteProtocolType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[119]
}

func (x OpenconfigSegmentRoutingTypesSrteProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigSegmentRoutingTypesSrteProtocolType.Descriptor instead.
func (OpenconfigSegmentRoutingTypesSrteProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{119}
}

// OpenconfigSystemLoggingSYSLOGFACILITY represents an enumerated type generated for the YANG identity SYSLOG_FACILITY.
type OpenconfigSystemLoggingSYSLOGFACILITY int32

const (
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_UNSET         OpenconfigSystemLoggingSYSLOGFACILITY = 0
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_AUTHPRIV      OpenconfigSystemLoggingSYSLOGFACILITY = 1992095
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_MAIL          OpenconfigSystemLoggingSYSLOGFACILITY = 110300463
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL5        OpenconfigSystemLoggingSYSLOGFACILITY = 196925136
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL4        OpenconfigSystemLoggingSYSLOGFACILITY = 196925137
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL7        OpenconfigSystemLoggingSYSLOGFACILITY = 196925138
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL6        OpenconfigSystemLoggingSYSLOGFACILITY = 196925139
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL1        OpenconfigSystemLoggingSYSLOGFACILITY = 196925140
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL0        OpenconfigSystemLoggingSYSLOGFACILITY = 196925141
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL3        OpenconfigSystemLoggingSYSLOGFACILITY = 196925142
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL2        OpenconfigSystemLoggingSYSLOGFACILITY = 196925143
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_ALL           OpenconfigSystemLoggingSYSLOGFACILITY = 252252703
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_CONSOLE       OpenconfigSystemLoggingSYSLOGFACILITY = 336452861
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_NTP           OpenconfigSystemLoggingSYSLOGFACILITY = 350428412
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_KERNEL        OpenconfigSystemLoggingSYSLOGFACILITY = 398004525
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_AUDIT         OpenconfigSystemLoggingSYSLOGFACILITY = 477963459
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_AUTH          OpenconfigSystemLoggingSYSLOGFACILITY = 478239772
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_SYSTEM_DAEMON OpenconfigSystemLoggingSYSLOGFACILITY = 499486404
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_SYSLOG        OpenconfigSystemLoggingSYSLOGFACILITY = 508909033
	OpenconfigSystemLoggingSYSLOGFACILITY_OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_USER          OpenconfigSystemLoggingSYSLOGFACILITY = 523894347
)

// Enum value maps for OpenconfigSystemLoggingSYSLOGFACILITY.
var (
	OpenconfigSystemLoggingSYSLOGFACILITY_name = map[int32]string{
		0:         "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_UNSET",
		1992095:   "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_AUTHPRIV",
		110300463: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_MAIL",
		196925136: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL5",
		196925137: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL4",
		196925138: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL7",
		196925139: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL6",
		196925140: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL1",
		196925141: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL0",
		196925142: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL3",
		196925143: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL2",
		252252703: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_ALL",
		336452861: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_CONSOLE",
		350428412: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_NTP",
		398004525: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_KERNEL",
		477963459: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_AUDIT",
		478239772: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_AUTH",
		499486404: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_SYSTEM_DAEMON",
		508909033: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_SYSLOG",
		523894347: "OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_USER",
	}
	OpenconfigSystemLoggingSYSLOGFACILITY_value = map[string]int32{
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_UNSET":         0,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_AUTHPRIV":      1992095,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_MAIL":          110300463,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL5":        196925136,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL4":        196925137,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL7":        196925138,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL6":        196925139,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL1":        196925140,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL0":        196925141,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL3":        196925142,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL2":        196925143,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_ALL":           252252703,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_CONSOLE":       336452861,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_NTP":           350428412,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_KERNEL":        398004525,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_AUDIT":         477963459,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_AUTH":          478239772,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_SYSTEM_DAEMON": 499486404,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_SYSLOG":        508909033,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_USER":          523894347,
	}
)

func (x OpenconfigSystemLoggingSYSLOGFACILITY) Enum() *OpenconfigSystemLoggingSYSLOGFACILITY {
	p := new(OpenconfigSystemLoggingSYSLOGFACILITY)
	*p = x
	return p
}

func (x OpenconfigSystemLoggingSYSLOGFACILITY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigSystemLoggingSYSLOGFACILITY) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[120].Descriptor()
}

func (OpenconfigSystemLoggingSYSLOGFACILITY) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[120]
}

func (x OpenconfigSystemLoggingSYSLOGFACILITY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigSystemLoggingSYSLOGFACILITY.Descriptor instead.
func (OpenconfigSystemLoggingSYSLOGFACILITY) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{120}
}

// OpenconfigSystemLoggingSyslogSeverity represents an enumerated type generated for the YANG enumerated type syslog-severity.
type OpenconfigSystemLoggingSyslogSeverity int32

const (
	OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_UNSET         OpenconfigSystemLoggingSyslogSeverity = 0
	OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_EMERGENCY     OpenconfigSystemLoggingSyslogSeverity = 1
	OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_ALERT         OpenconfigSystemLoggingSyslogSeverity = 2
	OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_CRITICAL      OpenconfigSystemLoggingSyslogSeverity = 3
	OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_ERROR         OpenconfigSystemLoggingSyslogSeverity = 4
	OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_WARNING       OpenconfigSystemLoggingSyslogSeverity = 5
	OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_NOTICE        OpenconfigSystemLoggingSyslogSeverity = 6
	OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_INFORMATIONAL OpenconfigSystemLoggingSyslogSeverity = 7
	OpenconfigSystemLoggingSyslogSeverity_OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_DEBUG         OpenconfigSystemLoggingSyslogSeverity = 8
)

// Enum value maps for OpenconfigSystemLoggingSyslogSeverity.
var (
	OpenconfigSystemLoggingSyslogSeverity_name = map[int32]string{
		0: "OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_UNSET",
		1: "OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_EMERGENCY",
		2: "OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_ALERT",
		3: "OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_CRITICAL",
		4: "OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_ERROR",
		5: "OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_WARNING",
		6: "OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_NOTICE",
		7: "OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_INFORMATIONAL",
		8: "OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_DEBUG",
	}
	OpenconfigSystemLoggingSyslogSeverity_value = map[string]int32{
		"OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_UNSET":         0,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_EMERGENCY":     1,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_ALERT":         2,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_CRITICAL":      3,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_ERROR":         4,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_WARNING":       5,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_NOTICE":        6,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_INFORMATIONAL": 7,
		"OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_DEBUG":         8,
	}
)

func (x OpenconfigSystemLoggingSyslogSeverity) Enum() *OpenconfigSystemLoggingSyslogSeverity {
	p := new(OpenconfigSystemLoggingSyslogSeverity)
	*p = x
	return p
}

func (x OpenconfigSystemLoggingSyslogSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigSystemLoggingSyslogSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[121].Descriptor()
}

func (OpenconfigSystemLoggingSyslogSeverity) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[121]
}

func (x OpenconfigSystemLoggingSyslogSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigSystemLoggingSyslogSeverity.Descriptor instead.
func (OpenconfigSystemLoggingSyslogSeverity) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{121}
}

// OpenconfigSystemNTPAUTHTYPE represents an enumerated type generated for the YANG identity NTP_AUTH_TYPE.
type OpenconfigSystemNTPAUTHTYPE int32

const (
	OpenconfigSystemNTPAUTHTYPE_OPENCONFIGSYSTEMNTPAUTHTYPE_UNSET        OpenconfigSystemNTPAUTHTYPE = 0
	OpenconfigSystemNTPAUTHTYPE_OPENCONFIGSYSTEMNTPAUTHTYPE_NTP_AUTH_MD5 OpenconfigSystemNTPAUTHTYPE = 142463499
)

// Enum value maps for OpenconfigSystemNTPAUTHTYPE.
var (
	OpenconfigSystemNTPAUTHTYPE_name = map[int32]string{
		0:         "OPENCONFIGSYSTEMNTPAUTHTYPE_UNSET",
		142463499: "OPENCONFIGSYSTEMNTPAUTHTYPE_NTP_AUTH_MD5",
	}
	OpenconfigSystemNTPAUTHTYPE_value = map[string]int32{
		"OPENCONFIGSYSTEMNTPAUTHTYPE_UNSET":        0,
		"OPENCONFIGSYSTEMNTPAUTHTYPE_NTP_AUTH_MD5": 142463499,
	}
)

func (x OpenconfigSystemNTPAUTHTYPE) Enum() *OpenconfigSystemNTPAUTHTYPE {
	p := new(OpenconfigSystemNTPAUTHTYPE)
	*p = x
	return p
}

func (x OpenconfigSystemNTPAUTHTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigSystemNTPAUTHTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[122].Descriptor()
}

func (OpenconfigSystemNTPAUTHTYPE) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[122]
}

func (x OpenconfigSystemNTPAUTHTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigSystemNTPAUTHTYPE.Descriptor instead.
func (OpenconfigSystemNTPAUTHTYPE) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{122}
}

// OpenconfigTransportTypesLoopbackModeType represents an enumerated type generated for the YANG enumerated type loopback-mode-type.
type OpenconfigTransportTypesLoopbackModeType int32

const (
	OpenconfigTransportTypesLoopbackModeType_OPENCONFIGTRANSPORTTYPESLOOPBACKMODETYPE_NONE     OpenconfigTransportTypesLoopbackModeType = 0
	OpenconfigTransportTypesLoopbackModeType_OPENCONFIGTRANSPORTTYPESLOOPBACKMODETYPE_FACILITY OpenconfigTransportTypesLoopbackModeType = 2
	OpenconfigTransportTypesLoopbackModeType_OPENCONFIGTRANSPORTTYPESLOOPBACKMODETYPE_TERMINAL OpenconfigTransportTypesLoopbackModeType = 3
)

// Enum value maps for OpenconfigTransportTypesLoopbackModeType.
var (
	OpenconfigTransportTypesLoopbackModeType_name = map[int32]string{
		0: "OPENCONFIGTRANSPORTTYPESLOOPBACKMODETYPE_NONE",
		2: "OPENCONFIGTRANSPORTTYPESLOOPBACKMODETYPE_FACILITY",
		3: "OPENCONFIGTRANSPORTTYPESLOOPBACKMODETYPE_TERMINAL",
	}
	OpenconfigTransportTypesLoopbackModeType_value = map[string]int32{
		"OPENCONFIGTRANSPORTTYPESLOOPBACKMODETYPE_NONE":     0,
		"OPENCONFIGTRANSPORTTYPESLOOPBACKMODETYPE_FACILITY": 2,
		"OPENCONFIGTRANSPORTTYPESLOOPBACKMODETYPE_TERMINAL": 3,
	}
)

func (x OpenconfigTransportTypesLoopbackModeType) Enum() *OpenconfigTransportTypesLoopbackModeType {
	p := new(OpenconfigTransportTypesLoopbackModeType)
	*p = x
	return p
}

func (x OpenconfigTransportTypesLoopbackModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTransportTypesLoopbackModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[123].Descriptor()
}

func (OpenconfigTransportTypesLoopbackModeType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[123]
}

func (x OpenconfigTransportTypesLoopbackModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTransportTypesLoopbackModeType.Descriptor instead.
func (OpenconfigTransportTypesLoopbackModeType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{123}
}

// OpenconfigTypesADDRESSFAMILY represents an enumerated type generated for the YANG identity ADDRESS_FAMILY.
type OpenconfigTypesADDRESSFAMILY int32

const (
	OpenconfigTypesADDRESSFAMILY_OPENCONFIGTYPESADDRESSFAMILY_UNSET       OpenconfigTypesADDRESSFAMILY = 0
	OpenconfigTypesADDRESSFAMILY_OPENCONFIGTYPESADDRESSFAMILY_IPV6        OpenconfigTypesADDRESSFAMILY = 235337305
	OpenconfigTypesADDRESSFAMILY_OPENCONFIGTYPESADDRESSFAMILY_IPV4        OpenconfigTypesADDRESSFAMILY = 235337307
	OpenconfigTypesADDRESSFAMILY_OPENCONFIGTYPESADDRESSFAMILY_MPLS        OpenconfigTypesADDRESSFAMILY = 442843842
	OpenconfigTypesADDRESSFAMILY_OPENCONFIGTYPESADDRESSFAMILY_L2_ETHERNET OpenconfigTypesADDRESSFAMILY = 505593594
)

// Enum value maps for OpenconfigTypesADDRESSFAMILY.
var (
	OpenconfigTypesADDRESSFAMILY_name = map[int32]string{
		0:         "OPENCONFIGTYPESADDRESSFAMILY_UNSET",
		235337305: "OPENCONFIGTYPESADDRESSFAMILY_IPV6",
		235337307: "OPENCONFIGTYPESADDRESSFAMILY_IPV4",
		442843842: "OPENCONFIGTYPESADDRESSFAMILY_MPLS",
		505593594: "OPENCONFIGTYPESADDRESSFAMILY_L2_ETHERNET",
	}
	OpenconfigTypesADDRESSFAMILY_value = map[string]int32{
		"OPENCONFIGTYPESADDRESSFAMILY_UNSET":       0,
		"OPENCONFIGTYPESADDRESSFAMILY_IPV6":        235337305,
		"OPENCONFIGTYPESADDRESSFAMILY_IPV4":        235337307,
		"OPENCONFIGTYPESADDRESSFAMILY_MPLS":        442843842,
		"OPENCONFIGTYPESADDRESSFAMILY_L2_ETHERNET": 505593594,
	}
)

func (x OpenconfigTypesADDRESSFAMILY) Enum() *OpenconfigTypesADDRESSFAMILY {
	p := new(OpenconfigTypesADDRESSFAMILY)
	*p = x
	return p
}

func (x OpenconfigTypesADDRESSFAMILY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigTypesADDRESSFAMILY) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[124].Descriptor()
}

func (OpenconfigTypesADDRESSFAMILY) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[124]
}

func (x OpenconfigTypesADDRESSFAMILY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigTypesADDRESSFAMILY.Descriptor instead.
func (OpenconfigTypesADDRESSFAMILY) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{124}
}

// OpenconfigVlanTypesTPIDTYPES represents an enumerated type generated for the YANG identity TPID_TYPES.
type OpenconfigVlanTypesTPIDTYPES int32

const (
	OpenconfigVlanTypesTPIDTYPES_OPENCONFIGVLANTYPESTPIDTYPES_UNSET       OpenconfigVlanTypesTPIDTYPES = 0
	OpenconfigVlanTypesTPIDTYPES_OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X9100 OpenconfigVlanTypesTPIDTYPES = 43366784
	OpenconfigVlanTypesTPIDTYPES_OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X88A8 OpenconfigVlanTypesTPIDTYPES = 167692657
	OpenconfigVlanTypesTPIDTYPES_OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X8100 OpenconfigVlanTypesTPIDTYPES = 253072231
	OpenconfigVlanTypesTPIDTYPES_OPENCONFIGVLANTYPESTPIDTYPES_TPID_ANY    OpenconfigVlanTypesTPIDTYPES = 287549508
	OpenconfigVlanTypesTPIDTYPES_OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X9200 OpenconfigVlanTypesTPIDTYPES = 345856891
)

// Enum value maps for OpenconfigVlanTypesTPIDTYPES.
var (
	OpenconfigVlanTypesTPIDTYPES_name = map[int32]string{
		0:         "OPENCONFIGVLANTYPESTPIDTYPES_UNSET",
		43366784:  "OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X9100",
		167692657: "OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X88A8",
		253072231: "OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X8100",
		287549508: "OPENCONFIGVLANTYPESTPIDTYPES_TPID_ANY",
		345856891: "OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X9200",
	}
	OpenconfigVlanTypesTPIDTYPES_value = map[string]int32{
		"OPENCONFIGVLANTYPESTPIDTYPES_UNSET":       0,
		"OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X9100": 43366784,
		"OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X88A8": 167692657,
		"OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X8100": 253072231,
		"OPENCONFIGVLANTYPESTPIDTYPES_TPID_ANY":    287549508,
		"OPENCONFIGVLANTYPESTPIDTYPES_TPID_0X9200": 345856891,
	}
)

func (x OpenconfigVlanTypesTPIDTYPES) Enum() *OpenconfigVlanTypesTPIDTYPES {
	p := new(OpenconfigVlanTypesTPIDTYPES)
	*p = x
	return p
}

func (x OpenconfigVlanTypesTPIDTYPES) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigVlanTypesTPIDTYPES) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[125].Descriptor()
}

func (OpenconfigVlanTypesTPIDTYPES) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[125]
}

func (x OpenconfigVlanTypesTPIDTYPES) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigVlanTypesTPIDTYPES.Descriptor instead.
func (OpenconfigVlanTypesTPIDTYPES) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{125}
}

// OpenconfigVlanTypesVlanModeType represents an enumerated type generated for the YANG enumerated type vlan-mode-type.
type OpenconfigVlanTypesVlanModeType int32

const (
	OpenconfigVlanTypesVlanModeType_OPENCONFIGVLANTYPESVLANMODETYPE_UNSET  OpenconfigVlanTypesVlanModeType = 0
	OpenconfigVlanTypesVlanModeType_OPENCONFIGVLANTYPESVLANMODETYPE_ACCESS OpenconfigVlanTypesVlanModeType = 1
	OpenconfigVlanTypesVlanModeType_OPENCONFIGVLANTYPESVLANMODETYPE_TRUNK  OpenconfigVlanTypesVlanModeType = 2
)

// Enum value maps for OpenconfigVlanTypesVlanModeType.
var (
	OpenconfigVlanTypesVlanModeType_name = map[int32]string{
		0: "OPENCONFIGVLANTYPESVLANMODETYPE_UNSET",
		1: "OPENCONFIGVLANTYPESVLANMODETYPE_ACCESS",
		2: "OPENCONFIGVLANTYPESVLANMODETYPE_TRUNK",
	}
	OpenconfigVlanTypesVlanModeType_value = map[string]int32{
		"OPENCONFIGVLANTYPESVLANMODETYPE_UNSET":  0,
		"OPENCONFIGVLANTYPESVLANMODETYPE_ACCESS": 1,
		"OPENCONFIGVLANTYPESVLANMODETYPE_TRUNK":  2,
	}
)

func (x OpenconfigVlanTypesVlanModeType) Enum() *OpenconfigVlanTypesVlanModeType {
	p := new(OpenconfigVlanTypesVlanModeType)
	*p = x
	return p
}

func (x OpenconfigVlanTypesVlanModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigVlanTypesVlanModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[126].Descriptor()
}

func (OpenconfigVlanTypesVlanModeType) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[126]
}

func (x OpenconfigVlanTypesVlanModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigVlanTypesVlanModeType.Descriptor instead.
func (OpenconfigVlanTypesVlanModeType) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{126}
}

// OpenconfigVlanTypesVlanStackAction represents an enumerated type generated for the YANG enumerated type vlan-stack-action.
type OpenconfigVlanTypesVlanStackAction int32

const (
	OpenconfigVlanTypesVlanStackAction_OPENCONFIGVLANTYPESVLANSTACKACTION_UNSET OpenconfigVlanTypesVlanStackAction = 0
	OpenconfigVlanTypesVlanStackAction_OPENCONFIGVLANTYPESVLANSTACKACTION_PUSH  OpenconfigVlanTypesVlanStackAction = 1
	OpenconfigVlanTypesVlanStackAction_OPENCONFIGVLANTYPESVLANSTACKACTION_POP   OpenconfigVlanTypesVlanStackAction = 2
	OpenconfigVlanTypesVlanStackAction_OPENCONFIGVLANTYPESVLANSTACKACTION_SWAP  OpenconfigVlanTypesVlanStackAction = 3
)

// Enum value maps for OpenconfigVlanTypesVlanStackAction.
var (
	OpenconfigVlanTypesVlanStackAction_name = map[int32]string{
		0: "OPENCONFIGVLANTYPESVLANSTACKACTION_UNSET",
		1: "OPENCONFIGVLANTYPESVLANSTACKACTION_PUSH",
		2: "OPENCONFIGVLANTYPESVLANSTACKACTION_POP",
		3: "OPENCONFIGVLANTYPESVLANSTACKACTION_SWAP",
	}
	OpenconfigVlanTypesVlanStackAction_value = map[string]int32{
		"OPENCONFIGVLANTYPESVLANSTACKACTION_UNSET": 0,
		"OPENCONFIGVLANTYPESVLANSTACKACTION_PUSH":  1,
		"OPENCONFIGVLANTYPESVLANSTACKACTION_POP":   2,
		"OPENCONFIGVLANTYPESVLANSTACKACTION_SWAP":  3,
	}
)

func (x OpenconfigVlanTypesVlanStackAction) Enum() *OpenconfigVlanTypesVlanStackAction {
	p := new(OpenconfigVlanTypesVlanStackAction)
	*p = x
	return p
}

func (x OpenconfigVlanTypesVlanStackAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigVlanTypesVlanStackAction) Descriptor() protoreflect.EnumDescriptor {
	return file_managed_element_enums_enums_proto_enumTypes[127].Descriptor()
}

func (OpenconfigVlanTypesVlanStackAction) Type() protoreflect.EnumType {
	return &file_managed_element_enums_enums_proto_enumTypes[127]
}

func (x OpenconfigVlanTypesVlanStackAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigVlanTypesVlanStackAction.Descriptor instead.
func (OpenconfigVlanTypesVlanStackAction) EnumDescriptor() ([]byte, []int) {
	return file_managed_element_enums_enums_proto_rawDescGZIP(), []int{127}
}

var File_managed_element_enums_enums_proto protoreflect.FileDescriptor

var file_managed_element_enums_enums_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x1a, 0x0f, 0x79, 0x67, 0x6f, 0x74,
	0x2f, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xbf, 0x89, 0x01, 0x0a,
	0x1b, 0x49, 0x45, 0x54, 0x46, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x47, 0x0a, 0x2c, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x76, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4e, 0x69, 0x63, 0x10, 0xce, 0xc2, 0x5f, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x76, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x69, 0x63, 0x12, 0x30, 0x0a, 0x20,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x73, 0x64, 0x73, 0x6c,
	0x10, 0xf3, 0xac, 0x8d, 0x03, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x73, 0x64, 0x73, 0x6c, 0x12, 0x32,
	0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x72, 0x61,
	0x64, 0x73, 0x6c, 0x10, 0xa9, 0xb7, 0x9b, 0x03, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x72, 0x61, 0x64,
	0x73, 0x6c, 0x12, 0x36, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x78, 0x38, 0x36, 0x4c, 0x61, 0x70, 0x73, 0x10, 0x91, 0xa7, 0xa0, 0x03, 0x1a, 0x0a,
	0x82, 0x41, 0x07, 0x78, 0x38, 0x36, 0x4c, 0x61, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x25, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54,
	0x61, 0x6c, 0x6b, 0x10, 0xa6, 0x86, 0x8b, 0x04, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x30, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64, 0x6c, 0x73, 0x77, 0x10, 0xb9, 0xf1, 0xe0, 0x04, 0x1a,
	0x07, 0x82, 0x41, 0x04, 0x64, 0x6c, 0x73, 0x77, 0x12, 0x30, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x64, 0x73, 0x6c, 0x10, 0xa9, 0xc6, 0xc5,
	0x05, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x69, 0x64, 0x73, 0x6c, 0x12, 0x30, 0x0a, 0x20, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x6e, 0x66, 0x61, 0x73, 0x10, 0xb3,
	0xfd, 0xc5, 0x07, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x6e, 0x66, 0x61, 0x73, 0x12, 0x34, 0x0a, 0x22,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x10, 0xdc, 0xfa, 0xe0, 0x07, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x12, 0x54, 0x0a, 0x32, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x74, 0x65, 0x35,
	0x35, 0x64, 0x32, 0x55, 0x73, 0x4f, 0x6f, 0x62, 0x10, 0xc6, 0xaa, 0xc9, 0x0c, 0x1a, 0x19, 0x82,
	0x41, 0x16, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x74, 0x65, 0x35,
	0x35, 0x64, 0x32, 0x55, 0x73, 0x4f, 0x6f, 0x62, 0x12, 0x42, 0x0a, 0x29, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x31,
	0x36, 0x57, 0x4d, 0x41, 0x4e, 0x10, 0xcb, 0xe1, 0xf8, 0x0c, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x69,
	0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x31, 0x36, 0x57, 0x4d, 0x41, 0x4e, 0x12, 0x32, 0x0a, 0x21,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x74, 0x72, 0x30, 0x30,
	0x38, 0x10, 0xc7, 0xe2, 0xa5, 0x0e, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x74, 0x72, 0x30, 0x30, 0x38,
	0x12, 0x44, 0x0a, 0x2a, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x64, 0x76, 0x62, 0x52, 0x63, 0x63, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0xe4,
	0x8f, 0xcf, 0x0f, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x64, 0x76, 0x62, 0x52, 0x63, 0x63, 0x55, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x5c, 0x0a, 0x36, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x44, 0x6f, 0x63, 0x73, 0x57, 0x69,
	0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x10, 0xc1, 0xe2, 0xe0, 0x0f, 0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x70, 0x72, 0x6f, 0x70, 0x44, 0x6f,
	0x63, 0x73, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x44, 0x0a, 0x2a, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x66, 0x72, 0x66, 0x31, 0x36, 0x4d, 0x66, 0x72, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x10, 0xa3, 0xcd, 0xfa, 0x0f, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x66, 0x72, 0x66, 0x31,
	0x36, 0x4d, 0x66, 0x72, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x2b, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x61, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x4f, 0x4f, 0x50, 0x10, 0x87, 0xd5, 0x93, 0x10, 0x1a, 0x12,
	0x82, 0x41, 0x0f, 0x61, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x4f,
	0x4f, 0x50, 0x12, 0x48, 0x0a, 0x2c, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x10, 0x85, 0xa5, 0xce, 0x10, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x21,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x68, 0x64, 0x73, 0x6c,
	0x32, 0x10, 0xc0, 0x8a, 0xea, 0x10, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x68, 0x64, 0x73, 0x6c, 0x32,
	0x12, 0x3a, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x67, 0x10, 0xbb, 0x92, 0xb4, 0x11, 0x1a, 0x0c,
	0x82, 0x41, 0x09, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x67, 0x12, 0x42, 0x0a, 0x29,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x70, 0x64, 0x6e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x70, 0x31, 0x10, 0x9c, 0xc6, 0xf0, 0x12, 0x1a, 0x10,
	0x82, 0x41, 0x0d, 0x70, 0x64, 0x6e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x70, 0x31,
	0x12, 0x42, 0x0a, 0x29, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x70, 0x64, 0x6e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x70, 0x32, 0x10, 0x9f, 0xc6,
	0xf0, 0x12, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x70, 0x64, 0x6e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x4c,
	0x6f, 0x6f, 0x70, 0x32, 0x12, 0x4a, 0x0a, 0x2d, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0x92, 0xe6, 0x9c, 0x13, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x64,
	0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x32, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x6d, 0x73, 0x64, 0x73, 0x6c, 0x10, 0xbc, 0x88, 0x95, 0x14, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x6d,
	0x73, 0x64, 0x73, 0x6c, 0x12, 0x30, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x66, 0x64, 0x64, 0x69, 0x10, 0x9c, 0xee, 0xdb, 0x15, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x66, 0x64, 0x64, 0x69, 0x12, 0x2e, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x67, 0x66, 0x70, 0x10, 0x8c, 0x90, 0xad, 0x16, 0x1a, 0x06,
	0x82, 0x41, 0x03, 0x67, 0x66, 0x70, 0x12, 0x46, 0x0a, 0x2b, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65,
	0x73, 0x73, 0x50, 0x32, 0x50, 0x10, 0xea, 0xa6, 0xc5, 0x16, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x70,
	0x72, 0x6f, 0x70, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x50, 0x32, 0x50, 0x12, 0x40,
	0x0a, 0x28, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x66, 0x69,
	0x62, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0xca, 0x82, 0x8e, 0x17, 0x1a,
	0x0f, 0x82, 0x41, 0x0c, 0x66, 0x69, 0x62, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x3e, 0x0a, 0x27, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x42, 0x57, 0x41, 0x70, 0x32, 0x4d, 0x70, 0x10, 0xa3, 0xe0, 0xba, 0x19,
	0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x42, 0x57, 0x41, 0x70, 0x32, 0x4d, 0x70,
	0x12, 0x30, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x10, 0xc3, 0xad, 0xb5, 0x1c, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x6d, 0x70,
	0x6c, 0x73, 0x12, 0x30, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x10, 0xb9, 0xe9, 0xf6, 0x1d, 0x1a, 0x07, 0x82, 0x41, 0x04,
	0x66, 0x61, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x4d, 0x10, 0xbd, 0xd5, 0xd5, 0x20,
	0x1a, 0x0a, 0x82, 0x41, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x4d, 0x12, 0x36, 0x0a, 0x23,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x72, 0x66, 0x63, 0x31,
	0x34, 0x38, 0x33, 0x10, 0xd6, 0xb5, 0xa7, 0x22, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x72, 0x66, 0x63,
	0x31, 0x34, 0x38, 0x33, 0x12, 0x48, 0x0a, 0x2c, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x10, 0xe4, 0xb1, 0xb3, 0x22, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x38,
	0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x70,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x10, 0xcc, 0x8c, 0xf6, 0x23, 0x1a, 0x0b, 0x82, 0x41, 0x08,
	0x69, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x4a, 0x0a, 0x2d, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0xf2, 0xce, 0xc3, 0x24, 0x1a, 0x14,
	0x82, 0x41, 0x11, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x2f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0xf5, 0x89, 0x92, 0x27, 0x1a, 0x16, 0x82, 0x41,
	0x13, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x36, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x73, 0x6d, 0x64, 0x73, 0x44, 0x78, 0x69, 0x10, 0x81, 0xa5, 0xc6, 0x27,
	0x1a, 0x0a, 0x82, 0x41, 0x07, 0x73, 0x6d, 0x64, 0x73, 0x44, 0x78, 0x69, 0x12, 0x30, 0x0a, 0x20,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x78, 0x32, 0x31, 0x33,
	0x10, 0xbd, 0xb0, 0xb9, 0x29, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x78, 0x32, 0x31, 0x33, 0x12, 0x3c,
	0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64, 0x76,
	0x62, 0x52, 0x63, 0x73, 0x54, 0x64, 0x6d, 0x61, 0x10, 0xf5, 0xb6, 0xcb, 0x29, 0x1a, 0x0d, 0x82,
	0x41, 0x0a, 0x64, 0x76, 0x62, 0x52, 0x63, 0x73, 0x54, 0x64, 0x6d, 0x61, 0x12, 0x38, 0x0a, 0x24,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x44, 0x53, 0x4c, 0x10, 0xd5, 0xc0, 0xa2, 0x2d, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x44, 0x53, 0x4c, 0x12, 0x42, 0x0a, 0x29, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x35, 0x46, 0x69,
	0x62, 0x65, 0x72, 0x10, 0xad, 0x87, 0xd8, 0x2d, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x69, 0x73, 0x6f,
	0x38, 0x38, 0x30, 0x32, 0x35, 0x46, 0x69, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x1f, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x63, 0x65, 0x73, 0x10, 0x8a, 0xc0,
	0x88, 0x2e, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x63, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x21, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x10,
	0xc0, 0x96, 0xeb, 0x2e, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x12, 0x32,
	0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x73,
	0x64, 0x6e, 0x75, 0x10, 0xc6, 0x96, 0xeb, 0x2e, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x69, 0x73, 0x64,
	0x6e, 0x75, 0x12, 0x40, 0x0a, 0x28, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x49, 0x53, 0x4c, 0x76, 0x6c, 0x61, 0x6e, 0x10, 0xa7,
	0xe5, 0x82, 0x2f, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x49, 0x53, 0x4c,
	0x76, 0x6c, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x1e, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x65, 0x31, 0x10, 0xfd, 0xa0, 0x97, 0x2f, 0x1a, 0x05, 0x82, 0x41, 0x02,
	0x65, 0x31, 0x12, 0x32, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x10, 0xdb, 0xd8, 0x87, 0x31, 0x1a, 0x08, 0x82, 0x41,
	0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x2b, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x78, 0x6f, 0x72, 0x10, 0xa7, 0xf8, 0x80, 0x32, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x70,
	0x72, 0x6f, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x6f, 0x72, 0x12, 0x46,
	0x0a, 0x2b, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x73,
	0x6f, 0x38, 0x38, 0x30, 0x32, 0x35, 0x43, 0x52, 0x46, 0x50, 0x49, 0x6e, 0x74, 0x10, 0xcb, 0xc7,
	0x9b, 0x33, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x35, 0x43,
	0x52, 0x46, 0x50, 0x49, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x2f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0xcb, 0xfd, 0x9c, 0x36, 0x1a, 0x16,
	0x82, 0x41, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64, 0x74, 0x6d, 0x10, 0xdc, 0xa0, 0xa4, 0x36, 0x1a, 0x06,
	0x82, 0x41, 0x03, 0x64, 0x74, 0x6d, 0x12, 0x54, 0x0a, 0x32, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0xe5, 0x93, 0xc6,
	0x36, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x21,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x76, 0x64, 0x73, 0x6c,
	0x32, 0x10, 0xc6, 0xe7, 0xcd, 0x36, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x76, 0x64, 0x73, 0x6c, 0x32,
	0x12, 0x32, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x65, 0x73, 0x63, 0x6f, 0x6e, 0x10, 0xd1, 0xb9, 0xee, 0x36, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x65,
	0x73, 0x63, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x72, 0x66, 0x63, 0x38, 0x37, 0x37, 0x78, 0x32, 0x35, 0x10, 0xaf, 0xb2,
	0x9f, 0x37, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x72, 0x66, 0x63, 0x38, 0x37, 0x37, 0x78, 0x32, 0x35,
	0x12, 0x34, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x78, 0x32, 0x35, 0x6d, 0x6c, 0x70, 0x10, 0x8b, 0xef, 0xe5, 0x3a, 0x1a, 0x09, 0x82, 0x41, 0x06,
	0x78, 0x32, 0x35, 0x6d, 0x6c, 0x70, 0x12, 0x4a, 0x0a, 0x2d, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x61, 0x63, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0xc9, 0xbb, 0xea, 0x3a, 0x1a, 0x14, 0x82, 0x41,
	0x11, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x4e, 0x0a, 0x2f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x62, 0x67, 0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x10, 0xc3, 0x8d, 0x8f, 0x3b, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x62,
	0x67, 0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x40, 0x0a, 0x28, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x61, 0x31, 0x32, 0x4d, 0x70, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x10, 0xb6,
	0xf1, 0xaf, 0x3b, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x61, 0x31, 0x32, 0x4d, 0x70, 0x70, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x72, 0x73, 0x32, 0x33, 0x32, 0x10, 0x97, 0x95, 0xec, 0x3b, 0x1a, 0x08,
	0x82, 0x41, 0x05, 0x72, 0x73, 0x32, 0x33, 0x32, 0x12, 0x3a, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x66, 0x56, 0x66, 0x69, 0x54, 0x79, 0x70,
	0x65, 0x10, 0xf7, 0xeb, 0xf1, 0x3b, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x69, 0x66, 0x56, 0x66, 0x69,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x61, 0x74, 0x6d, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x10, 0xf2,
	0x99, 0xc3, 0x3c, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x61, 0x74, 0x6d, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x64, 0x73, 0x30, 0x10, 0xf4, 0xa3, 0xa4, 0x3e, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x64,
	0x73, 0x30, 0x12, 0x2e, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x64, 0x73, 0x31, 0x10, 0xf5, 0xa3, 0xa4, 0x3e, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x64,
	0x73, 0x31, 0x12, 0x2e, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x64, 0x73, 0x33, 0x10, 0xf7, 0xa3, 0xa4, 0x3e, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x64,
	0x73, 0x33, 0x12, 0x2e, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x75, 0x73, 0x62, 0x10, 0xff, 0xc5, 0xb7, 0x3f, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x75,
	0x73, 0x62, 0x12, 0x40, 0x0a, 0x28, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x78, 0x62, 0x6f, 0x78, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x10, 0xec,
	0xc8, 0xf9, 0x3f, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x78, 0x62, 0x6f, 0x78, 0x57, 0x69, 0x72, 0x65,
	0x6c, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x6c, 0x32, 0x76, 0x6c, 0x61, 0x6e, 0x10, 0xa2, 0x83, 0xa3, 0x41, 0x1a,
	0x09, 0x82, 0x41, 0x06, 0x6c, 0x32, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x3c, 0x0a, 0x26, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x61, 0x6c, 0x75, 0x47, 0x70, 0x6f,
	0x6e, 0x4f, 0x6e, 0x75, 0x10, 0x9d, 0x98, 0x8e, 0x44, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x61, 0x6c,
	0x75, 0x47, 0x70, 0x6f, 0x6e, 0x4f, 0x6e, 0x75, 0x12, 0x42, 0x0a, 0x29, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x62, 0x6d, 0x33, 0x37, 0x30, 0x70, 0x61,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x10, 0x94, 0xa8, 0xe6, 0x44, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x69,
	0x62, 0x6d, 0x33, 0x37, 0x30, 0x70, 0x61, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x12, 0x34, 0x0a, 0x22,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x66, 0x5f, 0x67,
	0x73, 0x6e, 0x10, 0xf1, 0xe7, 0xfd, 0x44, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x69, 0x66, 0x2d, 0x67,
	0x73, 0x6e, 0x12, 0x3e, 0x0a, 0x27, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x10, 0xf5, 0xe0,
	0x93, 0x48, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x12, 0x56, 0x0a, 0x33, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x10, 0xc3, 0xe1, 0xc6, 0x48, 0x1a, 0x1a,
	0x82, 0x41, 0x17, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x24, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x67, 0x72, 0x33, 0x30, 0x33, 0x49,
	0x44, 0x54, 0x10, 0xd1, 0xa1, 0xe1, 0x48, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x67, 0x72, 0x33, 0x30,
	0x33, 0x49, 0x44, 0x54, 0x12, 0x34, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x64, 0x76, 0x62, 0x54, 0x64, 0x6d, 0x10, 0xe6, 0xac, 0xc0, 0x49, 0x1a,
	0x09, 0x82, 0x41, 0x06, 0x64, 0x76, 0x62, 0x54, 0x64, 0x6d, 0x12, 0x40, 0x0a, 0x28, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0xac, 0xfe, 0xc7, 0x49, 0x1a, 0x0f, 0x82, 0x41, 0x0c,
	0x68, 0x79, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x22,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x78, 0x32, 0x35, 0x70,
	0x6c, 0x65, 0x10, 0x93, 0xce, 0xe4, 0x49, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x78, 0x32, 0x35, 0x70,
	0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x10, 0x8b, 0xb6, 0xec, 0x49,
	0x1a, 0x0c, 0x82, 0x41, 0x09, 0x66, 0x61, 0x73, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x61, 0x64,
	0x73, 0x6c, 0x10, 0xa1, 0xe3, 0xec, 0x4b, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x61, 0x64, 0x73, 0x6c,
	0x12, 0x40, 0x0a, 0x28, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x10, 0xe2, 0xd2, 0x95,
	0x4c, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x61, 0x64, 0x73, 0x6c, 0x32, 0x70, 0x6c, 0x75, 0x73, 0x10, 0xdd, 0x8d, 0xff, 0x4c,
	0x1a, 0x0c, 0x82, 0x41, 0x09, 0x61, 0x64, 0x73, 0x6c, 0x32, 0x70, 0x6c, 0x75, 0x73, 0x12, 0x3a,
	0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x70,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x10, 0xc7, 0xfd, 0xb1, 0x4e, 0x1a, 0x0c, 0x82, 0x41,
	0x09, 0x69, 0x70, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x1f, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x6d, 0x74, 0x10, 0xdb, 0xc7,
	0xc5, 0x4e, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x69, 0x6d, 0x74, 0x12, 0x2c, 0x0a, 0x1e, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x70, 0x10, 0xe8, 0xad, 0x97,
	0x4f, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x69, 0x70, 0x12, 0x2e, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x70, 0x69, 0x70, 0x10, 0xee, 0xef, 0x9b, 0x4f,
	0x1a, 0x06, 0x82, 0x41, 0x03, 0x70, 0x69, 0x70, 0x12, 0x40, 0x0a, 0x28, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x78, 0x32, 0x35, 0x68, 0x75, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x10, 0xce, 0xad, 0x84, 0x50, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x78, 0x32,
	0x35, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x36, 0x0a, 0x23, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x61, 0x6c, 0x75, 0x45, 0x70, 0x6f,
	0x6e, 0x10, 0xa5, 0xdb, 0xa3, 0x50, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x61, 0x6c, 0x75, 0x45, 0x70,
	0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x2e, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x61, 0x6c, 0x75, 0x45, 0x70, 0x6f, 0x6e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x55, 0x6e, 0x69, 0x10, 0xc0, 0xc9, 0xc4, 0x52, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x61, 0x6c,
	0x75, 0x45, 0x70, 0x6f, 0x6e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x6e, 0x69,
	0x12, 0x38, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x43, 0x6e, 0x6c, 0x73, 0x10, 0xbc, 0xe3, 0xdf, 0x53, 0x1a, 0x0b, 0x82,
	0x41, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x43, 0x6e, 0x6c, 0x73, 0x12, 0x4c, 0x0a, 0x2e, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70,
	0x44, 0x6f, 0x74, 0x31, 0x31, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x10, 0xe5, 0xc7, 0x9c,
	0x55, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x44, 0x6f, 0x74, 0x31,
	0x31, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x49, 0x44,
	0x10, 0xba, 0x83, 0xe9, 0x55, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44,
	0x49, 0x44, 0x12, 0x2e, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x63, 0x6e, 0x72, 0x10, 0xaa, 0xd0, 0x88, 0x56, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x63,
	0x6e, 0x72, 0x12, 0x36, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x68, 0x64, 0x68, 0x31, 0x38, 0x32, 0x32, 0x10, 0x8e, 0x8e, 0xd0, 0x56, 0x1a, 0x0a,
	0x82, 0x41, 0x07, 0x68, 0x64, 0x68, 0x31, 0x38, 0x32, 0x32, 0x12, 0x34, 0x0a, 0x22, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x61, 0x74, 0x6d, 0x44, 0x78, 0x69,
	0x10, 0xce, 0xc7, 0xa5, 0x58, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x61, 0x74, 0x6d, 0x44, 0x78, 0x69,
	0x12, 0x3c, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x61, 0x72, 0x63, 0x6e, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x73, 0x10, 0xf2, 0xee, 0xc8, 0x58, 0x1a,
	0x0d, 0x82, 0x41, 0x0a, 0x61, 0x72, 0x63, 0x6e, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x73, 0x12, 0x3c,
	0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x70,
	0x4f, 0x76, 0x65, 0x72, 0x43, 0x64, 0x6c, 0x63, 0x10, 0xa8, 0xdb, 0xc0, 0x59, 0x1a, 0x0d, 0x82,
	0x41, 0x0a, 0x69, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x64, 0x6c, 0x63, 0x12, 0x3a, 0x0a, 0x25,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x10, 0xa6, 0xd4, 0xf9, 0x59, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x6c,
	0x69, 0x6e, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x44, 0x0a, 0x2a, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64, 0x76, 0x62, 0x52, 0x63, 0x63, 0x4d, 0x61,
	0x63, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x10, 0xab, 0xdb, 0xda, 0x5a, 0x1a, 0x11, 0x82, 0x41, 0x0e,
	0x64, 0x76, 0x62, 0x52, 0x63, 0x63, 0x4d, 0x61, 0x63, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x3c,
	0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x10, 0xc1, 0xb1, 0xdf, 0x5b, 0x1a, 0x0d, 0x82,
	0x41, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x20,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x73, 0x64, 0x6e,
	0x10, 0xe1, 0xa7, 0x9a, 0x5c, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x69, 0x73, 0x64, 0x6e, 0x12, 0x44,
	0x0a, 0x2a, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x10, 0xc4, 0x94, 0xa1,
	0x5c, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x43,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x61, 0x72, 0x61, 0x70, 0x10, 0xc5, 0x8e, 0xf7, 0x5c, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x61, 0x72, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x65, 0x6f, 0x6e, 0x10, 0xf7, 0xce, 0x9a, 0x5e, 0x1a, 0x06,
	0x82, 0x41, 0x03, 0x65, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x30, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x68,
	0x65, 0x61, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x8b, 0xe7, 0xd8, 0x5e, 0x1a,
	0x17, 0x82, 0x41, 0x14, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x73, 0x69, 0x78, 0x54, 0x6f, 0x46, 0x6f, 0x75,
	0x72, 0x10, 0xbe, 0xee, 0xd8, 0x5e, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x73, 0x69, 0x78, 0x54, 0x6f,
	0x46, 0x6f, 0x75, 0x72, 0x12, 0x2e, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x70, 0x6f, 0x73, 0x10, 0xb7, 0xf5, 0x9b, 0x5f, 0x1a, 0x06, 0x82, 0x41,
	0x03, 0x70, 0x6f, 0x73, 0x12, 0x44, 0x0a, 0x2a, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x43, 0x73, 0x6d, 0x61,
	0x63, 0x64, 0x10, 0x9f, 0x93, 0xd6, 0x5f, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x43, 0x73, 0x6d, 0x61, 0x63, 0x64, 0x12, 0x3a, 0x0a, 0x25, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64, 0x73, 0x30, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x10, 0xc4, 0xe0, 0x8e, 0x60, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x64, 0x73, 0x30,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x61, 0x74, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x10, 0xde, 0xd2, 0xea, 0x63, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x61, 0x74, 0x6d, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x4d, 0x41, 0x43, 0x10, 0xc9, 0x92, 0xcb,
	0x64, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x4d, 0x41, 0x43, 0x12, 0x58,
	0x0a, 0x34, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x44, 0x6f, 0x63, 0x73, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x4d, 0x61,
	0x63, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x85, 0xdd, 0xa0, 0x65, 0x1a, 0x1b, 0x82, 0x41, 0x18,
	0x70, 0x72, 0x6f, 0x70, 0x44, 0x6f, 0x63, 0x73, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73,
	0x4d, 0x61, 0x63, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x70, 0x6f, 0x6e, 0x36, 0x32, 0x32, 0x10, 0xcc,
	0x9a, 0x93, 0x66, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x70, 0x6f, 0x6e, 0x36, 0x32, 0x32, 0x12, 0x30,
	0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x6e, 0x73,
	0x69, 0x70, 0x10, 0x89, 0xfb, 0xc4, 0x66, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x6e, 0x73, 0x69, 0x70,
	0x12, 0x32, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x10, 0xd3, 0x96, 0xa3, 0x69, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x6f, 0x74, 0x6e, 0x4f, 0x64, 0x75, 0x10, 0x82, 0xa8, 0xdb, 0x69, 0x1a,
	0x09, 0x82, 0x41, 0x06, 0x6f, 0x74, 0x6e, 0x4f, 0x64, 0x75, 0x12, 0x48, 0x0a, 0x2c, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30,
	0x32, 0x34, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75, 0x73, 0x10, 0xc3, 0xaf, 0x8a, 0x6c, 0x1a,
	0x13, 0x82, 0x41, 0x10, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x34, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x10, 0xb7, 0x9f, 0x83, 0x6d, 0x1a,
	0x09, 0x82, 0x41, 0x06, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x12, 0x58, 0x0a, 0x34, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x10, 0xcb, 0xec, 0x84, 0x6e, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x64, 0x6f, 0x63, 0x73,
	0x43, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x61, 0x74, 0x6d, 0x46, 0x75, 0x6e, 0x69, 0x10, 0xd9, 0xf8, 0x9d, 0x6e,
	0x1a, 0x0a, 0x82, 0x41, 0x07, 0x61, 0x74, 0x6d, 0x46, 0x75, 0x6e, 0x69, 0x12, 0x2e, 0x0a, 0x1f,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x6c, 0x6d, 0x70, 0x10,
	0x9e, 0xc5, 0xf2, 0x6e, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x6c, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x21,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x61, 0x64, 0x73, 0x6c,
	0x32, 0x10, 0xc1, 0xc0, 0xbc, 0x6f, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x61, 0x64, 0x73, 0x6c, 0x32,
	0x12, 0x52, 0x0a, 0x31, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x63, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x66, 0x50, 0x6f, 0x72, 0x74, 0x10, 0xd7, 0x99, 0x89, 0x70, 0x1a, 0x18, 0x82, 0x41, 0x15, 0x63,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x66,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x2c, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x64, 0x76, 0x62, 0x52, 0x63, 0x63, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x10, 0xa3, 0xdf, 0x8c, 0x71, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x64, 0x76,
	0x62, 0x52, 0x63, 0x63, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x46,
	0x0a, 0x2b, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x4d, 0x61, 0x69, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x49, 0x70, 0x10, 0xd1, 0xd9,
	0x93, 0x71, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x61, 0x69, 0x6c,
	0x4f, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x3a, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x49, 0x53, 0x44, 0x4e, 0x10,
	0xe1, 0x94, 0xe9, 0x72, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x49, 0x53,
	0x44, 0x4e, 0x12, 0x2e, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x70, 0x6c, 0x63, 0x10, 0x9e, 0xfe, 0x9b, 0x77, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x70,
	0x6c, 0x63, 0x12, 0x58, 0x0a, 0x34, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x44, 0x6f, 0x63, 0x73, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65,
	0x73, 0x73, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0xf6, 0xf0, 0xf9, 0x7b, 0x1a,
	0x1b, 0x82, 0x41, 0x18, 0x70, 0x72, 0x6f, 0x70, 0x44, 0x6f, 0x63, 0x73, 0x57, 0x69, 0x72, 0x65,
	0x6c, 0x65, 0x73, 0x73, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x34, 0x0a, 0x22,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x74, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x10, 0x92, 0xc1, 0xd6, 0x7d, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x74, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x34, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x70, 0x6f, 0x6e, 0x31, 0x35, 0x35, 0x10, 0xed, 0xb6, 0xd8, 0x7e, 0x1a, 0x09, 0x82,
	0x41, 0x06, 0x70, 0x6f, 0x6e, 0x31, 0x35, 0x35, 0x12, 0x3c, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x48, 0x64,
	0x6c, 0x63, 0x10, 0xce, 0xf0, 0xf7, 0x7e, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x48, 0x64, 0x6c, 0x63, 0x12, 0x37, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x56, 0x54, 0x10, 0xcc, 0xf4,
	0xa5, 0x80, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x56, 0x54, 0x12,
	0x63, 0x0a, 0x39, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x4f, 0x76, 0x65,
	0x72, 0x68, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0xe3, 0x97, 0xd5,
	0x80, 0x01, 0x1a, 0x20, 0x82, 0x41, 0x1d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x41, 0x0a, 0x28, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x47, 0x44, 0x45, 0x41, 0x4e, 0x41,
	0x10, 0xcf, 0xcc, 0xb3, 0x81, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x46, 0x47, 0x44, 0x45, 0x41, 0x4e, 0x41, 0x12, 0x3f, 0x0a, 0x27, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x53,
	0x44, 0x4e, 0x10, 0xad, 0xbb, 0xff, 0x82, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x49, 0x53, 0x44, 0x4e, 0x12, 0x31, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x73, 0x64, 0x63, 0x69, 0x10, 0xa6, 0xde, 0x8d,
	0x83, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x73, 0x64, 0x63, 0x69, 0x12, 0x3f, 0x0a, 0x27, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x31, 0x38, 0x32, 0x32, 0x10, 0x82, 0x90, 0x9f, 0x83, 0x01, 0x1a, 0x0e, 0x82, 0x41,
	0x0b, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x31, 0x38, 0x32, 0x32, 0x12, 0x31, 0x0a, 0x20,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x61, 0x61, 0x6c, 0x35,
	0x10, 0xb8, 0x82, 0xd2, 0x83, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x61, 0x61, 0x6c, 0x35, 0x12,
	0x31, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x61,
	0x61, 0x6c, 0x32, 0x10, 0xbf, 0x82, 0xd2, 0x83, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x61, 0x61,
	0x6c, 0x32, 0x12, 0x3b, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x10, 0xb7, 0xde, 0xe9, 0x84,
	0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x3d, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x6d,
	0x70, 0x6c, 0x73, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0xe9, 0xb0, 0xda, 0x85, 0x01, 0x1a,
	0x0d, 0x82, 0x41, 0x0a, 0x6d, 0x70, 0x6c, 0x73, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2f,
	0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x61, 0x74,
	0x6d, 0x10, 0xf1, 0xe9, 0xf6, 0x85, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x61, 0x74, 0x6d, 0x12,
	0x33, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x73,
	0x6f, 0x6e, 0x65, 0x74, 0x10, 0xea, 0x84, 0xaa, 0x86, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x73,
	0x6f, 0x6e, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x65, 0x63, 0x6f, 0x6e, 0x65, 0x74, 0x10, 0xc3, 0xab, 0xed, 0x86, 0x01,
	0x1a, 0x09, 0x82, 0x41, 0x06, 0x65, 0x63, 0x6f, 0x6e, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x24, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x6c, 0x33, 0x69, 0x70, 0x76,
	0x6c, 0x61, 0x6e, 0x10, 0xdc, 0x9d, 0x8f, 0x87, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x6c, 0x33,
	0x69, 0x70, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x3f, 0x0a, 0x27, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x36, 0x4d, 0x61,
	0x6e, 0x10, 0x8e, 0xf7, 0xd6, 0x87, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x69, 0x73, 0x6f, 0x38,
	0x38, 0x30, 0x32, 0x36, 0x4d, 0x61, 0x6e, 0x12, 0x33, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x67, 0x66, 0x61, 0x73, 0x74, 0x10, 0xc8, 0xd9, 0xe2,
	0x87, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x67, 0x66, 0x61, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x2a,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x63, 0x61, 0x70, 0x77,
	0x61, 0x70, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x42, 0x73, 0x73, 0x10, 0xba, 0xae, 0xf4, 0x88, 0x01,
	0x1a, 0x11, 0x82, 0x41, 0x0e, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x44, 0x6f, 0x74, 0x31, 0x31,
	0x42, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x10, 0xf9, 0xb9, 0xc7, 0x89, 0x01, 0x1a, 0x08,
	0x82, 0x41, 0x05, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x49, 0x0a, 0x2c, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x9e, 0x8f, 0xbc, 0x8a, 0x01, 0x1a, 0x13,
	0x82, 0x41, 0x10, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x29, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x33, 0x4d, 0x62, 0x69, 0x74,
	0x10, 0xbf, 0xb1, 0x95, 0x8c, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x33, 0x4d, 0x62, 0x69, 0x74, 0x12, 0x3b, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x67, 0x37, 0x30, 0x33, 0x61, 0x74, 0x36, 0x34,
	0x6b, 0x10, 0xc6, 0xf8, 0xe2, 0x8c, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x67, 0x37, 0x30, 0x33,
	0x61, 0x74, 0x36, 0x34, 0x6b, 0x12, 0x4d, 0x0a, 0x2e, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x61, 0x6c, 0x75, 0x47, 0x70, 0x6f, 0x6e, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x10, 0x92, 0xcd, 0xd4, 0x8e, 0x01, 0x1a, 0x15, 0x82,
	0x41, 0x12, 0x61, 0x6c, 0x75, 0x47, 0x70, 0x6f, 0x6e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x55, 0x6e, 0x69, 0x12, 0x37, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x6e, 0x61, 0x10, 0xc9, 0xb7, 0xfe, 0x8e,
	0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x6e, 0x61, 0x12, 0x2f, 0x0a,
	0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x73, 0x69, 0x70,
	0x10, 0xdd, 0xea, 0xa5, 0x8f, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x73, 0x69, 0x70, 0x12, 0x33,
	0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x65, 0x70,
	0x6c, 0x72, 0x73, 0x10, 0xbd, 0xc3, 0xc7, 0x8f, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x65, 0x70,
	0x6c, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x41, 0x74, 0x6d, 0x10, 0xa4, 0xed, 0xe7, 0x8f, 0x01,
	0x1a, 0x0a, 0x82, 0x41, 0x07, 0x70, 0x72, 0x6f, 0x70, 0x41, 0x74, 0x6d, 0x12, 0x43, 0x0a, 0x29,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x6f, 0x6e, 0x31, 0x30, 0x4d, 0x62, 0x69, 0x74, 0x10, 0xf7, 0x82, 0xa0, 0x90, 0x01, 0x1a,
	0x10, 0x82, 0x41, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x6f, 0x6e, 0x31, 0x30, 0x4d, 0x62, 0x69,
	0x74, 0x12, 0x57, 0x0a, 0x33, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x74, 0x65, 0x35, 0x35,
	0x64, 0x31, 0x46, 0x77, 0x64, 0x4f, 0x6f, 0x62, 0x10, 0x88, 0xdd, 0xcb, 0x90, 0x01, 0x1a, 0x1a,
	0x82, 0x41, 0x17, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x74, 0x65,
	0x35, 0x35, 0x64, 0x31, 0x46, 0x77, 0x64, 0x4f, 0x6f, 0x62, 0x12, 0x3f, 0x0a, 0x27, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30,
	0x32, 0x32, 0x6c, 0x6c, 0x63, 0x10, 0xf1, 0xca, 0xd8, 0x90, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b,
	0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x32, 0x6c, 0x6c, 0x63, 0x12, 0x3f, 0x0a, 0x27, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x46, 0x58, 0x10, 0xed, 0xf4, 0xdb, 0x91, 0x01, 0x1a, 0x0e, 0x82, 0x41,
	0x0b, 0x66, 0x61, 0x73, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x46, 0x58, 0x12, 0x39, 0x0a, 0x24,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x61, 0x74, 0x6d, 0x52,
	0x61, 0x64, 0x69, 0x6f, 0x10, 0xb2, 0xfd, 0xe9, 0x91, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x61,
	0x74, 0x6d, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x12, 0x41, 0x0a, 0x28, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x63, 0x62, 0x6c, 0x56, 0x65, 0x63, 0x74, 0x61, 0x53,
	0x74, 0x61, 0x72, 0x10, 0x8f, 0xd1, 0xc9, 0x92, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x63, 0x62,
	0x6c, 0x56, 0x65, 0x63, 0x74, 0x61, 0x53, 0x74, 0x61, 0x72, 0x12, 0x31, 0x0a, 0x20, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x10, 0xfd,
	0xcf, 0x92, 0x94, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x70, 0x61, 0x72, 0x61, 0x12, 0x35, 0x0a,
	0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x10, 0x91, 0xd6, 0x9b, 0x94, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x27, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x49, 0x70, 0x10,
	0xf2, 0xcc, 0xb7, 0x94, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x45, 0x0a, 0x2a, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x10, 0xca, 0xe0, 0xde, 0x95, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x21,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x71, 0x32, 0x39, 0x33,
	0x31, 0x10, 0xeb, 0xb7, 0xbb, 0x96, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x71, 0x32, 0x39, 0x33,
	0x31, 0x12, 0x2f, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x6d, 0x76, 0x6c, 0x10, 0xba, 0xf3, 0xe8, 0x96, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x6d,
	0x76, 0x6c, 0x12, 0x2f, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x70, 0x70, 0x70, 0x10, 0xb9, 0x8b, 0x9c, 0x97, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03,
	0x70, 0x70, 0x70, 0x12, 0x3b, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x66, 0x72, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x10, 0x8e, 0xa6, 0xba,
	0x97, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x66, 0x72, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x39, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x69, 0x65, 0x65, 0x65, 0x31, 0x33, 0x39, 0x34, 0x10, 0x8c, 0xc4, 0xdf, 0x97, 0x01, 0x1a, 0x0b,
	0x82, 0x41, 0x08, 0x69, 0x65, 0x65, 0x65, 0x31, 0x33, 0x39, 0x34, 0x12, 0x3d, 0x0a, 0x26, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x61, 0x66, 0x6c, 0x61, 0x6e,
	0x65, 0x38, 0x30, 0x32, 0x35, 0x10, 0xc3, 0xbc, 0xa4, 0x98, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a,
	0x61, 0x66, 0x6c, 0x61, 0x6e, 0x65, 0x38, 0x30, 0x32, 0x35, 0x12, 0x3d, 0x0a, 0x26, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x61, 0x66, 0x6c, 0x61, 0x6e, 0x65,
	0x38, 0x30, 0x32, 0x33, 0x10, 0xc5, 0xbc, 0xa4, 0x98, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x61,
	0x66, 0x6c, 0x61, 0x6e, 0x65, 0x38, 0x30, 0x32, 0x33, 0x12, 0x35, 0x0a, 0x22, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x61, 0x72, 0x63, 0x6e, 0x65, 0x74, 0x10,
	0x96, 0xf9, 0xb7, 0x98, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x61, 0x72, 0x63, 0x6e, 0x65, 0x74,
	0x12, 0x3d, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x10, 0xfe, 0xbd, 0xd0, 0x98, 0x01,
	0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x12,
	0x3f, 0x0a, 0x27, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x61,
	0x74, 0x6d, 0x56, 0x63, 0x69, 0x45, 0x6e, 0x64, 0x50, 0x74, 0x10, 0xc8, 0xc7, 0xab, 0x99, 0x01,
	0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x61, 0x74, 0x6d, 0x56, 0x63, 0x69, 0x45, 0x6e, 0x64, 0x50, 0x74,
	0x12, 0x45, 0x0a, 0x2a, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x33, 0x43, 0x73, 0x6d, 0x61, 0x63, 0x64, 0x10, 0xb2,
	0xff, 0x88, 0x9a, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32,
	0x33, 0x43, 0x73, 0x6d, 0x61, 0x63, 0x64, 0x12, 0x59, 0x0a, 0x34, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x43, 0x6d, 0x74, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x10,
	0xc5, 0x83, 0xc3, 0x9a, 0x01, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x43, 0x6d, 0x74, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x37, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x64, 0x73, 0x6c, 0x10, 0xb6, 0xeb, 0x84, 0x9c, 0x01, 0x1a,
	0x0a, 0x82, 0x41, 0x07, 0x66, 0x61, 0x73, 0x74, 0x64, 0x73, 0x6c, 0x12, 0x3f, 0x0a, 0x27, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x66, 0x72, 0x44, 0x6c, 0x63,
	0x69, 0x45, 0x6e, 0x64, 0x50, 0x74, 0x10, 0xce, 0x86, 0x9f, 0x9e, 0x01, 0x1a, 0x0e, 0x82, 0x41,
	0x0b, 0x66, 0x72, 0x44, 0x6c, 0x63, 0x69, 0x45, 0x6e, 0x64, 0x50, 0x74, 0x12, 0x4d, 0x0a, 0x2e,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x61, 0x6c, 0x75, 0x45,
	0x70, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0xd2,
	0xfd, 0xe2, 0x9f, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x61, 0x6c, 0x75, 0x45, 0x70, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x41, 0x0a, 0x28, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x6d, 0x6f, 0x63, 0x61, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x31, 0x10, 0x96, 0xc5, 0x9d, 0xa0, 0x01, 0x1a, 0x0f, 0x82,
	0x41, 0x0c, 0x6d, 0x6f, 0x63, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x31, 0x12, 0x3b,
	0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x6d, 0x66,
	0x53, 0x69, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0xd1, 0x8e, 0xfb, 0xa0, 0x01, 0x1a, 0x0c, 0x82,
	0x41, 0x09, 0x6d, 0x66, 0x53, 0x69, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x33, 0x0a, 0x21, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x67, 0x39, 0x39, 0x38, 0x31,
	0x10, 0xf1, 0xfe, 0xb3, 0xa5, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x67, 0x39, 0x39, 0x38, 0x31,
	0x12, 0x33, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x67, 0x39, 0x39, 0x38, 0x32, 0x10, 0xf2, 0xfe, 0xb3, 0xa5, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05,
	0x67, 0x39, 0x39, 0x38, 0x32, 0x12, 0x33, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x67, 0x39, 0x39, 0x38, 0x33, 0x10, 0xf3, 0xfe, 0xb3, 0xa5, 0x01,
	0x1a, 0x08, 0x82, 0x41, 0x05, 0x67, 0x39, 0x39, 0x38, 0x33, 0x12, 0x2f, 0x0a, 0x1f, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x67, 0x74, 0x70, 0x10, 0x82, 0xe4,
	0xac, 0xa6, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x67, 0x74, 0x70, 0x12, 0x2f, 0x0a, 0x1f, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x6d, 0x70, 0x63, 0x10, 0x9f,
	0xf9, 0xe8, 0xa6, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x6d, 0x70, 0x63, 0x12, 0x39, 0x0a, 0x24,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64, 0x76, 0x62, 0x41,
	0x73, 0x69, 0x49, 0x6e, 0x10, 0xa7, 0x94, 0x94, 0xa8, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x64,
	0x76, 0x62, 0x41, 0x73, 0x69, 0x49, 0x6e, 0x12, 0x3b, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x68, 0x69, 0x70, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x32,
	0x10, 0xb2, 0xd3, 0xb8, 0xa8, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x68, 0x69, 0x70, 0x65, 0x72,
	0x6c, 0x61, 0x6e, 0x32, 0x12, 0x31, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x68, 0x73, 0x73, 0x69, 0x10, 0xc8, 0xc2, 0xc1, 0xa8, 0x01, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x68, 0x73, 0x73, 0x69, 0x12, 0x3d, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x4d, 0x46, 0x47,
	0x44, 0x10, 0xb8, 0x89, 0x97, 0xaa, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x45, 0x4d, 0x46, 0x47, 0x44, 0x12, 0x31, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x73, 0x64, 0x6c, 0x63, 0x10, 0xcd, 0xee, 0x8d, 0xab, 0x01,
	0x1a, 0x07, 0x82, 0x41, 0x04, 0x73, 0x64, 0x6c, 0x63, 0x12, 0x43, 0x0a, 0x29, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x4d, 0x50, 0x49, 0x10, 0x97, 0xce, 0xb9, 0xac, 0x01, 0x1a, 0x10, 0x82, 0x41,
	0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x50, 0x49, 0x12, 0x39,
	0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x66,
	0x50, 0x77, 0x54, 0x79, 0x70, 0x65, 0x10, 0xc1, 0xcc, 0xb5, 0xad, 0x01, 0x1a, 0x0b, 0x82, 0x41,
	0x08, 0x69, 0x66, 0x50, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x23, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x10, 0x98, 0x94, 0xae, 0xae, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x43, 0x0a, 0x29, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x6f, 0x6e, 0x38, 0x30, 0x4d, 0x62, 0x69, 0x74, 0x10,
	0xe8, 0xc3, 0xd0, 0xaf, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x6f,
	0x6e, 0x38, 0x30, 0x4d, 0x62, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x76, 0x31, 0x31, 0x10, 0xfd, 0xe0, 0xd6, 0xaf, 0x01,
	0x1a, 0x06, 0x82, 0x41, 0x03, 0x76, 0x31, 0x31, 0x12, 0x3d, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x65, 0x61,
	0x76, 0x65, 0x10, 0x90, 0xf4, 0xe8, 0xb0, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x4f, 0x0a, 0x2f, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x10, 0x87, 0x88, 0xf1, 0xb0, 0x01,
	0x1a, 0x16, 0x82, 0x41, 0x13, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x41, 0x0a, 0x28, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x64, 0x72, 0x10, 0xeb, 0x94, 0xf7, 0xb0, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x64,
	0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x64, 0x72, 0x12, 0x41, 0x0a, 0x28, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x43,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x64, 0x66, 0x10, 0xff, 0x94, 0xf7, 0xb0, 0x01, 0x1a, 0x0f, 0x82,
	0x41, 0x0c, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x64, 0x66, 0x12, 0x3d,
	0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x70,
	0x4f, 0x76, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x77, 0x10, 0xc3, 0xf2, 0x8f, 0xb2, 0x01, 0x1a, 0x0d,
	0x82, 0x41, 0x0a, 0x69, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x77, 0x12, 0x4b, 0x0a,
	0x2d, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x73, 0x6f,
	0x38, 0x38, 0x30, 0x32, 0x35, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x69, 0x6e, 0x67, 0x10, 0xbe,
	0xbe, 0xb0, 0xb2, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32,
	0x35, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x53, 0x0a, 0x31, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70,
	0x57, 0x74, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x10,
	0xac, 0x8e, 0x98, 0xb4, 0x01, 0x1a, 0x18, 0x82, 0x41, 0x15, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70,
	0x57, 0x74, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x12,
	0x3b, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69,
	0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x31, 0x31, 0x10, 0x91, 0xc8, 0x91, 0xb5, 0x01, 0x1a, 0x0c,
	0x82, 0x41, 0x09, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x31, 0x31, 0x12, 0x3b, 0x0a, 0x25,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x65, 0x65, 0x65,
	0x38, 0x30, 0x32, 0x31, 0x32, 0x10, 0x92, 0xc8, 0x91, 0xb5, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09,
	0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x31, 0x32, 0x12, 0x37, 0x0a, 0x23, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x64,
	0x10, 0xf4, 0xc6, 0xc6, 0xb6, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x50,
	0x61, 0x64, 0x12, 0x39, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x73, 0x6d, 0x64, 0x73, 0x49, 0x63, 0x69, 0x70, 0x10, 0xff, 0x88, 0x88, 0xb7, 0x01,
	0x1a, 0x0b, 0x82, 0x41, 0x08, 0x73, 0x6d, 0x64, 0x73, 0x49, 0x63, 0x69, 0x70, 0x12, 0x2f, 0x0a,
	0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x70, 0x74, 0x6d,
	0x10, 0xf8, 0x98, 0x9c, 0xb7, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x70, 0x74, 0x6d, 0x12, 0x2f,
	0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x73, 0x72,
	0x70, 0x10, 0xdc, 0x95, 0xa5, 0xb7, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x73, 0x72, 0x70, 0x12,
	0x47, 0x0a, 0x2b, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x67,
	0x69, 0x67, 0x61, 0x62, 0x69, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x10, 0xbd,
	0xae, 0xad, 0xb7, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x67, 0x69, 0x67, 0x61, 0x62, 0x69, 0x74,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64, 0x76, 0x62, 0x41, 0x73, 0x69, 0x4f, 0x75,
	0x74, 0x10, 0x9a, 0xbf, 0xce, 0xb7, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x64, 0x76, 0x62, 0x41,
	0x73, 0x69, 0x4f, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x2e, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x6d, 0x61, 0x63, 0x53, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x49, 0x46, 0x10, 0xc0, 0xba, 0xe3, 0xb7, 0x01, 0x1a, 0x15, 0x82,
	0x41, 0x12, 0x6d, 0x61, 0x63, 0x53, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x64, 0x49, 0x46, 0x12, 0x39, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x67, 0x72, 0x33, 0x30, 0x33, 0x52, 0x44, 0x54, 0x10, 0xda, 0xe9, 0x9e,
	0xb8, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x67, 0x72, 0x33, 0x30, 0x33, 0x52, 0x44, 0x54, 0x12,
	0x4d, 0x0a, 0x2e, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x70,
	0x70, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x10, 0x94, 0x85, 0xf0, 0xb9, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x70, 0x70, 0x70, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x37,
	0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x4c, 0x61, 0x6e, 0x10, 0xc0, 0xc8, 0xf8, 0xba, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x4c, 0x61, 0x6e, 0x12, 0x39, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x58, 0x4f, 0x10,
	0xac, 0xf0, 0xfc, 0xbd, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46,
	0x58, 0x4f, 0x12, 0x39, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x58, 0x53, 0x10, 0xb0, 0xf0, 0xfc, 0xbd, 0x01,
	0x1a, 0x0b, 0x82, 0x41, 0x08, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x58, 0x53, 0x12, 0x2f, 0x0a,
	0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64, 0x63, 0x6e,
	0x10, 0x9a, 0xd5, 0xa4, 0xbe, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x64, 0x63, 0x6e, 0x12, 0x55,
	0x0a, 0x32, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64, 0x6f,
	0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x74, 0x65, 0x35, 0x35, 0x64, 0x32, 0x44,
	0x73, 0x4f, 0x6f, 0x62, 0x10, 0xcf, 0xe4, 0x9e, 0xbf, 0x01, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x64,
	0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x74, 0x65, 0x35, 0x35, 0x64, 0x32,
	0x44, 0x73, 0x4f, 0x6f, 0x62, 0x12, 0x2f, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x76, 0x33, 0x36, 0x10, 0xc4, 0xe6, 0xd6, 0xbf, 0x01, 0x1a, 0x06,
	0x82, 0x41, 0x03, 0x76, 0x33, 0x36, 0x12, 0x2f, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x76, 0x33, 0x37, 0x10, 0xc5, 0xe6, 0xd6, 0xbf, 0x01, 0x1a,
	0x06, 0x82, 0x41, 0x03, 0x76, 0x33, 0x37, 0x12, 0x2f, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x76, 0x33, 0x35, 0x10, 0xc7, 0xe6, 0xd6, 0xbf, 0x01,
	0x1a, 0x06, 0x82, 0x41, 0x03, 0x76, 0x33, 0x35, 0x12, 0x3d, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x47, 0x44,
	0x4f, 0x53, 0x10, 0xac, 0xaa, 0xa0, 0xc0, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x46, 0x47, 0x44, 0x4f, 0x53, 0x12, 0x35, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64, 0x73, 0x31, 0x46, 0x44, 0x4c, 0x10, 0xd1, 0xde,
	0x8f, 0xc1, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x64, 0x73, 0x31, 0x46, 0x44, 0x4c, 0x12, 0x3b,
	0x0a, 0x25, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x68, 0x33,
	0x32, 0x33, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x10, 0xab, 0xf2, 0xa2, 0xc1, 0x01, 0x1a, 0x0c, 0x82,
	0x41, 0x09, 0x68, 0x33, 0x32, 0x33, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x49, 0x0a, 0x2c, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x10, 0xb3, 0xe9, 0xb4, 0xc1,
	0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x6f,
	0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x6c, 0x61, 0x70, 0x66, 0x10, 0xf0, 0xbd, 0xab, 0xc2, 0x01,
	0x1a, 0x07, 0x82, 0x41, 0x04, 0x6c, 0x61, 0x70, 0x66, 0x12, 0x31, 0x0a, 0x20, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x6c, 0x61, 0x70, 0x64, 0x10, 0xf2, 0xbd,
	0xab, 0xc2, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x6c, 0x61, 0x70, 0x64, 0x12, 0x31, 0x0a, 0x20,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x6c, 0x61, 0x70, 0x62,
	0x10, 0xf4, 0xbd, 0xab, 0xc2, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x6c, 0x61, 0x70, 0x62, 0x12,
	0x31, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x71,
	0x6c, 0x6c, 0x63, 0x10, 0xcb, 0xd9, 0xef, 0xc2, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x71, 0x6c,
	0x6c, 0x63, 0x12, 0x37, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x50, 0x61, 0x64, 0x10, 0x84, 0x94, 0xfe, 0xc2, 0x01, 0x1a,
	0x0a, 0x82, 0x41, 0x07, 0x74, 0x65, 0x72, 0x6d, 0x50, 0x61, 0x64, 0x12, 0x31, 0x0a, 0x20, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x10,
	0xbf, 0x92, 0xc1, 0xc3, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x62, 0x69, 0x74, 0x73, 0x12, 0x35,
	0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64, 0x64,
	0x6e, 0x58, 0x32, 0x35, 0x10, 0xe2, 0xf5, 0x86, 0xc4, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x64,
	0x64, 0x6e, 0x58, 0x32, 0x35, 0x12, 0x43, 0x0a, 0x29, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x33, 0x61, 0x64, 0x4c,
	0x61, 0x67, 0x10, 0xe3, 0xac, 0x81, 0xc5, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x69, 0x65, 0x65,
	0x65, 0x38, 0x30, 0x32, 0x33, 0x61, 0x64, 0x4c, 0x61, 0x67, 0x12, 0x3b, 0x0a, 0x25, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x67, 0x37, 0x30, 0x33, 0x61, 0x74,
	0x32, 0x6d, 0x62, 0x10, 0xac, 0xcc, 0x88, 0xc5, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x67, 0x37,
	0x30, 0x33, 0x61, 0x74, 0x32, 0x6d, 0x62, 0x12, 0x31, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x67, 0x70, 0x6f, 0x6e, 0x10, 0x85, 0xed, 0xda, 0xc6,
	0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x67, 0x70, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x27, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30,
	0x32, 0x35, 0x44, 0x74, 0x72, 0x10, 0xd1, 0xc5, 0xb2, 0xc8, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b,
	0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x35, 0x44, 0x74, 0x72, 0x12, 0x47, 0x0a, 0x2b, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x61, 0x74, 0x6d, 0x53, 0x75,
	0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x10, 0xd2, 0xa5, 0xca, 0xc8, 0x01,
	0x1a, 0x12, 0x82, 0x41, 0x0f, 0x61, 0x74, 0x6d, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x76, 0x64, 0x73, 0x6c, 0x10, 0xbc, 0x89, 0x90, 0xcc, 0x01, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x76, 0x64, 0x73, 0x6c, 0x12, 0x4b, 0x0a, 0x2d, 0x49, 0x45, 0x54, 0x46, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x4f, 0x66, 0x64, 0x6d, 0x61,
	0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0x96, 0xeb, 0x99, 0xcc, 0x01, 0x1a, 0x14,
	0x82, 0x41, 0x11, 0x64, 0x6f, 0x63, 0x73, 0x4f, 0x66, 0x64, 0x6d, 0x61, 0x55, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x43, 0x0a, 0x29, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x76, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4e, 0x69, 0x63, 0x54, 0x65, 0x61,
	0x6d, 0x10, 0xd0, 0xd9, 0x97, 0xcd, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x76, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x4e, 0x69, 0x63, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x3d, 0x0a, 0x26, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32,
	0x31, 0x35, 0x34, 0x10, 0xbb, 0x9a, 0xa6, 0xce, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x69, 0x65,
	0x65, 0x65, 0x38, 0x30, 0x32, 0x31, 0x35, 0x34, 0x12, 0x3b, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x6c, 0x33, 0x69, 0x70, 0x78, 0x76, 0x6c, 0x61,
	0x6e, 0x10, 0xc2, 0xe9, 0xa5, 0xcf, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x6c, 0x33, 0x69, 0x70,
	0x78, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x35, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x61, 0x74, 0x6d, 0x49, 0x6d, 0x61, 0x10, 0xe8, 0x94, 0xc7, 0xd0,
	0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x61, 0x74, 0x6d, 0x49, 0x6d, 0x61, 0x12, 0x51, 0x0a, 0x30,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x6d, 0x61, 0x63, 0x53,
	0x65, 0x63, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x49, 0x46,
	0x10, 0xc1, 0x8d, 0xfe, 0xd0, 0x01, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x6d, 0x61, 0x63, 0x53, 0x65,
	0x63, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x49, 0x46, 0x12,
	0x39, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x66,
	0x63, 0x69, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0xdd, 0xb3, 0xbe, 0xd2, 0x01, 0x1a, 0x0b, 0x82,
	0x41, 0x08, 0x66, 0x63, 0x69, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x31, 0x0a, 0x20, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x73, 0x6c, 0x69, 0x70, 0x10, 0x95,
	0xa8, 0xdb, 0xd3, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x73, 0x6c, 0x69, 0x70, 0x12, 0x35, 0x0a,
	0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x73, 0x69, 0x70,
	0x53, 0x69, 0x67, 0x10, 0x88, 0x91, 0x93, 0xd4, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x73, 0x69,
	0x70, 0x53, 0x69, 0x67, 0x12, 0x43, 0x0a, 0x29, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x6d, 0x70, 0x65, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x10, 0x9b, 0x95, 0x93, 0xd4, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x6d, 0x70, 0x65, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x20, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x73, 0x75, 0x70, 0x10, 0xbc, 0xf1,
	0x99, 0xd4, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x69, 0x73, 0x75, 0x70, 0x12, 0x37, 0x0a, 0x23,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x63, 0x63, 0x74, 0x45,
	0x6d, 0x75, 0x6c, 0x10, 0x8e, 0xfe, 0xf0, 0xd5, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x63, 0x63,
	0x74, 0x45, 0x6d, 0x75, 0x6c, 0x12, 0x33, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x75, 0x6c, 0x74, 0x72, 0x61, 0x10, 0xbb, 0xf6, 0x8e, 0xd7, 0x01,
	0x1a, 0x08, 0x82, 0x41, 0x05, 0x75, 0x6c, 0x74, 0x72, 0x61, 0x12, 0x4f, 0x0a, 0x2f, 0x49, 0x45,
	0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x61, 0x6e, 0x61, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x10, 0xa5, 0xbf,
	0x8d, 0xd9, 0x01, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x69, 0x61, 0x6e, 0x61, 0x2d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x20, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x74, 0x64, 0x6c, 0x63, 0x10,
	0xc4, 0x91, 0xd0, 0xda, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x74, 0x64, 0x6c, 0x63, 0x12, 0x41,
	0x0a, 0x28, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x41, 0x74, 0x6d, 0x10, 0xc7, 0xd9, 0xd5, 0xdb, 0x01,
	0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x41, 0x74,
	0x6d, 0x12, 0x3d, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x61, 0x6c, 0x75, 0x45, 0x70, 0x6f, 0x6e, 0x4f, 0x6e, 0x75, 0x10, 0xef, 0xa0, 0xfd, 0xdb,
	0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x61, 0x6c, 0x75, 0x45, 0x70, 0x6f, 0x6e, 0x4f, 0x6e, 0x75,
	0x12, 0x31, 0x0a, 0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x72, 0x73, 0x72, 0x62, 0x10, 0xf6, 0xc2, 0xfb, 0xde, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x72,
	0x73, 0x72, 0x62, 0x12, 0x33, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x73, 0x68, 0x64, 0x73, 0x6c, 0x10, 0xe7, 0xa4, 0x8d, 0xe0, 0x01, 0x1a, 0x08,
	0x82, 0x41, 0x05, 0x73, 0x68, 0x64, 0x73, 0x6c, 0x12, 0x55, 0x0a, 0x32, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x10, 0x91,
	0xa6, 0x8d, 0xe0, 0x01, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12,
	0x57, 0x0a, 0x33, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64,
	0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x74, 0x65, 0x35, 0x35, 0x64, 0x31,
	0x52, 0x65, 0x74, 0x4f, 0x6f, 0x62, 0x10, 0xba, 0xb1, 0xdd, 0xe3, 0x01, 0x1a, 0x1a, 0x82, 0x41,
	0x17, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x74, 0x65, 0x35, 0x35,
	0x64, 0x31, 0x52, 0x65, 0x74, 0x4f, 0x6f, 0x62, 0x12, 0x37, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x6d, 0x79, 0x72, 0x69, 0x6e, 0x65, 0x74, 0x10,
	0xb7, 0xa7, 0xec, 0xe3, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x6d, 0x79, 0x72, 0x69, 0x6e, 0x65,
	0x74, 0x12, 0x45, 0x0a, 0x2a, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x68, 0x33, 0x32, 0x33, 0x47, 0x61, 0x74, 0x65, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x10,
	0xae, 0xff, 0x9c, 0xe8, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x68, 0x33, 0x32, 0x33, 0x47, 0x61,
	0x74, 0x65, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x25, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x41, 0x74,
	0x6d, 0x10, 0xaa, 0xc3, 0xbf, 0xe8, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x69, 0x70, 0x4f, 0x76,
	0x65, 0x72, 0x41, 0x74, 0x6d, 0x12, 0x35, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x6f, 0x74, 0x6e, 0x4f, 0x74, 0x75, 0x10, 0xd2, 0xdb, 0xdb, 0xe9,
	0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x6f, 0x74, 0x6e, 0x4f, 0x74, 0x75, 0x12, 0x35, 0x0a, 0x22,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x61, 0x6c, 0x75, 0x45,
	0x4c, 0x50, 0x10, 0xea, 0xbe, 0x97, 0xea, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x61, 0x6c, 0x75,
	0x45, 0x4c, 0x50, 0x12, 0x43, 0x0a, 0x29, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x10, 0x90, 0x8b, 0x8e, 0xee, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2f, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x71, 0x61, 0x6d, 0x10, 0xee, 0xb1, 0x93, 0xef,
	0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x71, 0x61, 0x6d, 0x12, 0x3d, 0x0a, 0x26, 0x49, 0x45, 0x54,
	0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x62,
	0x61, 0x6e, 0x64, 0x10, 0xf7, 0xc8, 0xbb, 0xef, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x69, 0x6e,
	0x66, 0x69, 0x6e, 0x69, 0x62, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x21, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x68, 0x69, 0x70, 0x70, 0x69, 0x10, 0xff, 0x98,
	0xca, 0xf0, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x68, 0x69, 0x70, 0x70, 0x69, 0x12, 0x45, 0x0a,
	0x2a, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64, 0x76, 0x62,
	0x52, 0x63, 0x73, 0x4d, 0x61, 0x63, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x10, 0xbb, 0xc7, 0xee, 0xf0,
	0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x64, 0x76, 0x62, 0x52, 0x63, 0x73, 0x4d, 0x61, 0x63, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x61, 0x74, 0x6d, 0x62, 0x6f, 0x6e, 0x64, 0x10, 0xca, 0xc2, 0x80, 0xf2,
	0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x61, 0x74, 0x6d, 0x62, 0x6f, 0x6e, 0x64, 0x12, 0x31, 0x0a,
	0x20, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x69, 0x6c, 0x61,
	0x6e, 0x10, 0xa9, 0x95, 0xf8, 0xf4, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x69, 0x6c, 0x61, 0x6e,
	0x12, 0x3d, 0x0a, 0x26, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x73, 0x73, 0x37, 0x53, 0x69, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0xfb, 0xd0, 0x80, 0xf5, 0x01,
	0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x73, 0x73, 0x37, 0x53, 0x69, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x4d, 0x0a, 0x2e, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x64,
	0x6f, 0x63, 0x73, 0x4f, 0x66, 0x64, 0x6d, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x10, 0xe0, 0xae, 0x86, 0xf6, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x64, 0x6f, 0x63, 0x73,
	0x4f, 0x66, 0x64, 0x6d, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x4b,
	0x0a, 0x2d, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x61, 0x76,
	0x69, 0x63, 0x69, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x65, 0x72, 0x10,
	0xcb, 0xe5, 0x8a, 0xf6, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x61, 0x76, 0x69, 0x63, 0x69, 0x4f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x1f, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x72, 0x70, 0x72, 0x10, 0xa9,
	0xab, 0xae, 0xf7, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x72, 0x70, 0x72, 0x12, 0x33, 0x0a, 0x21,
	0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x73, 0x69, 0x70, 0x54,
	0x67, 0x10, 0xae, 0xc6, 0xa4, 0xfb, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x73, 0x69, 0x70, 0x54,
	0x67, 0x12, 0x35, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x77, 0x77, 0x61, 0x6e, 0x50, 0x50, 0x10, 0xc4, 0xee, 0xbb, 0xfb, 0x01, 0x1a, 0x09, 0x82,
	0x41, 0x06, 0x77, 0x77, 0x61, 0x6e, 0x50, 0x50, 0x12, 0x45, 0x0a, 0x2a, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x68, 0x69, 0x70, 0x70, 0x69, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x10, 0xf8, 0xd7, 0xd2, 0xfc, 0x01, 0x1a, 0x11, 0x82, 0x41,
	0x0e, 0x68, 0x69, 0x70, 0x70, 0x69, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x37, 0x0a, 0x23, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x77,
	0x77, 0x61, 0x6e, 0x50, 0x50, 0x32, 0x10, 0xbe, 0x80, 0xbd, 0xfd, 0x01, 0x1a, 0x0a, 0x82, 0x41,
	0x07, 0x77, 0x77, 0x61, 0x6e, 0x50, 0x50, 0x32, 0x12, 0x39, 0x0a, 0x24, 0x49, 0x45, 0x54, 0x46,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x42, 0x53,
	0x10, 0xe5, 0xec, 0xdb, 0xfd, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x45, 0x42, 0x53, 0x12, 0x2f, 0x0a, 0x1f, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x62, 0x73, 0x63, 0x10, 0x9d, 0x8f, 0x92, 0xfe, 0x01, 0x1a, 0x06, 0x82, 0x41,
	0x03, 0x62, 0x73, 0x63, 0x12, 0x35, 0x0a, 0x22, 0x49, 0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x6d, 0x69, 0x6f, 0x78, 0x32, 0x35, 0x10, 0xb3, 0xe4, 0xb9, 0xff, 0x01,
	0x1a, 0x09, 0x82, 0x41, 0x06, 0x6d, 0x69, 0x6f, 0x78, 0x32, 0x35, 0x12, 0x31, 0x0a, 0x20, 0x49,
	0x45, 0x54, 0x46, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x68, 0x64, 0x6c, 0x63, 0x10,
	0xc0, 0xb2, 0xe4, 0xff, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x68, 0x64, 0x6c, 0x63, 0x2a, 0xb8,
	0x02, 0x0a, 0x28, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49,
	0x4e, 0x47, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x12, 0x32, 0x0a, 0x2e, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41, 0x41, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x41, 0x41, 0x41, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x69, 0x0a, 0x43, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41, 0x41,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x41, 0x41, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49,
	0x4e, 0x47, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x41, 0x41, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x82, 0x88, 0xb0, 0x0f, 0x1a, 0x1d, 0x82, 0x41, 0x1a,
	0x41, 0x41, 0x41, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x12, 0x6d, 0x0a, 0x45, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x41, 0x41, 0x41, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x41, 0x41, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x10, 0xea, 0xab, 0xa1, 0x14, 0x1a, 0x1f, 0x82, 0x41, 0x1c, 0x41, 0x41, 0x41,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x2a, 0xd4, 0x02, 0x0a, 0x2b, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x41, 0x41, 0x41, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x12, 0x35, 0x0a, 0x31, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41,
	0x41, 0x41, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x77, 0x0a, 0x4b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41,
	0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x41, 0x41, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x41, 0x41, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10,
	0xec, 0xda, 0xf2, 0x82, 0x01, 0x1a, 0x22, 0x82, 0x41, 0x1f, 0x41, 0x41, 0x41, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x12, 0x75, 0x0a, 0x4a, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41,
	0x41, 0x41, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x41, 0x41, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0xb7, 0xbb, 0xa2, 0xe0, 0x01, 0x1a, 0x21, 0x82,
	0x41, 0x1e, 0x41, 0x41, 0x41, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x2a, 0x8b, 0x02, 0x0a, 0x1f, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41,
	0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x41, 0x41, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x41, 0x41, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x41, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41, 0x41,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x41, 0x41, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x41, 0x43, 0x41, 0x43, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0xe4, 0xe2,
	0xef, 0xc7, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x54, 0x41, 0x43, 0x41, 0x43, 0x53, 0x5f, 0x41,
	0x4c, 0x4c, 0x12, 0x41, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x41, 0x41, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x41, 0x41, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x55, 0x53, 0x5f, 0x41, 0x4c, 0x4c,
	0x10, 0xcd, 0xf1, 0xd3, 0xea, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x52, 0x41, 0x44, 0x49, 0x55,
	0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x12, 0x37, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x41, 0x41, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x41, 0x41, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0xe0,
	0xd1, 0xe3, 0xfa, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x2a, 0xc0,
	0x01, 0x0a, 0x1f, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x61, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x41, 0x41, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x41, 0x41, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x41, 0x41, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x38, 0x0a,
	0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41, 0x41, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x41, 0x41, 0x41, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x41, 0x43, 0x41, 0x43, 0x53, 0x10, 0x8a, 0xbe, 0xea, 0x02, 0x1a, 0x09, 0x82, 0x41,
	0x06, 0x54, 0x41, 0x43, 0x41, 0x43, 0x53, 0x12, 0x38, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x41, 0x41,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x55,
	0x53, 0x10, 0xd7, 0xdb, 0x90, 0x09, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x52, 0x41, 0x44, 0x49, 0x55,
	0x53, 0x2a, 0xac, 0x01, 0x0a, 0x24, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x41, 0x61, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x52, 0x4f, 0x4c,
	0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x54, 0x0a, 0x36, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x41, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x52, 0x4f, 0x4c,
	0x45, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x10, 0xb8, 0xbb, 0xad, 0xba, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x2a, 0xbe, 0x02, 0x0a, 0x21, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41,
	0x63, 0x6c, 0x41, 0x43, 0x4c, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x41, 0x50, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45,
	0x52, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x4a, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x41,
	0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0xfd, 0x9a, 0xa5, 0x2f, 0x1a, 0x11, 0x82, 0x41,
	0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x12,
	0x54, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x4c,
	0x41, 0x43, 0x4c, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x88, 0xdd, 0xad, 0x3f, 0x1a, 0x16, 0x82,
	0x41, 0x13, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x47, 0x47, 0x52,
	0x45, 0x47, 0x41, 0x54, 0x45, 0x12, 0x4a, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52,
	0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45,
	0x47, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x85, 0xe8, 0x88, 0x7f, 0x1a, 0x11,
	0x82, 0x41, 0x0e, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x2a, 0xb6, 0x02, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x41, 0x63, 0x6c, 0x41, 0x43, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x1b, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x4c, 0x32, 0x10, 0xd3, 0x87, 0x92, 0x3f, 0x1a, 0x09,
	0x82, 0x41, 0x06, 0x41, 0x43, 0x4c, 0x5f, 0x4c, 0x32, 0x12, 0x31, 0x0a, 0x1d, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x91, 0x91, 0xe0, 0x6f, 0x1a,
	0x0b, 0x82, 0x41, 0x08, 0x41, 0x43, 0x4c, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x12, 0x32, 0x0a, 0x1d,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0xcc, 0xae,
	0xff, 0xc3, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x41, 0x43, 0x4c, 0x5f, 0x49, 0x50, 0x56, 0x34,
	0x12, 0x32, 0x0a, 0x1d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43,
	0x4c, 0x41, 0x43, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x49, 0x50, 0x56,
	0x36, 0x10, 0xce, 0xae, 0xff, 0xc3, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x41, 0x43, 0x4c, 0x5f,
	0x49, 0x50, 0x56, 0x36, 0x12, 0x34, 0x0a, 0x1e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x41, 0x43, 0x4c, 0x41, 0x43, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x4c,
	0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x10, 0xc2, 0xc9, 0x82, 0xe0, 0x01, 0x1a, 0x0c, 0x82, 0x41,
	0x09, 0x41, 0x43, 0x4c, 0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x2a, 0xee, 0x01, 0x0a, 0x1d, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x6c, 0x46, 0x4f, 0x52, 0x57,
	0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x27, 0x0a, 0x23,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x46, 0x4f, 0x52,
	0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x90, 0xbd,
	0xe3, 0x27, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x12, 0x33, 0x0a,
	0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x46, 0x4f,
	0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x10, 0xa6, 0xdb, 0xcd, 0x90, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x44, 0x52,
	0x4f, 0x50, 0x12, 0x37, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x41, 0x43, 0x4c, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x95, 0xd2, 0xda, 0xdd, 0x01,
	0x1a, 0x09, 0x82, 0x41, 0x06, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x2a, 0xa9, 0x01, 0x0a, 0x16,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x6c, 0x4c, 0x4f, 0x47,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x4c, 0x4f, 0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x4c, 0x4f, 0x47, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0xe1, 0xe3, 0x95, 0x58,
	0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4c, 0x4f, 0x47, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x12, 0x38, 0x0a,
	0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x4c, 0x4c, 0x4f,
	0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x4c,
	0x4f, 0x47, 0x10, 0xbc, 0xf0, 0xdf, 0xf4, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x4c, 0x4f, 0x47,
	0x5f, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x2a, 0x91, 0x03, 0x0a, 0x29, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e,
	0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x41, 0x46, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x41, 0x50,
	0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x39, 0x0a, 0x2d, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x46, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x48, 0x45, 0x41,
	0x44, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x10, 0x01, 0x1a, 0x06, 0x82,
	0x41, 0x03, 0x47, 0x52, 0x45, 0x12, 0x3b, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x41, 0x46, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x41, 0x50,
	0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50,
	0x56, 0x34, 0x12, 0x3b, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x41, 0x46, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x50, 0x56, 0x36, 0x10, 0x03, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x36, 0x12,
	0x3b, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x46, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c,
	0x53, 0x10, 0x04, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4d, 0x50, 0x4c, 0x53, 0x12, 0x3d, 0x0a, 0x2f,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x46, 0x54, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x48,
	0x45, 0x41, 0x44, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x10,
	0x05, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x2a, 0xc8, 0x03, 0x0a, 0x2b,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c,
	0x41, 0x52, 0x4d, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x12, 0x35, 0x0a, 0x31, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41,
	0x52, 0x4d, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x46, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xad, 0xc6, 0xce, 0x21, 0x1a, 0x0a,
	0x82, 0x41, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x12, 0x48, 0x0a, 0x34, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52,
	0x4d, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x10, 0x9a, 0xe5, 0xff, 0x3a, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x43, 0x52, 0x49, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x12, 0x42, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10, 0x84, 0xd3, 0xff, 0x4a, 0x1a, 0x08,
	0x82, 0x41, 0x05, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x12, 0x43, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x10, 0xc0, 0x94,
	0x93, 0x83, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x12, 0x47, 0x0a,
	0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41,
	0x4c, 0x41, 0x52, 0x4d, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x41, 0x52,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0xb3, 0xb2, 0xb4, 0xb5, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x57,
	0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x2a, 0xdd, 0x02, 0x0a, 0x29, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3e, 0x0a, 0x2e, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x49, 0x44, 0x5f, 0x45, 0x51, 0x50, 0x54, 0x10, 0xa2, 0xd0, 0x99, 0x1a,
	0x1a, 0x07, 0x82, 0x41, 0x04, 0x45, 0x51, 0x50, 0x54, 0x12, 0x3d, 0x0a, 0x2d, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x49, 0x44, 0x5f, 0x41, 0x49, 0x53, 0x10, 0xe5, 0x8f, 0xfa, 0xa9, 0x01,
	0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x49, 0x53, 0x12, 0x3d, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x53, 0x10, 0xfa, 0xda, 0xcb, 0xb9, 0x01, 0x1a,
	0x06, 0x82, 0x41, 0x03, 0x4c, 0x4f, 0x53, 0x12, 0x3d, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x53, 0x10, 0xc0, 0x83, 0xe6, 0xf1, 0x01, 0x1a, 0x06,
	0x82, 0x41, 0x03, 0x4f, 0x54, 0x53, 0x2a, 0x9a, 0x05, 0x0a, 0x1e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x66, 0x64, 0x42, 0x66, 0x64, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x46, 0x44, 0x42, 0x46, 0x44, 0x44, 0x49, 0x41,
	0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x42, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x42, 0x46, 0x44, 0x42, 0x46, 0x44, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49,
	0x43, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53,
	0x54, 0x49, 0x43, 0x10, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x4e, 0x4f, 0x5f, 0x44, 0x49, 0x41,
	0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x12, 0x4a, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x46, 0x44, 0x42, 0x46, 0x44, 0x44, 0x49, 0x41, 0x47, 0x4e,
	0x4f, 0x53, 0x54, 0x49, 0x43, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x1a, 0x14, 0x82,
	0x41, 0x11, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4f, 0x55, 0x54, 0x12, 0x3e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x42, 0x46, 0x44, 0x42, 0x46, 0x44, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49,
	0x43, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x03, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x12, 0x48, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x42, 0x46, 0x44, 0x42, 0x46, 0x44, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49,
	0x43, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x04, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x46, 0x4f, 0x52,
	0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x12, 0x3a, 0x0a,
	0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x46, 0x44, 0x42, 0x46,
	0x44, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x50, 0x41, 0x54, 0x48, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x1a, 0x0c, 0x82, 0x41, 0x09,
	0x50, 0x41, 0x54, 0x48, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x12, 0x54, 0x0a, 0x35, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x46, 0x44, 0x42, 0x46, 0x44, 0x44, 0x49, 0x41,
	0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x43,
	0x41, 0x54, 0x45, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x06, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54, 0x45,
	0x4e, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x12,
	0x3c, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x46, 0x44,
	0x42, 0x46, 0x44, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x1a, 0x0d,
	0x82, 0x41, 0x0a, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x12, 0x64, 0x0a,
	0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x46, 0x44, 0x42, 0x46,
	0x44, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x4e,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x08,
	0x1a, 0x21, 0x82, 0x41, 0x1e, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x43, 0x41, 0x54, 0x45, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x44,
	0x4f, 0x57, 0x4e, 0x2a, 0x8e, 0x02, 0x0a, 0x1c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x66, 0x64, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x42, 0x46, 0x44, 0x42, 0x46, 0x44, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x1f,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x46, 0x44, 0x42, 0x46, 0x44,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x10,
	0x01, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x55, 0x50, 0x12, 0x2e, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x46, 0x44, 0x42, 0x46, 0x44, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x1a,
	0x07, 0x82, 0x41, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x12, 0x3a, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x46, 0x44, 0x42, 0x46, 0x44, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x44,
	0x4f, 0x57, 0x4e, 0x10, 0x03, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f,
	0x44, 0x4f, 0x57, 0x4e, 0x12, 0x2e, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x42, 0x46, 0x44, 0x42, 0x46, 0x44, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x04, 0x1a, 0x07, 0x82, 0x41, 0x04,
	0x49, 0x4e, 0x49, 0x54, 0x2a, 0xba, 0x0a, 0x0a, 0x1d, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x46, 0x49, 0x53, 0x41,
	0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53,
	0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x52, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x33, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x9c, 0xcb, 0xc7, 0x19, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x4c,
	0x33, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43,
	0x41, 0x53, 0x54, 0x12, 0x4a, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x52, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x91, 0xa2, 0xfc, 0x1a, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x53,
	0x52, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x12,
	0x4a, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x52, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x49, 0x50, 0x56,
	0x36, 0x10, 0x93, 0xa2, 0xfc, 0x1a, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x53, 0x52, 0x54, 0x45, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x12, 0x44, 0x0a, 0x2b, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x50, 0x4e, 0x10, 0x80, 0xd6, 0x9d, 0x29, 0x1a,
	0x10, 0x82, 0x41, 0x0d, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x50,
	0x4e, 0x12, 0x52, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x33, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0xbe, 0xe3, 0xea, 0x51, 0x1a, 0x17, 0x82, 0x41,
	0x14, 0x4c, 0x33, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x43, 0x41, 0x53, 0x54, 0x12, 0x42, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41,
	0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x55, 0x4e, 0x49, 0x43,
	0x41, 0x53, 0x54, 0x10, 0xed, 0xb2, 0xf2, 0x5d, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x49, 0x50, 0x56,
	0x34, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x12, 0x3e, 0x0a, 0x28, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41,
	0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x32, 0x56, 0x50, 0x4e,
	0x5f, 0x45, 0x56, 0x50, 0x4e, 0x10, 0x98, 0x87, 0xe8, 0x65, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x4c,
	0x32, 0x56, 0x50, 0x4e, 0x5f, 0x45, 0x56, 0x50, 0x4e, 0x12, 0x43, 0x0a, 0x2a, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41,
	0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f,
	0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0xd3, 0xb6, 0xf4, 0x80, 0x01, 0x1a, 0x0f, 0x82,
	0x41, 0x0c, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x12, 0x53,
	0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x50, 0x56, 0x34, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x43, 0x41, 0x53, 0x54, 0x10, 0x9d, 0xb5, 0x8b, 0x85, 0x01, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x49,
	0x50, 0x56, 0x34, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x43,
	0x41, 0x53, 0x54, 0x12, 0x45, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x50, 0x46, 0x10, 0xf5, 0xa6, 0x82, 0x99, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x4c, 0x49, 0x4e,
	0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x50, 0x46, 0x12, 0x47, 0x0a, 0x2c, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x50, 0x4e, 0x56,
	0x34, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43, 0x10, 0xfe, 0xe9, 0xd3, 0xa1, 0x01,
	0x1a, 0x11, 0x82, 0x41, 0x0e, 0x56, 0x50, 0x4e, 0x56, 0x34, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x53,
	0x50, 0x45, 0x43, 0x12, 0x4f, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x33, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f,
	0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x95, 0xb1, 0xfb, 0xaa, 0x01, 0x1a, 0x15, 0x82,
	0x41, 0x12, 0x4c, 0x33, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x55, 0x4e, 0x49,
	0x43, 0x41, 0x53, 0x54, 0x12, 0x53, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46,
	0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x45, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0xb3, 0xaf, 0xcd, 0xc8, 0x01,
	0x1a, 0x17, 0x82, 0x41, 0x14, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x12, 0x4f, 0x0a, 0x30, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41,
	0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x33, 0x56, 0x50, 0x4e,
	0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0xbb, 0x92,
	0x96, 0xc9, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x4c, 0x33, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x50,
	0x56, 0x36, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x12, 0x45, 0x0a, 0x2b, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34,
	0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43, 0x10, 0xf3, 0xcf, 0xe9, 0xcd, 0x01, 0x1a,
	0x10, 0x82, 0x41, 0x0d, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45,
	0x43, 0x12, 0x3d, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x8d, 0xc3, 0xa2,
	0xf4, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x12, 0x3f, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47,
	0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x32, 0x56, 0x50, 0x4e, 0x5f, 0x56, 0x50, 0x4c, 0x53, 0x10, 0xa6, 0xbb, 0xac,
	0xfe, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x4c, 0x32, 0x56, 0x50, 0x4e, 0x5f, 0x56, 0x50, 0x4c,
	0x53, 0x2a, 0xe6, 0x02, 0x0a, 0x23, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41,
	0x53, 0x50, 0x41, 0x54, 0x48, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x39, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x53,
	0x50, 0x41, 0x54, 0x48, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x53, 0x5f, 0x53, 0x45, 0x51, 0x10, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x41, 0x53, 0x5f,
	0x53, 0x45, 0x51, 0x12, 0x39, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x53, 0x50, 0x41, 0x54, 0x48, 0x53,
	0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x53, 0x45,
	0x54, 0x10, 0x02, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x41, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x12, 0x51,
	0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x41, 0x53, 0x50, 0x41, 0x54, 0x48, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x44, 0x5f,
	0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x41,
	0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43,
	0x45, 0x12, 0x47, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x53, 0x50, 0x41, 0x54, 0x48, 0x53, 0x45, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x45, 0x44, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x41, 0x53, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x54, 0x2a, 0xf5, 0x03, 0x0a, 0x1f, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x42, 0x47, 0x50, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12, 0x29,
	0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x25, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42,
	0x47, 0x50, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x53, 0x4e,
	0x33, 0x32, 0x10, 0xf6, 0xbb, 0xd9, 0x0f, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x41, 0x53, 0x4e, 0x33,
	0x32, 0x12, 0x36, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x50, 0x42, 0x47, 0x50, 0x10, 0xe5, 0xfa, 0xb4, 0x21, 0x1a,
	0x08, 0x82, 0x41, 0x05, 0x4d, 0x50, 0x42, 0x47, 0x50, 0x12, 0x3e, 0x0a, 0x29, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42,
	0x47, 0x50, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x44, 0x44,
	0x5f, 0x50, 0x41, 0x54, 0x48, 0x53, 0x10, 0xeb, 0xf7, 0xc6, 0x6f, 0x1a, 0x0c, 0x82, 0x41, 0x09,
	0x41, 0x44, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x53, 0x12, 0x5f, 0x0a, 0x39, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42,
	0x47, 0x50, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x45, 0x4e,
	0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xb9, 0xca, 0xe4, 0x86, 0x01, 0x1a, 0x1c, 0x82, 0x41,
	0x19, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f,
	0x50, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x12, 0x47, 0x0a, 0x2d, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x42, 0x47, 0x50, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x10, 0x90, 0xd2, 0xac, 0xbb,
	0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x52,
	0x45, 0x53, 0x48, 0x12, 0x4d, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x43, 0x41, 0x50, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x52, 0x41, 0x43, 0x45, 0x46, 0x55, 0x4c, 0x5f,
	0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0xec, 0xfe, 0xe6, 0xe1, 0x01, 0x1a, 0x13, 0x82,
	0x41, 0x10, 0x47, 0x52, 0x41, 0x43, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x2a, 0x95, 0x05, 0x0a, 0x1e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x35, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x43, 0x45, 0x41, 0x53, 0x45, 0x10, 0xfa, 0xe2, 0x97, 0x28, 0x1a, 0x08, 0x82, 0x41,
	0x05, 0x43, 0x45, 0x41, 0x53, 0x45, 0x12, 0x4f, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0xfe, 0xc7, 0xeb, 0x29,
	0x1a, 0x15, 0x82, 0x41, 0x12, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x12, 0x53, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x95,
	0x88, 0xd8, 0x7b, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x60, 0x0a, 0x39,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x48,
	0x49, 0x4e, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x93, 0xbf, 0x98, 0xb3, 0x01, 0x1a,
	0x1d, 0x82, 0x41, 0x1a, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x54,
	0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x9d, 0xdb, 0x97, 0xc9, 0x01, 0x1a, 0x17, 0x82, 0x41, 0x14,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x12, 0x62, 0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x46,
	0x52, 0x45, 0x53, 0x48, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x9f, 0xc4, 0xb3, 0xdb, 0x01, 0x1a, 0x1e, 0x82, 0x41, 0x1b, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x50, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47,
	0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x96, 0xc9,
	0xeb, 0xdb, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x2a, 0xc0, 0x1c, 0x0a, 0x21, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45,
	0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47,
	0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55,
	0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x5a, 0x0a,
	0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45,
	0x52, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xa8, 0x94, 0xc3, 0x03, 0x1a, 0x19,
	0x82, 0x41, 0x16, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45,
	0x52, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x5a, 0x0a, 0x38, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42,
	0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xcf, 0xab, 0x82, 0x0a, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x41,
	0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x5a, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x10, 0xd5, 0xb6, 0xee, 0x0c, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x55, 0x4e, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x12, 0x58, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53,
	0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0xe6, 0xba, 0xf9,
	0x2a, 0x1a, 0x18, 0x82, 0x41, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x12, 0x52, 0x0a, 0x34, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x42, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x4e,
	0x47, 0x54, 0x48, 0x10, 0xd3, 0x97, 0x9d, 0x2b, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x42, 0x41, 0x44,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x12,
	0x56, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0xd5, 0xa8, 0x91, 0x30, 0x1a, 0x17,
	0x82, 0x41, 0x14, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x12, 0x5e, 0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa9, 0xbe, 0x8e, 0x3b, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x66, 0x0a, 0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0xd9, 0xf1, 0xe9, 0x3c, 0x1a, 0x1f,
	0x82, 0x41, 0x1c, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x45, 0x4c, 0x4c, 0x5f,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x12,
	0x66, 0x0a, 0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44,
	0x45, 0x10, 0xc6, 0xf8, 0xd6, 0x44, 0x1a, 0x1f, 0x82, 0x41, 0x1c, 0x46, 0x49, 0x4e, 0x49, 0x54,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f,
	0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x5e, 0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x45, 0x53, 0x5f, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x9a, 0xa6, 0xfa, 0x45, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x4d,
	0x41, 0x58, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x45, 0x53, 0x5f,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x12, 0x52, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x45, 0x45,
	0x52, 0x5f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x10,
	0x8a, 0xa2, 0x80, 0x4a, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x44, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x12, 0x6a, 0x0a, 0x40, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10,
	0xaf, 0xd9, 0x9f, 0x4e, 0x1a, 0x21, 0x82, 0x41, 0x1e, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x12, 0x74, 0x0a, 0x45, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x43,
	0x45, 0x49, 0x56, 0x45, 0x5f, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x45, 0x4e, 0x54,
	0x10, 0xdd, 0x88, 0xb5, 0x4e, 0x1a, 0x26, 0x82, 0x41, 0x23, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56,
	0x45, 0x5f, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x12, 0x5e, 0x0a,
	0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49,
	0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0xe8, 0xb0, 0xda, 0x51,
	0x1a, 0x1b, 0x82, 0x41, 0x18, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x49,
	0x47, 0x49, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x12, 0x4e, 0x0a,
	0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0xc3, 0xbe, 0xf6, 0x5a, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x42, 0x41, 0x44,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x5a, 0x0a,
	0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0xf2, 0x8c, 0xba, 0x5d, 0x1a, 0x19,
	0x82, 0x41, 0x16, 0x55, 0x4e, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x12, 0x60, 0x0a, 0x3b, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42,
	0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xe5, 0xde, 0x8e, 0x5f, 0x1a, 0x1c, 0x82,
	0x41, 0x19, 0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x49, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x5c, 0x0a, 0x39, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0xbe, 0x86, 0x9b, 0x65, 0x1a, 0x1a, 0x82,
	0x41, 0x17, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x12, 0x44, 0x0a, 0x2d, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42,
	0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42,
	0x41, 0x44, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x10, 0xfa, 0xaf, 0xee, 0x73, 0x1a,
	0x0e, 0x82, 0x41, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x12,
	0x58, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45,
	0x53, 0x48, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xaa, 0xbf, 0xb2, 0x78, 0x1a,
	0x18, 0x82, 0x41, 0x15, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53,
	0x48, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x49, 0x0a, 0x2f, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42,
	0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43,
	0x45, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xac, 0x99, 0xd3,
	0x85, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x43, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x55, 0x42,
	0x43, 0x4f, 0x44, 0x45, 0x12, 0x7b, 0x0a, 0x48, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56,
	0x45, 0x5f, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44,
	0x10, 0xe3, 0xe0, 0xd8, 0x8d, 0x01, 0x1a, 0x29, 0x82, 0x41, 0x26, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x56, 0x45, 0x5f, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45,
	0x44, 0x12, 0x57, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53,
	0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xa7, 0x84, 0xf0, 0x93,
	0x01, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x59, 0x0a, 0x37, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x86, 0xd6, 0x89, 0x98, 0x01, 0x1a, 0x18, 0x82, 0x41, 0x15,
	0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x65, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52,
	0x4f, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x10, 0xaa, 0xa2, 0xd5, 0x98, 0x01, 0x1a, 0x1e, 0x82, 0x41,
	0x1b, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x12, 0x55, 0x0a, 0x35,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xef, 0xca, 0xe3, 0x9e, 0x01, 0x1a, 0x16, 0x82, 0x41, 0x13,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x12, 0x5f, 0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d,
	0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x92, 0xe7, 0xae, 0xad, 0x01, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x4d, 0x41, 0x4c, 0x46,
	0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x12, 0x51, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52,
	0x4d, 0x45, 0x44, 0x5f, 0x41, 0x53, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0xc5, 0x9f, 0x9f, 0xae,
	0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f,
	0x41, 0x53, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x12, 0x71, 0x0a, 0x43, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x52,
	0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0xf4,
	0xd2, 0xf8, 0xb0, 0x01, 0x1a, 0x24, 0x82, 0x41, 0x21, 0x55, 0x4e, 0x52, 0x45, 0x43, 0x4f, 0x47,
	0x4e, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x12, 0x63, 0x0a, 0x3c, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0xeb, 0xfa, 0xa1, 0xb1, 0x01,
	0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x12,
	0x43, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x10,
	0xf6, 0xd2, 0xe8, 0xbd, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x43, 0x12, 0x5b, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0xec, 0xcb, 0xba, 0xc3, 0x01, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44,
	0x45, 0x12, 0x53, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53,
	0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0xb4, 0xbd, 0xea, 0xc4, 0x01, 0x1a,
	0x15, 0x82, 0x41, 0x12, 0x42, 0x41, 0x44, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x12, 0x5b, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x47,
	0x54, 0x48, 0x10, 0x8b, 0xfb, 0x87, 0xeb, 0x01, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x4e,
	0x47, 0x54, 0x48, 0x12, 0x63, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x45, 0x10, 0x9d, 0xd4, 0xde, 0xed, 0x01, 0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x12, 0x7b, 0x0a, 0x48, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47,
	0x50, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x52, 0x4d, 0x10, 0xed, 0xed, 0xd8, 0xf7, 0x01, 0x1a, 0x29, 0x82, 0x41, 0x26, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x52, 0x4d, 0x12, 0x4f, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f,
	0x46, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x10, 0xb1, 0xa7, 0xf4, 0xfc,
	0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x12, 0x55, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0xf0, 0x87, 0xe3, 0xfd, 0x01, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x2a, 0xfe, 0x03,
	0x0a, 0x2a, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x53, 0x54, 0x44, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x12, 0x34, 0x0a, 0x30,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x53, 0x54,
	0x44, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x49, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x53, 0x54, 0x44, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59,
	0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x10, 0xcb, 0x9f, 0xc5, 0x03, 0x1a,
	0x0c, 0x82, 0x41, 0x09, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x12, 0x5d, 0x0a,
	0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x53,
	0x54, 0x44, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x45,
	0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x44, 0x10,
	0xe5, 0xc4, 0xef, 0x23, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x44, 0x12, 0x43, 0x0a, 0x31,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x53, 0x54,
	0x44, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x50, 0x45, 0x45,
	0x52, 0x10, 0xf2, 0xe7, 0xf8, 0x24, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4e, 0x4f, 0x50, 0x45, 0x45,
	0x52, 0x12, 0x4f, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x53, 0x54, 0x44, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f,
	0x4e, 0x4f, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x10, 0xb4, 0x8e, 0xbb,
	0x3c, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x4e, 0x4f, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49,
	0x53, 0x45, 0x12, 0x5a, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x53, 0x54, 0x44, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59,
	0x5f, 0x47, 0x52, 0x41, 0x43, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0xdf, 0xce, 0xa8, 0xdf, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x47, 0x52, 0x41,
	0x43, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x2a, 0x81,
	0x02, 0x0a, 0x23, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x67, 0x70, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x4f,
	0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x4f, 0x52,
	0x49, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x47, 0x50,
	0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x49, 0x47, 0x50, 0x12, 0x33, 0x0a, 0x27, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x42, 0x47, 0x50, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x47, 0x50, 0x10, 0x02, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x45, 0x47, 0x50, 0x12,
	0x41, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x03, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x2a, 0xdd, 0x02, 0x0a, 0x1f, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x4d, 0x4d,
	0x55, 0x4e, 0x49, 0x54, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x39, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01, 0x1a,
	0x0b, 0x82, 0x41, 0x08, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x12, 0x39, 0x0a, 0x28,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x45,
	0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x12, 0x33, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x4d,
	0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45,
	0x10, 0x03, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x12, 0x31, 0x0a, 0x24,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x4f, 0x54, 0x48, 0x10, 0x04, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x42, 0x4f, 0x54, 0x48, 0x12,
	0x31, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x05, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x2a, 0xae, 0x01, 0x0a, 0x1a, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x45, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x45, 0x45,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01,
	0x1a, 0x0b, 0x82, 0x41, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x12, 0x34, 0x0a,
	0x23, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x50, 0x45, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x2a, 0xa0, 0x02, 0x0a, 0x27, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x31, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x41, 0x53, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x61, 0x0a, 0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x41, 0x53, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x5f, 0x41, 0x4c, 0x4c, 0x10, 0xe5, 0x9a, 0xac, 0xe9, 0x01, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43,
	0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x12, 0x5f, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x45, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x41, 0x53, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x56, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x97, 0xfe, 0x9f, 0xf7, 0x01, 0x1a, 0x18, 0x82, 0x41,
	0x15, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x56, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x2a, 0x83, 0x02, 0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x76, 0x70, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x56,
	0x50, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x45, 0x56, 0x50, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x56, 0x50,
	0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3d, 0x0a,
	0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x45, 0x56, 0x50, 0x4e, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x45, 0x56, 0x50, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4c, 0x41,
	0x4e, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x45, 0x10, 0xc1, 0xd3, 0xf7, 0xaf, 0x01, 0x1a, 0x0d, 0x82,
	0x41, 0x0a, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x45, 0x12, 0x3f, 0x0a, 0x27,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x45, 0x56, 0x50, 0x4e, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x45, 0x56, 0x50, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4c, 0x41, 0x4e,
	0x5f, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0xa9, 0x91, 0xf6, 0xba, 0x01, 0x1a, 0x0e, 0x82,
	0x41, 0x0b, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x12, 0x3d, 0x0a,
	0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x45, 0x56, 0x50, 0x4e, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x45, 0x56, 0x50, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4c, 0x41,
	0x4e, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0xf2, 0xa1, 0xbd, 0xe5, 0x01, 0x1a, 0x0d, 0x82,
	0x41, 0x0a, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x2a, 0xd0, 0x01, 0x0a,
	0x1f, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x76, 0x70, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x29, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x45, 0x56,
	0x50, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x43, 0x0a, 0x2d, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x45, 0x56, 0x50, 0x4e, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x01, 0x1a, 0x10,
	0x82, 0x41, 0x0d, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x45,
	0x12, 0x3d, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x45, 0x56,
	0x50, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x02,
	0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x2a,
	0x89, 0x29, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x63,
	0x6d, 0x70, 0x76, 0x34, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x23, 0x0a,
	0x1f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56,
	0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x62, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x45, 0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4d,
	0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x97,
	0xb1, 0xf5, 0x12, 0x1a, 0x21, 0x82, 0x41, 0x1e, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x12, 0x66, 0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45,
	0x4d, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0xbf, 0xf2, 0xb6, 0x18, 0x1a, 0x23, 0x82, 0x41, 0x20, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x64,
	0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50,
	0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f,
	0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f,
	0x4e, 0x45, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xa3, 0xe8, 0xbc, 0x1d,
	0x1a, 0x22, 0x82, 0x41, 0x1f, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x12, 0x4e, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x4f, 0x53, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x8e, 0xfe, 0xea, 0x1e, 0x1a, 0x17, 0x82, 0x41, 0x14,
	0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x4f, 0x53, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x12, 0x46, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x55, 0x52, 0x49, 0x53, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x53,
	0x50, 0x49, 0x10, 0xc5, 0xdf, 0xec, 0x26, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x50, 0x48, 0x4f, 0x54,
	0x55, 0x52, 0x49, 0x53, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x53, 0x50, 0x49, 0x12, 0x68, 0x0a, 0x3b,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x55, 0x54, 0x4f, 0x46, 0x46, 0x10, 0xbd, 0xf9, 0x8b, 0x28,
	0x1a, 0x24, 0x82, 0x41, 0x21, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x43, 0x55, 0x54, 0x4f, 0x46, 0x46, 0x12, 0x68, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x49, 0x53, 0x4f,
	0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0xd6, 0xab, 0xce, 0x29, 0x1a, 0x24, 0x82, 0x41, 0x21, 0x44,
	0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53,
	0x52, 0x43, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44,
	0x12, 0x4c, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43,
	0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58,
	0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x10, 0xe0, 0xb9, 0xe8, 0x2c, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x45, 0x58, 0x54, 0x5f, 0x45,
	0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x4e,
	0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50,
	0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0xb9, 0x80, 0xe5, 0x2f, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54,
	0x41, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x5a,
	0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50,
	0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54,
	0x55, 0x52, 0x49, 0x53, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xdc, 0xb4, 0xf7, 0x33, 0x1a, 0x1d, 0x82, 0x41, 0x1a,
	0x50, 0x48, 0x4f, 0x54, 0x55, 0x52, 0x49, 0x53, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x12, 0x50, 0x0a, 0x2f, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xf5, 0xf0,
	0x91, 0x39, 0x1a, 0x18, 0x82, 0x41, 0x15, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x7a, 0x0a, 0x44,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43,
	0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c,
	0x45, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x53, 0x41, 0x54, 0x49, 0x53, 0x46, 0x59, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x10, 0xca, 0xd4, 0xa8, 0x3b, 0x1a, 0x2d, 0x82, 0x41, 0x2a, 0x45, 0x58,
	0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x53, 0x41, 0x54, 0x49, 0x53,
	0x46, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x12, 0x46, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0xf5, 0x90, 0xc0, 0x4b, 0x1a, 0x13, 0x82, 0x41, 0x10,
	0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x12, 0x4a, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43,
	0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0xbf, 0xc5, 0xb3, 0x56, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x64, 0x0a, 0x39,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xc1, 0x84, 0xa7, 0x5c, 0x1a, 0x22,
	0x82, 0x41, 0x1f, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x12, 0x78, 0x0a, 0x43, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x48, 0x4f, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xb8, 0xf5, 0xdc, 0x5d, 0x1a, 0x2c,
	0x82, 0x41, 0x29, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44, 0x45, 0x4e,
	0x43, 0x45, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x76, 0x0a, 0x42,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x4e, 0x45,
	0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54,
	0x45, 0x44, 0x10, 0xc1, 0x8f, 0xe4, 0x5e, 0x1a, 0x2b, 0x82, 0x41, 0x28, 0x44, 0x53, 0x54, 0x5f,
	0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f,
	0x4e, 0x45, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42,
	0x49, 0x54, 0x45, 0x44, 0x12, 0x5a, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x55, 0x52, 0x49, 0x53, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x59,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xfa, 0xd7, 0xa5,
	0x62, 0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x50, 0x48, 0x4f, 0x54, 0x55, 0x52, 0x49, 0x53, 0x5f, 0x44,
	0x45, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x12, 0x4e, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43,
	0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x53,
	0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x48, 0x4f,
	0x53, 0x54, 0x10, 0xa1, 0xfd, 0xff, 0x66, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x44, 0x53, 0x54, 0x5f,
	0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54,
	0x12, 0x5c, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43,
	0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0xf3, 0xd1, 0xba, 0x68, 0x1a, 0x1e,
	0x82, 0x41, 0x1b, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54,
	0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x12, 0x56,
	0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50,
	0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x49, 0x54, 0x10, 0x93, 0xec, 0xfe, 0x69, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x12, 0x56, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xfc, 0xca, 0xa6,
	0x6a, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4c,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x56,
	0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50,
	0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f,
	0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x10, 0xdb, 0xd8, 0x94, 0x6c, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x44, 0x53,
	0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x12, 0x5c, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x55, 0x52, 0x49, 0x53, 0x5f, 0x4e, 0x45, 0x45,
	0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0xdf, 0xa9, 0xe2, 0x71, 0x1a, 0x1e, 0x82, 0x41, 0x1b, 0x50, 0x48, 0x4f, 0x54, 0x55, 0x52, 0x49,
	0x53, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x12, 0x4e, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xb0, 0xf6, 0xa1, 0x74, 0x1a, 0x17, 0x82, 0x41, 0x14,
	0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x12, 0x48, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x4e, 0x4f, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x10, 0xd4, 0xab, 0xe2, 0x7b, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x54, 0x49, 0x4d,
	0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x4e,
	0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50,
	0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54,
	0x55, 0x52, 0x49, 0x53, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0xe9, 0xf7, 0x8f, 0x7d, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x50, 0x48, 0x4f, 0x54, 0x55, 0x52,
	0x49, 0x53, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x12, 0x4a,
	0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50,
	0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x81,
	0x9c, 0xf9, 0x7e, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x55, 0x0a, 0x31, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0xf9, 0xbf, 0x82, 0x81, 0x01, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43,
	0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x12, 0x69, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45,
	0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x4f,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x10, 0xcd, 0xbb, 0xfc, 0x81, 0x01, 0x1a, 0x24, 0x82, 0x41, 0x21, 0x45, 0x58, 0x54, 0x5f, 0x45,
	0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x12, 0x67, 0x0a, 0x3a,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xaf, 0x8e, 0xab, 0x83, 0x01,
	0x1a, 0x23, 0x82, 0x41, 0x20, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x12, 0x41, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x55, 0x52, 0x49, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0xb2, 0xc3, 0xc4, 0x85, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x50, 0x48, 0x4f, 0x54, 0x55,
	0x52, 0x49, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x39, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0xc7, 0xec, 0xe5, 0x86, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x12, 0x57, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x42,
	0x41, 0x44, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0xd0, 0xb6, 0xef, 0x8b, 0x01, 0x1a,
	0x1b, 0x82, 0x41, 0x18, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45,
	0x4d, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x12, 0x41, 0x0a, 0x27,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0xbb, 0xba, 0x8b, 0x94, 0x01, 0x1a, 0x10, 0x82,
	0x41, 0x0d, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x12,
	0x55, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d,
	0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x10, 0xd1, 0xa4, 0xf6, 0x9c, 0x01, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x54,
	0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e,
	0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x5d, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x10,
	0xe4, 0x87, 0xe0, 0x9d, 0x01, 0x1a, 0x1e, 0x82, 0x41, 0x1b, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43,
	0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x43, 0x48,
	0x5f, 0x49, 0x4e, 0x54, 0x46, 0x12, 0x67, 0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0xee, 0xa2, 0x8a, 0xa4, 0x01, 0x1a, 0x23, 0x82, 0x41, 0x20, 0x44, 0x53,
	0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x53,
	0x54, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x12, 0x4f,
	0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50,
	0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f,
	0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x10, 0xae, 0xf8, 0x8a, 0xa4, 0x01, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x44, 0x53, 0x54, 0x5f, 0x55,
	0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x12,
	0x3f, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d,
	0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x43, 0x48,
	0x4f, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x87, 0xef, 0xfe, 0xab, 0x01, 0x1a,
	0x0f, 0x82, 0x41, 0x0c, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x12, 0x7b, 0x0a, 0x44, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43,
	0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0xd7, 0xa3, 0xc4, 0xb5, 0x01, 0x1a, 0x2d,
	0x82, 0x41, 0x2a, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54,
	0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x12, 0x45, 0x0a,
	0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56,
	0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0xbd, 0xec, 0x8f, 0xb7, 0x01,
	0x1a, 0x12, 0x82, 0x41, 0x0f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x12, 0x77, 0x0a, 0x42, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x53, 0x10, 0xb9, 0xee, 0xc3, 0xb9, 0x01,
	0x1a, 0x2b, 0x82, 0x41, 0x28, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43,
	0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x53, 0x12, 0x4d, 0x0a,
	0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56,
	0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x55,
	0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x10, 0xa4,
	0xf4, 0xcc, 0xbd, 0x01, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52,
	0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x12, 0x5f, 0x0a, 0x36,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x55, 0x52,
	0x49, 0x53, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x80, 0x97, 0x8f, 0xbf, 0x01, 0x1a, 0x1f, 0x82, 0x41,
	0x1c, 0x50, 0x48, 0x4f, 0x54, 0x55, 0x52, 0x49, 0x53, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x59, 0x0a,
	0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56,
	0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x45,
	0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0xa4, 0x8d, 0x99, 0xc0, 0x01, 0x1a, 0x1c, 0x82, 0x41, 0x19, 0x45,
	0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x49, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x54,
	0x4f, 0x53, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x82, 0xb8, 0xfb, 0xc6, 0x01, 0x1a, 0x14, 0x82,
	0x41, 0x11, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x4f, 0x53, 0x5f, 0x48,
	0x4f, 0x53, 0x54, 0x12, 0x43, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0xe6, 0x8b, 0x9e, 0xc7, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54,
	0x41, 0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x67, 0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43,
	0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x48,
	0x49, 0x42, 0x49, 0x54, 0x45, 0x44, 0x10, 0x9d, 0xf0, 0xc5, 0xc9, 0x01, 0x1a, 0x23, 0x82, 0x41,
	0x20, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x45,
	0x44, 0x12, 0x6d, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x45, 0x53, 0x5f, 0x45,
	0x52, 0x52, 0x10, 0xb6, 0xb6, 0xb4, 0xd4, 0x01, 0x1a, 0x26, 0x82, 0x41, 0x23, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x45, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x12, 0x75, 0x0a, 0x41, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43,
	0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x53,
	0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x45,
	0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x4f,
	0x52, 0x5f, 0x54, 0x4f, 0x53, 0x10, 0xc0, 0xb7, 0xc0, 0xd5, 0x01, 0x1a, 0x2a, 0x82, 0x41, 0x27,
	0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x4e, 0x45, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x46, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x53, 0x12, 0x59, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45,
	0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xad,
	0x93, 0xb5, 0xd7, 0x01, 0x1a, 0x1c, 0x82, 0x41, 0x19, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f,
	0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x12, 0x45, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0xc8, 0xb4, 0xc1, 0xda, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x51, 0x0a, 0x2f, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x45,
	0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xae, 0xb7, 0xd3,
	0xe3, 0x01, 0x1a, 0x18, 0x82, 0x41, 0x15, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x45,
	0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x79, 0x0a, 0x43,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x48, 0x4f,
	0x53, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49,
	0x54, 0x45, 0x44, 0x10, 0xc6, 0xa4, 0xf6, 0xe3, 0x01, 0x1a, 0x2c, 0x82, 0x41, 0x29, 0x44, 0x53,
	0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x53,
	0x54, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x48, 0x49, 0x42, 0x49, 0x54, 0x45, 0x44, 0x12, 0x7f, 0x0a, 0x46, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44,
	0x45, 0x44, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x53, 0x45, 0x4d, 0x42, 0x4c, 0x59, 0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49,
	0x54, 0x10, 0xf8, 0xe7, 0x9e, 0xee, 0x01, 0x1a, 0x2f, 0x82, 0x41, 0x2c, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x53, 0x45, 0x4d, 0x42, 0x4c, 0x59, 0x5f, 0x49, 0x4e,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x12, 0x41, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x10, 0xf2, 0xac, 0xfb, 0xfc, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x52, 0x45,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x2a, 0xd3, 0x07, 0x0a, 0x19,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x34,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x59, 0x50, 0x45, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3f,
	0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50,
	0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xca, 0x82, 0x42, 0x1a, 0x10, 0x82,
	0x41, 0x0d, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x12,
	0x46, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d,
	0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54,
	0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x9c, 0xd5,
	0xe4, 0x0b, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x12, 0x44, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x59, 0x10, 0xb6, 0xc4, 0xf9, 0x19, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x54, 0x49,
	0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x12, 0x4c, 0x0a,
	0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56,
	0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xdd,
	0xf2, 0x95, 0x2f, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x53,
	0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x36, 0x0a, 0x22, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x10, 0xdd, 0xd4, 0x8f, 0x4e, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x52, 0x45, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x12, 0x44, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0xa9, 0xa6, 0xff, 0x59, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x12, 0x4f, 0x0a, 0x2e, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44,
	0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xcc, 0x8d, 0x87, 0x86,
	0x01, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x56,
	0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x12, 0x39, 0x0a, 0x23, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d,
	0x50, 0x10, 0xb7, 0xb0, 0xde, 0xb5, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x54, 0x49, 0x4d, 0x45,
	0x53, 0x54, 0x41, 0x4d, 0x50, 0x12, 0x2f, 0x0a, 0x1e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x10, 0xba, 0xd4, 0xe9, 0xb8, 0x01, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x45, 0x43, 0x48, 0x4f, 0x12, 0x43, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x59, 0x10, 0x8f, 0xba, 0x8f, 0xcf, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x45, 0x58, 0x54,
	0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x12, 0x3b, 0x0a, 0x24, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45,
	0x50, 0x4c, 0x59, 0x10, 0xa7, 0x9d, 0xc9, 0xd1, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x45, 0x43,
	0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x12, 0x37, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x55, 0x52, 0x49, 0x53, 0x10, 0xed,
	0xcc, 0xfc, 0xe5, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x50, 0x48, 0x4f, 0x54, 0x55, 0x52, 0x49,
	0x53, 0x12, 0x3b, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x43, 0x4d, 0x50, 0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x43, 0x45, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x83, 0x80, 0xe7, 0xe7, 0x01, 0x1a,
	0x0d, 0x82, 0x41, 0x0a, 0x54, 0x52, 0x41, 0x43, 0x45, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x12, 0x41,
	0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50,
	0x56, 0x34, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x10, 0x90, 0xf4, 0x9d, 0xff, 0x01, 0x1a,
	0x10, 0x82, 0x41, 0x0d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45,
	0x4d, 0x2a, 0xa9, 0x47, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x4f, 0x44, 0x45, 0x12,
	0x23, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d,
	0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x7e, 0x0a, 0x46, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xc3,
	0xb7, 0xaa, 0x01, 0x1a, 0x2f, 0x82, 0x41, 0x2c, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x12, 0x54, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f,
	0x48, 0x4f, 0x50, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0xbf, 0xbf, 0xa9, 0x02, 0x1a, 0x1a,
	0x82, 0x41, 0x17, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x12, 0x72, 0x0a, 0x40, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x45, 0x44, 0x41, 0x52, 0x5f, 0x52, 0x4f, 0x56, 0x52, 0x32, 0x35, 0x36, 0x10, 0xfe,
	0xf2, 0xe8, 0x08, 0x1a, 0x29, 0x82, 0x41, 0x26, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x45, 0x44, 0x41, 0x52, 0x5f, 0x52, 0x4f, 0x56, 0x52, 0x32, 0x35, 0x36, 0x12, 0x6c,
	0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50,
	0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f,
	0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x45, 0x59, 0x4f,
	0x4e, 0x44, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x52, 0x43, 0x10,
	0xca, 0x9e, 0xe7, 0x0a, 0x1a, 0x26, 0x82, 0x41, 0x23, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52,
	0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x45, 0x59, 0x4f, 0x4e, 0x44, 0x5f,
	0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x52, 0x43, 0x12, 0x6c, 0x0a, 0x3d,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45,
	0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x87, 0x9b,
	0xa0, 0x11, 0x1a, 0x26, 0x82, 0x41, 0x23, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x52,
	0x45, 0x46, 0x49, 0x58, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x66, 0x0a, 0x3a, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x49,
	0x50, 0x56, 0x36, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x8e, 0x89, 0xb6, 0x11, 0x1a, 0x23, 0x82,
	0x41, 0x20, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x12, 0x6c, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x55, 0x4e,
	0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f,
	0x4f, 0x50, 0x54, 0x10, 0xd5, 0x83, 0xe7, 0x12, 0x1a, 0x26, 0x82, 0x41, 0x23, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x43,
	0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4f, 0x50, 0x54,
	0x12, 0x62, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43,
	0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58,
	0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x41, 0x4c,
	0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x97, 0xb1, 0xf5,
	0x12, 0x1a, 0x21, 0x82, 0x41, 0x1e, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x12, 0x6e, 0x0a, 0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x5f, 0x52,
	0x4f, 0x56, 0x52, 0x31, 0x32, 0x38, 0x10, 0x86, 0x9e, 0xf8, 0x13, 0x1a, 0x27, 0x82, 0x41, 0x24,
	0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x5f, 0x52, 0x4f, 0x56,
	0x52, 0x31, 0x32, 0x38, 0x12, 0x5c, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x9a, 0xb0,
	0xde, 0x17, 0x1a, 0x1e, 0x82, 0x41, 0x1b, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x12, 0x78, 0x0a, 0x43, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xf3, 0xe3, 0xd1, 0x22, 0x1a, 0x2c,
	0x82, 0x41, 0x29, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x5c, 0x0a, 0x35,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59,
	0x5f, 0x4f, 0x50, 0x54, 0x53, 0x10, 0xc9, 0xdf, 0x87, 0x28, 0x1a, 0x1e, 0x82, 0x41, 0x1b, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x54, 0x4f, 0x4f,
	0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x4f, 0x50, 0x54, 0x53, 0x12, 0x6c, 0x0a, 0x3d, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f,
	0x45, 0x44, 0x41, 0x43, 0x5f, 0x52, 0x4f, 0x56, 0x52, 0x36, 0x34, 0x10, 0x89, 0xfb, 0x9e, 0x29,
	0x1a, 0x26, 0x82, 0x41, 0x23, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45, 0x44, 0x41,
	0x43, 0x5f, 0x52, 0x4f, 0x56, 0x52, 0x36, 0x34, 0x12, 0x66, 0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x50, 0x56,
	0x34, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0xac, 0xb8, 0xa7, 0x2b, 0x1a, 0x23, 0x82, 0x41, 0x20,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x12, 0x4c, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43,
	0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58,
	0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x10, 0xe0, 0xb9, 0xe8, 0x2c, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x45, 0x58, 0x54, 0x5f, 0x45,
	0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x66,
	0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50,
	0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x45, 0x52, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xf4, 0x82, 0xde,
	0x31, 0x1a, 0x23, 0x82, 0x41, 0x20, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4e,
	0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x50, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xf5, 0xf0, 0x91, 0x39, 0x1a, 0x18,
	0x82, 0x41, 0x15, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x6a, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45,
	0x46, 0x49, 0x58, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x8c, 0xcd, 0xfe, 0x39, 0x1a, 0x25, 0x82,
	0x41, 0x22, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f,
	0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x12, 0x7a, 0x0a, 0x44, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x53,
	0x41, 0x54, 0x49, 0x53, 0x46, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0xca, 0xd4, 0xa8,
	0x3b, 0x1a, 0x2d, 0x82, 0x41, 0x2a, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x49, 0x4e,
	0x54, 0x46, 0x5f, 0x53, 0x41, 0x54, 0x49, 0x53, 0x46, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x12, 0x5c, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43,
	0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x55,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x44, 0x41, 0x43, 0x10, 0xd4, 0x81, 0xb3, 0x4e, 0x1a, 0x1e,
	0x82, 0x41, 0x1b, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x44, 0x41, 0x43, 0x12, 0x52,
	0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50,
	0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x42, 0x49, 0x47, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x10, 0xd8, 0xd5, 0xb3, 0x53, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x42, 0x49, 0x47, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x12, 0x4a, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x10, 0xbf, 0xc5, 0xb3, 0x56, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x6a,
	0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50,
	0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45,
	0x52, 0x53, 0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x53, 0x4f, 0x4c,
	0x49, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xaa,
	0xbc, 0x8a, 0x58, 0x1a, 0x25, 0x82, 0x41, 0x22, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f,
	0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x74, 0x0a, 0x41, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52,
	0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a,
	0x45, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x5f, 0x48, 0x44, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0xb5, 0xf8, 0xae, 0x58, 0x1a, 0x2a, 0x82, 0x41, 0x27, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49,
	0x5a, 0x45, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x5f, 0x48, 0x44, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x12, 0x68, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43,
	0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x85, 0xf4, 0xf2, 0x5b, 0x1a, 0x24, 0x82, 0x41, 0x21, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x12, 0x60, 0x0a, 0x37, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52,
	0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xb1, 0xe8, 0xdb, 0x5d, 0x1a, 0x20, 0x82, 0x41, 0x1d, 0x4e,
	0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x76, 0x0a, 0x42,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e,
	0x49, 0x5a, 0x45, 0x44, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x44, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x9f, 0x9c, 0x87, 0x60, 0x1a, 0x2b, 0x82, 0x41, 0x28, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x43, 0x4f,
	0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x44, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x60, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x45, 0x4e, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0xc6, 0xf6, 0xfd, 0x64, 0x1a, 0x20, 0x82, 0x41, 0x1d, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41,
	0x53, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x5e, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x45, 0x4e, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0xf2, 0x95, 0xa0, 0x67, 0x1a, 0x1f, 0x82, 0x41, 0x1c, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43,
	0x41, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x4e,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x64, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49,
	0x58, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x10, 0xfe, 0xd0, 0xc6, 0x6d, 0x1a, 0x22, 0x82, 0x41, 0x1f, 0x4d, 0x4f, 0x42,
	0x49, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x43,
	0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x6a, 0x0a, 0x3c,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x5f, 0x48, 0x44, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0xc1, 0x87, 0xe4,
	0x6e, 0x1a, 0x25, 0x82, 0x41, 0x22, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42,
	0x4c, 0x45, 0x4d, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x48,
	0x44, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x12, 0x70, 0x0a, 0x3f, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x45, 0x44, 0x41, 0x52, 0x5f, 0x52, 0x4f, 0x56, 0x52, 0x36, 0x34, 0x10, 0xd5, 0x90, 0xdf, 0x6f,
	0x1a, 0x28, 0x82, 0x41, 0x25, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45,
	0x44, 0x41, 0x52, 0x5f, 0x52, 0x4f, 0x56, 0x52, 0x36, 0x34, 0x12, 0x58, 0x0a, 0x33, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4e, 0x55, 0x4e, 0x42, 0x45, 0x52,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x51, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x10, 0xa0, 0x91, 0xa0, 0x72, 0x1a, 0x1c, 0x82, 0x41, 0x19, 0x52, 0x45, 0x4e, 0x55, 0x4e,
	0x42, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x51, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x52,
	0x45, 0x53, 0x45, 0x54, 0x12, 0x5a, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x43,
	0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xd9, 0x85, 0xdc,
	0x72, 0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x53,
	0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x12, 0x4e, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43,
	0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x53,
	0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x10, 0xb0, 0xf6, 0xa1, 0x74, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x44, 0x53, 0x54, 0x5f,
	0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x12, 0x62, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43,
	0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x44,
	0x44, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xbc, 0xb5, 0xc5,
	0x75, 0x1a, 0x21, 0x82, 0x41, 0x1e, 0x4e, 0x44, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x12, 0x62, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52,
	0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0xc8, 0xa8, 0xb8, 0x78, 0x1a, 0x21, 0x82, 0x41, 0x1e, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42,
	0x4f, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x62, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x10, 0xf4, 0xa7, 0xda, 0x7a, 0x1a, 0x21, 0x82, 0x41, 0x1e, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x46, 0x0a, 0x2a,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xae, 0xb0, 0x9c, 0x7d, 0x1a,
	0x13, 0x82, 0x41, 0x10, 0x52, 0x45, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x12, 0x4a, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x10, 0x81, 0x9c, 0xf9, 0x7e, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x12, 0x4d, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43,
	0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x10, 0xe0, 0xd1, 0x91, 0x80, 0x01, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x52, 0x45, 0x4e, 0x55,
	0x4d, 0x42, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x12,
	0x55, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d,
	0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x54,
	0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0xf9, 0xbf, 0x82, 0x81, 0x01, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45,
	0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x4f,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x4f, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x92, 0xbb, 0x89, 0x81, 0x01, 0x1a, 0x17,
	0x82, 0x41, 0x14, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x12, 0x69, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x52,
	0x45, 0x46, 0x55, 0x53, 0x45, 0x44, 0x10, 0xc4, 0x92, 0xf6, 0x83, 0x01, 0x1a, 0x24, 0x82, 0x41,
	0x21, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53,
	0x45, 0x44, 0x12, 0x73, 0x0a, 0x40, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x53, 0x52, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0xb6, 0xeb, 0xbf, 0x88, 0x01, 0x1a, 0x29, 0x82, 0x41,
	0x26, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x53, 0x52, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x12, 0x69, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x45, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4e,
	0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xd2, 0x96, 0xf6, 0x8a, 0x01, 0x1a, 0x24, 0x82, 0x41,
	0x21, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45,
	0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x12, 0x5f, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x97, 0xe4, 0x88,
	0x8b, 0x01, 0x1a, 0x1f, 0x82, 0x41, 0x1c, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x12, 0x6f, 0x0a, 0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x45,
	0x58, 0x54, 0x5f, 0x48, 0x44, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4f,
	0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0xdc, 0x9a, 0xc5, 0x8d, 0x01, 0x1a, 0x27, 0x82, 0x41, 0x24,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x45, 0x58,
	0x54, 0x5f, 0x48, 0x44, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x5f,
	0x4c, 0x4f, 0x4e, 0x47, 0x12, 0x61, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x41, 0x52, 0x10,
	0xc2, 0xcf, 0xe4, 0x95, 0x01, 0x1a, 0x20, 0x82, 0x41, 0x1d, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x44, 0x41, 0x52, 0x12, 0x59, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c,
	0x45, 0x4d, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x42, 0x49, 0x47, 0x10, 0xab,
	0x9d, 0xcc, 0x97, 0x01, 0x1a, 0x1c, 0x82, 0x41, 0x19, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x42,
	0x49, 0x47, 0x12, 0x67, 0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x41, 0x44,
	0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0xc7, 0xf0, 0x9a, 0x9e, 0x01, 0x1a, 0x23, 0x82, 0x41, 0x20, 0x4d, 0x4f, 0x42, 0x49, 0x4c,
	0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49,
	0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x4f, 0x0a, 0x2e, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52,
	0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0xae, 0xf8,
	0x8a, 0xa4, 0x01, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x12, 0x75, 0x0a, 0x41,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x41,
	0x47, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x10, 0xca, 0xca, 0xa7, 0xa5, 0x01, 0x1a, 0x2a, 0x82, 0x41, 0x27, 0x48, 0x4f, 0x4d, 0x45,
	0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x12, 0x65, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x54,
	0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x44, 0x52, 0x53,
	0x10, 0xde, 0xd6, 0xd7, 0xa5, 0x01, 0x1a, 0x22, 0x82, 0x41, 0x1f, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e,
	0x59, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x44, 0x52, 0x53, 0x12, 0x6b, 0x0a, 0x3c, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x43, 0x48, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0xc0, 0x91, 0xb6, 0xa9, 0x01,
	0x1a, 0x25, 0x82, 0x41, 0x22, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45,
	0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x43, 0x48, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x12, 0x5f, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45,
	0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x10, 0xd5, 0xd4, 0xe5, 0xab, 0x01, 0x1a, 0x1f, 0x82, 0x41, 0x1c, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x6f, 0x0a, 0x3e, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45, 0x44,
	0x41, 0x43, 0x5f, 0x52, 0x4f, 0x56, 0x52, 0x32, 0x35, 0x36, 0x10, 0xba, 0x80, 0x96, 0xac, 0x01,
	0x1a, 0x27, 0x82, 0x41, 0x24, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45, 0x44, 0x41,
	0x43, 0x5f, 0x52, 0x4f, 0x56, 0x52, 0x32, 0x35, 0x36, 0x12, 0x57, 0x0a, 0x32, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x4f,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0xfc, 0x80, 0xcf, 0xad, 0x01, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52,
	0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x12, 0x5d, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x5f, 0x48, 0x44, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x8b, 0xd5, 0xdc, 0xad,
	0x01, 0x1a, 0x1e, 0x82, 0x41, 0x1b, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42,
	0x4c, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x48, 0x44, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x12, 0x73, 0x0a, 0x40, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44,
	0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x44, 0x41, 0x52, 0x5f, 0x52, 0x4f,
	0x56, 0x52, 0x31, 0x32, 0x38, 0x10, 0x8a, 0xc5, 0xca, 0xb0, 0x01, 0x1a, 0x29, 0x82, 0x41, 0x26,
	0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x44, 0x41, 0x52, 0x5f, 0x52,
	0x4f, 0x56, 0x52, 0x31, 0x32, 0x38, 0x12, 0x73, 0x0a, 0x40, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47,
	0x48, 0x42, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xe3, 0xae, 0x8c, 0xb2, 0x01,
	0x1a, 0x29, 0x82, 0x41, 0x26, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x4e, 0x45, 0x49,
	0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x61, 0x0a, 0x37, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x44, 0x52, 0x5f, 0x54,
	0x4f, 0x4f, 0x5f, 0x42, 0x49, 0x47, 0x10, 0xc6, 0xd0, 0xcb, 0xb3, 0x01, 0x1a, 0x20, 0x82, 0x41,
	0x1d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x45,
	0x58, 0x54, 0x5f, 0x48, 0x44, 0x52, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x42, 0x49, 0x47, 0x12, 0x5d,
	0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50,
	0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47,
	0x48, 0x42, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xaa, 0xc6, 0xdd, 0xb5, 0x01, 0x1a, 0x1e, 0x82,
	0x41, 0x1b, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52,
	0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x67, 0x0a,
	0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56,
	0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x45,
	0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x43,
	0x48, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0xa4, 0x9e, 0x86, 0xb8,
	0x01, 0x1a, 0x23, 0x82, 0x41, 0x20, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x12, 0x7b, 0x0a, 0x44, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xa8,
	0xa4, 0x90, 0xbe, 0x01, 0x1a, 0x2d, 0x82, 0x41, 0x2a, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x12, 0x59, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa4, 0x8d, 0x99, 0xc0, 0x01,
	0x1a, 0x1c, 0x82, 0x41, 0x19, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x6f,
	0x0a, 0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50,
	0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45,
	0x50, 0x4c, 0x59, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x5f, 0x52, 0x4f, 0x56, 0x52, 0x31, 0x39, 0x32,
	0x10, 0xa1, 0x82, 0xf8, 0xcb, 0x01, 0x1a, 0x27, 0x82, 0x41, 0x24, 0x44, 0x55, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x59, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x5f, 0x52, 0x4f, 0x56, 0x52, 0x31, 0x39, 0x32, 0x12,
	0x69, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d,
	0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xf2,
	0xc5, 0xce, 0xcc, 0x01, 0x1a, 0x24, 0x82, 0x41, 0x21, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x12, 0x6f, 0x0a, 0x3e, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x45, 0x44, 0x10, 0xe1, 0xfd, 0xb4,
	0xce, 0x01, 0x1a, 0x27, 0x82, 0x41, 0x24, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41,
	0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x45, 0x44, 0x12, 0x4f, 0x0a, 0x2e, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xa5, 0xf5,
	0xcb, 0xd0, 0x01, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x4b, 0x0a, 0x2c,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4e, 0x55, 0x4e, 0x42,
	0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0xab, 0xfc, 0xd4,
	0xd1, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x52, 0x45, 0x4e, 0x55, 0x4e, 0x42, 0x45, 0x52, 0x49,
	0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x12, 0x65, 0x0a, 0x39, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x5f, 0x4e,
	0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xd0, 0x97, 0xdc, 0xd2, 0x01, 0x1a, 0x22, 0x82, 0x41,
	0x1f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45,
	0x4e, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x12, 0x49, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43,
	0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x43,
	0x48, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0xfd, 0xe3, 0xf9, 0xd4, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x59, 0x0a, 0x33, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f,
	0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x10, 0xad, 0x93, 0xb5, 0xd7, 0x01, 0x1a, 0x1c, 0x82, 0x41, 0x19, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x47, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x10, 0xd0, 0xd4, 0xbc, 0xd9, 0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x52,
	0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12,
	0x45, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d,
	0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x43, 0x48,
	0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xc8, 0xb4, 0xc1,
	0xda, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x6d, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x53, 0x54, 0x10, 0xc4, 0xde, 0xc3, 0xe0, 0x01, 0x1a, 0x26, 0x82,
	0x41, 0x23, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54,
	0x4f, 0x5f, 0x44, 0x53, 0x54, 0x12, 0x6d, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48,
	0x42, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xd3, 0xbf, 0xc5, 0xe3, 0x01, 0x1a, 0x26, 0x82, 0x41,
	0x23, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f,
	0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x12, 0x73, 0x0a, 0x40, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x44, 0x41, 0x52,
	0x5f, 0x52, 0x4f, 0x56, 0x52, 0x31, 0x39, 0x32, 0x10, 0x85, 0xdb, 0xca, 0xe8, 0x01, 0x1a, 0x29,
	0x82, 0x41, 0x26, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x44, 0x41,
	0x52, 0x5f, 0x52, 0x4f, 0x56, 0x52, 0x31, 0x39, 0x32, 0x12, 0x71, 0x0a, 0x3f, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x4e,
	0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xc8, 0xba, 0xe5,
	0xea, 0x01, 0x1a, 0x28, 0x82, 0x41, 0x25, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x4e,
	0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x63, 0x0a, 0x38,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x8a, 0xdb, 0xc5, 0xed, 0x01, 0x1a, 0x21,
	0x82, 0x41, 0x1e, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x12, 0x73, 0x0a, 0x40, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44,
	0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x48, 0x44, 0x52, 0x10, 0xfd, 0xe6, 0xdb, 0xf0, 0x01, 0x1a, 0x29, 0x82, 0x41, 0x26,
	0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x48, 0x44, 0x52, 0x12, 0x63, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45,
	0x4d, 0x5f, 0x53, 0x52, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x5f, 0x48, 0x44, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x10, 0xad, 0xba, 0xbb, 0xf2, 0x01, 0x1a, 0x21, 0x82, 0x41, 0x1e, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x53, 0x52, 0x5f, 0x55, 0x50,
	0x50, 0x45, 0x52, 0x5f, 0x48, 0x44, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x12, 0x69, 0x0a, 0x3b, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x58,
	0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x53, 0x45, 0x4d, 0x42, 0x4c, 0x59, 0x10, 0xb6, 0xc9, 0xfd, 0xf2, 0x01,
	0x1a, 0x24, 0x82, 0x41, 0x21, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44,
	0x45, 0x44, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x53, 0x45, 0x4d, 0x42, 0x4c, 0x59, 0x12, 0x5d, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0xa4, 0xab, 0xd2, 0xf8, 0x01, 0x1a, 0x1e, 0x82, 0x41, 0x1b, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x4b, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x4f,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xb6, 0x8c, 0xda, 0xf9, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12,
	0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x12, 0x61, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x48, 0x44, 0x52, 0x53, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0xa2, 0xde,
	0x8d, 0xfa, 0x01, 0x1a, 0x20, 0x82, 0x41, 0x1d, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x48, 0x44, 0x52, 0x53, 0x5f, 0x54, 0x4f, 0x4f,
	0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x12, 0x4d, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x42, 0x49,
	0x47, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xfa, 0x9d, 0xce, 0xfa, 0x01, 0x1a, 0x16, 0x82, 0x41,
	0x13, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x42, 0x49, 0x47, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x12, 0x41, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0xf2, 0xac, 0xfb, 0xfc, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x65, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x4f,
	0x5f, 0x44, 0x53, 0x54, 0x10, 0xf8, 0xcf, 0xcd, 0xfe, 0x01, 0x1a, 0x22, 0x82, 0x41, 0x1f, 0x44,
	0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e,
	0x4f, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x53, 0x54, 0x12, 0x5d,
	0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50,
	0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x52, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xba, 0xf3, 0xf1, 0xff, 0x01, 0x1a, 0x1e, 0x82,
	0x41, 0x1b, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x2a, 0xe1, 0x18,
	0x0a, 0x19, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x63, 0x6d, 0x70,
	0x76, 0x36, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x59, 0x50, 0x45, 0x12, 0x23, 0x0a, 0x1f, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x3f, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43,
	0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xca, 0x82, 0x42, 0x1a,
	0x10, 0x82, 0x41, 0x0d, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45,
	0x44, 0x12, 0x46, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x9c, 0xd5, 0xe4, 0x0b, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43, 0x48,
	0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x12, 0x52, 0x0a, 0x30, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0xe3, 0xb3,
	0xbb, 0x15, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x12, 0x4c, 0x0a,
	0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56,
	0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xdd,
	0xf2, 0x95, 0x2f, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x53,
	0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x54, 0x0a, 0x31, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0xd0, 0xb8, 0xd2, 0x31, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c,
	0x45, 0x12, 0x60, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f,
	0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xf3, 0x8c, 0x95,
	0x36, 0x1a, 0x20, 0x82, 0x41, 0x1d, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x4e, 0x45,
	0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x12, 0x3e, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xf4, 0xf6,
	0xd4, 0x45, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x12, 0x62, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0xd9, 0xd9, 0xc1, 0x4b, 0x1a, 0x21, 0x82, 0x41, 0x1e, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41,
	0x53, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54,
	0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x12, 0x36, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0xdd, 0xd4,
	0x8f, 0x4e, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x12,
	0x6a, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d,
	0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x4d,
	0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10,
	0x9d, 0x9f, 0xfd, 0x53, 0x1a, 0x25, 0x82, 0x41, 0x22, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x12, 0x3c, 0x0a, 0x25, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x10, 0xe8, 0x92, 0xcd, 0x5b, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x4d, 0x50,
	0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x12, 0x6e, 0x0a, 0x3e, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xc6, 0xe6, 0xd7, 0x5e,
	0x1a, 0x27, 0x82, 0x41, 0x24, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x12, 0x66, 0x0a, 0x3a, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54,
	0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xe7, 0xb0, 0xc5, 0x68, 0x1a, 0x23, 0x82, 0x41,
	0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x41, 0x54, 0x48, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x12, 0x58, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xa8, 0xd0, 0xf3, 0x73, 0x1a, 0x1c, 0x82,
	0x41, 0x19, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x12, 0x54, 0x0a, 0x31, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41,
	0x53, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x4e, 0x45,
	0x10, 0xfb, 0xa5, 0xfa, 0x75, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43,
	0x41, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x4e,
	0x45, 0x12, 0x4f, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0xcc, 0x8d, 0x87, 0x86, 0x01, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x12, 0x5f, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x90, 0xdf, 0x8b,
	0x8c, 0x01, 0x1a, 0x1f, 0x82, 0x41, 0x1c, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x12, 0x63, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f,
	0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0xa2, 0xfe, 0xee, 0x8c, 0x01, 0x1a, 0x21, 0x82, 0x41, 0x1e, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x53,
	0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52,
	0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x12, 0x43, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x4f, 0x4f,
	0x5f, 0x42, 0x49, 0x47, 0x10, 0x91, 0xf8, 0xc0, 0xa7, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x42, 0x49, 0x47, 0x12, 0x5b, 0x0a,
	0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56,
	0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c,
	0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xe1, 0x88, 0x9e, 0xaa, 0x01, 0x1a, 0x1d, 0x82, 0x41, 0x1a,
	0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x53, 0x4f,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x3d, 0x0a, 0x25, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4e, 0x55, 0x4e, 0x42, 0x45, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0xe8, 0xe4, 0xa0, 0xb1, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x52, 0x45,
	0x4e, 0x55, 0x4e, 0x42, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x12, 0x51, 0x0a, 0x2f, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f,
	0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x8a, 0x9d, 0xff,
	0xb3, 0x01, 0x1a, 0x18, 0x82, 0x41, 0x15, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f,
	0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x59, 0x0a, 0x33,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0xef, 0xc3, 0xa1, 0xb9, 0x01, 0x1a, 0x1c, 0x82, 0x41, 0x19, 0x44, 0x55,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x12, 0x5d, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x32, 0x5f, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x45, 0x52,
	0x10, 0xa7, 0xd8, 0xdb, 0xba, 0x01, 0x1a, 0x1e, 0x82, 0x41, 0x1b, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x32, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x45, 0x4e, 0x45, 0x52, 0x12, 0x65, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0xb4, 0x8a, 0xfd, 0xbf, 0x01, 0x1a, 0x22, 0x82, 0x41, 0x1f, 0x43, 0x45,
	0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x54, 0x48,
	0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x51, 0x0a,
	0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56,
	0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4c, 0x4e, 0x50, 0x56,
	0x36, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x85, 0xa4, 0x94, 0xcd, 0x01, 0x1a, 0x18, 0x82, 0x41, 0x15, 0x49, 0x4c, 0x4e, 0x50, 0x56,
	0x36, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x12, 0x63, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43,
	0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x55,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xf3, 0xa8, 0xad,
	0xcd, 0x01, 0x1a, 0x21, 0x82, 0x41, 0x1e, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x43, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x59, 0x10, 0x8f, 0xba, 0x8f, 0xcf, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x45, 0x58, 0x54, 0x5f,
	0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x12, 0x3b, 0x0a, 0x24, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x59, 0x10, 0xa7, 0x9d, 0xc9, 0xd1, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x45, 0x43, 0x48,
	0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x12, 0x33, 0x0a, 0x20, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4d, 0x49, 0x50, 0x56, 0x36, 0x10, 0xe1, 0x93, 0xd0, 0xd3,
	0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x46, 0x4d, 0x49, 0x50, 0x56, 0x36, 0x12, 0x57, 0x0a, 0x32,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43,
	0x41, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x10, 0xc1, 0xbd, 0xc7, 0xd4, 0x01, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x45, 0x52, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x12, 0x3d, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x50, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0xe3,
	0xe0, 0xb3, 0xdd, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x52, 0x50, 0x4c, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x12, 0x61, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x52, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x8e, 0xa8, 0xd0, 0xe2, 0x01, 0x1a, 0x20, 0x82, 0x41, 0x1d, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43,
	0x41, 0x53, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x43,
	0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x59, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x45, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x99,
	0xe7, 0x8b, 0xe5, 0x01, 0x1a, 0x1c, 0x82, 0x41, 0x19, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41,
	0x53, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x12, 0x49, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45,
	0x4d, 0x10, 0xfe, 0xbe, 0xec, 0xec, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x12, 0x5d, 0x0a,
	0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56,
	0x36, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c,
	0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49,
	0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xb0, 0xdb, 0xbd, 0xfc, 0x01, 0x1a, 0x1e, 0x82, 0x41,
	0x1b, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x41,
	0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x12, 0x53, 0x0a, 0x30,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42,
	0x4f, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0xe5, 0xdc, 0xc6, 0xfe, 0x01, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x4e, 0x45, 0x49, 0x47, 0x48,
	0x42, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x2a, 0xca, 0x01, 0x0a, 0x24, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x66, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47,
	0x41, 0x54, 0x45, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x29, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47,
	0x41, 0x54, 0x45, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x41, 0x43, 0x50, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4c, 0x41,
	0x43, 0x50, 0x12, 0x3a, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x46, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x41, 0x47, 0x47, 0x52, 0x45,
	0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49,
	0x43, 0x10, 0x02, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x2a, 0xe4,
	0x08, 0x0a, 0x21, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45,
	0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x44, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x36, 0x30, 0x30,
	0x47, 0x42, 0x10, 0xc9, 0x80, 0xe4, 0x0f, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x53, 0x50, 0x45, 0x45,
	0x44, 0x5f, 0x36, 0x30, 0x30, 0x47, 0x42, 0x12, 0x48, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45,
	0x45, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xaa, 0xc4, 0xbd, 0x1e, 0x1a,
	0x10, 0x82, 0x41, 0x0d, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x12, 0x46, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x32, 0x35, 0x30,
	0x30, 0x4d, 0x42, 0x10, 0x8a, 0xdc, 0xef, 0x3d, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x53, 0x50, 0x45,
	0x45, 0x44, 0x5f, 0x32, 0x35, 0x30, 0x30, 0x4d, 0x42, 0x12, 0x44, 0x0a, 0x2d, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x5f, 0x38, 0x30, 0x30, 0x47, 0x42, 0x10, 0xf3, 0xdf, 0xa1, 0x43, 0x1a,
	0x0e, 0x82, 0x41, 0x0b, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x38, 0x30, 0x30, 0x47, 0x42, 0x12,
	0x40, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x47, 0x42, 0x10, 0xb2,
	0xfb, 0xb3, 0x4b, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x47,
	0x42, 0x12, 0x42, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x32, 0x35, 0x47,
	0x42, 0x10, 0xfc, 0x8d, 0xc6, 0x4e, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x5f, 0x32, 0x35, 0x47, 0x42, 0x12, 0x44, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x5f, 0x31, 0x30, 0x30, 0x4d, 0x42, 0x10, 0xe4, 0xe1, 0xf6, 0x53, 0x1a, 0x0e, 0x82, 0x41, 0x0b,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x30, 0x4d, 0x42, 0x12, 0x42, 0x0a, 0x2c, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x10, 0xc4, 0xf9, 0xb6, 0x69,
	0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x12,
	0x44, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x32, 0x30, 0x30, 0x47, 0x42,
	0x10, 0xc5, 0xbf, 0xce, 0x6e, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f,
	0x32, 0x30, 0x30, 0x47, 0x42, 0x12, 0x45, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x10, 0xda, 0xf4, 0xf6, 0x83, 0x01, 0x1a, 0x0e, 0x82, 0x41,
	0x0b, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x12, 0x43, 0x0a, 0x2c,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45,
	0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45, 0x45,
	0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x4d, 0x42, 0x10, 0xba, 0x8b, 0xb7,
	0x99, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x4d,
	0x42, 0x12, 0x45, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x34, 0x30, 0x30,
	0x47, 0x42, 0x10, 0xef, 0x9e, 0x8c, 0xa2, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x53, 0x50, 0x45,
	0x45, 0x44, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x42, 0x12, 0x41, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54,
	0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50,
	0x45, 0x45, 0x44, 0x5f, 0x35, 0x47, 0x42, 0x10, 0xa6, 0xae, 0x89, 0xcb, 0x01, 0x1a, 0x0c, 0x82,
	0x41, 0x09, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x35, 0x47, 0x42, 0x12, 0x43, 0x0a, 0x2c, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x35, 0x30, 0x47, 0x42, 0x10, 0xd0, 0xa5, 0x8c, 0xcf,
	0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x35, 0x30, 0x47, 0x42,
	0x12, 0x43, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46,
	0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x34, 0x30, 0x47, 0x42,
	0x10, 0xcf, 0xf6, 0xb9, 0xe0, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x5f, 0x34, 0x30, 0x47, 0x42, 0x2a, 0xb1, 0x03, 0x0a, 0x20, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x66, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x46, 0x45, 0x43, 0x12, 0x2a, 0x0a, 0x26, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e,
	0x45, 0x54, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x46, 0x45, 0x43, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3f, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x46, 0x45, 0x43, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x52,
	0x53, 0x35, 0x32, 0x38, 0x10, 0xe8, 0xba, 0x97, 0x2a, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x46, 0x45,
	0x43, 0x5f, 0x52, 0x53, 0x35, 0x32, 0x38, 0x12, 0x3f, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x46, 0x45, 0x43, 0x5f, 0x46, 0x45, 0x43, 0x5f,
	0x52, 0x53, 0x35, 0x34, 0x34, 0x10, 0xf6, 0xcd, 0x97, 0x5a, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x46,
	0x45, 0x43, 0x5f, 0x52, 0x53, 0x35, 0x34, 0x34, 0x12, 0x5b, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x46, 0x45, 0x43, 0x5f, 0x46, 0x45, 0x43,
	0x5f, 0x52, 0x53, 0x35, 0x34, 0x34, 0x5f, 0x32, 0x58, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4c,
	0x45, 0x41, 0x56, 0x45, 0x10, 0xe9, 0xde, 0xc1, 0x6f, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x46, 0x45,
	0x43, 0x5f, 0x52, 0x53, 0x35, 0x34, 0x34, 0x5f, 0x32, 0x58, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4c, 0x45, 0x41, 0x56, 0x45, 0x12, 0x46, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x46, 0x45, 0x43, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x84, 0x91, 0xcb, 0x8b, 0x01, 0x1a, 0x0f, 0x82, 0x41,
	0x0c, 0x46, 0x45, 0x43, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x12, 0x3a, 0x0a,
	0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x46, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x4e, 0x45, 0x54, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x46, 0x45,
	0x43, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x46, 0x43, 0x10, 0x85, 0xfd, 0x9d, 0xea, 0x01, 0x1a, 0x09,
	0x82, 0x41, 0x06, 0x46, 0x45, 0x43, 0x5f, 0x46, 0x43, 0x2a, 0xc0, 0x01, 0x0a, 0x1d, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x69, 0x73, 0x49, 0x73, 0x69, 0x73,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x23, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x49, 0x53, 0x49,
	0x53, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x49, 0x53, 0x49, 0x53, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01,
	0x1a, 0x0b, 0x82, 0x41, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x12, 0x3d, 0x0a,
	0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x49,
	0x53, 0x49, 0x53, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0e, 0x82, 0x41,
	0x0b, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x2a, 0x8d, 0x20, 0x0a,
	0x25, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x69, 0x73, 0x4c,
	0x73, 0x64, 0x62, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54,
	0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x6a, 0x0a, 0x42, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xbf, 0x89,
	0x80, 0x04, 0x1a, 0x1f, 0x82, 0x41, 0x1c, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x68, 0x0a, 0x41, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53,
	0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0xc3, 0x80, 0xd5, 0x0e, 0x1a, 0x1e, 0x82,
	0x41, 0x1b, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x12, 0x7c, 0x0a,
	0x4b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c,
	0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54,
	0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4e, 0x45, 0x49, 0x47,
	0x48, 0x42, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0xf7, 0xc2, 0xec,
	0x1d, 0x1a, 0x28, 0x82, 0x41, 0x25, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48,
	0x42, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x74, 0x0a, 0x47, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f,
	0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x84, 0xe4, 0xa4, 0x28, 0x1a, 0x24, 0x82, 0x41, 0x21,
	0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x12, 0x6a, 0x0a, 0x42, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53,
	0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x5f, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49,
	0x58, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x10, 0xb9, 0xce, 0xcb, 0x39, 0x1a, 0x1f, 0x82, 0x41,
	0x1c, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x12, 0x76, 0x0a,
	0x48, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c,
	0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54,
	0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x44, 0x55, 0x41, 0x4c, 0x5f,
	0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0xf5, 0xa3, 0xde, 0x3b, 0x1a, 0x25,
	0x82, 0x41, 0x22, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x4e, 0x44,
	0x57, 0x49, 0x44, 0x54, 0x48, 0x12, 0x6e, 0x0a, 0x44, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x50, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x50, 0x56, 0x34, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0xa4, 0xbf,
	0xfa, 0x45, 0x1a, 0x21, 0x82, 0x41, 0x1e, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x52, 0x5f, 0x49, 0x44, 0x12, 0x7e, 0x0a, 0x4c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x50, 0x56, 0x34, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x9a, 0x83, 0x85, 0x48, 0x1a, 0x29, 0x82, 0x41, 0x26, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x50, 0x56, 0x34, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x7a, 0x0a, 0x4a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0xc4, 0xd4, 0xc7, 0x48, 0x1a, 0x27, 0x82, 0x41, 0x24, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x12, 0x78, 0x0a, 0x49, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53,
	0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0xf5,
	0x9f, 0xd8, 0x4d, 0x1a, 0x26, 0x82, 0x41, 0x23, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x12, 0x76, 0x0a, 0x48, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x54, 0x49, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x42, 0x41,
	0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0xee, 0x81, 0xa5, 0x5f, 0x1a, 0x25, 0x82, 0x41,
	0x22, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x55, 0x54, 0x49, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49,
	0x44, 0x54, 0x48, 0x12, 0x64, 0x0a, 0x3f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53,
	0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0xe4, 0x95, 0xa7, 0x61, 0x1a, 0x1c, 0x82, 0x41, 0x19,
	0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x12, 0x76, 0x0a, 0x48, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0xa8, 0xf6, 0xce, 0x6b, 0x1a, 0x25, 0x82, 0x41, 0x22, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d,
	0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x12, 0x6e, 0x0a, 0x44, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53,
	0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x52, 0x5f,
	0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x10, 0x8d, 0xa8, 0xf5, 0x71, 0x1a, 0x21,
	0x82, 0x41, 0x1e, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x52, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48,
	0x4d, 0x12, 0x70, 0x0a, 0x45, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53,
	0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x53, 0x10, 0x82, 0xaf, 0xc6, 0x77, 0x1a,
	0x22, 0x82, 0x41, 0x1f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x45, 0x53, 0x12, 0x7a, 0x0a, 0x4a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53,
	0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x8b, 0xad, 0xaa, 0x7d, 0x1a, 0x27, 0x82, 0x41, 0x24, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x6e, 0x0a, 0x44, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49,
	0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55,
	0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43,
	0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0xca, 0x86, 0x8a, 0x7f, 0x1a, 0x21, 0x82, 0x41,
	0x1e, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x12,
	0x71, 0x0a, 0x45, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49,
	0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55,
	0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x52, 0x5f, 0x43, 0x41,
	0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0xd0, 0x8c, 0xee, 0x8d, 0x01, 0x1a, 0x22,
	0x82, 0x41, 0x1f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x52, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x12, 0x7d, 0x0a, 0x4b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49,
	0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52,
	0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x34,
	0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x10, 0xfd, 0xb0, 0xa1, 0x90, 0x01, 0x1a, 0x28, 0x82, 0x41, 0x25, 0x49, 0x53, 0x5f, 0x52,
	0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x34,
	0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x12, 0x77, 0x0a, 0x48, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53,
	0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0xd9, 0xb8,
	0xc3, 0x91, 0x01, 0x1a, 0x25, 0x82, 0x41, 0x22, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x12, 0x67, 0x0a, 0x40, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x53, 0x49, 0x44, 0x10, 0xbc,
	0xe6, 0xb0, 0x94, 0x01, 0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43,
	0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f,
	0x53, 0x49, 0x44, 0x12, 0x61, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53,
	0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x49, 0x44, 0x10, 0xc2, 0xb0, 0xd6, 0x97, 0x01, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x49, 0x44, 0x12, 0x83, 0x01, 0x0a, 0x4e, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0xa2, 0xc4, 0xa1, 0xa0, 0x01, 0x1a,
	0x2b, 0x82, 0x41, 0x28, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x12, 0x7b, 0x0a, 0x4a,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53,
	0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c,
	0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44,
	0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0xa5, 0x82, 0xd5, 0xa5, 0x01,
	0x1a, 0x27, 0x82, 0x41, 0x24, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f,
	0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x12, 0x6b, 0x0a, 0x42, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0xc0, 0xd0, 0xe2, 0xab, 0x01, 0x1a, 0x1f, 0x82, 0x41, 0x1c, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41,
	0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x7d, 0x0a, 0x4b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52,
	0x41, 0x49, 0x4e, 0x54, 0x53, 0x10, 0xb4, 0xba, 0xc8, 0xb1, 0x01, 0x1a, 0x28, 0x82, 0x41, 0x25,
	0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52,
	0x41, 0x49, 0x4e, 0x54, 0x53, 0x12, 0x67, 0x0a, 0x40, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x8e, 0xd3, 0xa3, 0xc2, 0x01, 0x1a,
	0x1d, 0x82, 0x41, 0x1a, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x12, 0x5d,
	0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53,
	0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42,
	0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x41, 0x47, 0x36, 0x34, 0x10, 0xf1, 0x8f,
	0xb9, 0xcc, 0x01, 0x1a, 0x18, 0x82, 0x41, 0x15, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x41, 0x47, 0x36, 0x34, 0x12, 0x7f, 0x0a,
	0x4c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c,
	0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54,
	0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0xd4, 0x98,
	0xa7, 0xd5, 0x01, 0x1a, 0x29, 0x82, 0x41, 0x26, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x75,
	0x0a, 0x47, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53,
	0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42,
	0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52,
	0x41, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x4c, 0x53, 0x50, 0x10, 0xa1, 0xf7, 0xc2, 0xdc, 0x01, 0x1a,
	0x24, 0x82, 0x41, 0x21, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x45,
	0x44, 0x5f, 0x4c, 0x53, 0x50, 0x12, 0x69, 0x0a, 0x41, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x49, 0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x44, 0x4a, 0x5f, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x49, 0x44, 0x10, 0xd4, 0xd7, 0xd0, 0xe3, 0x01,
	0x1a, 0x1e, 0x82, 0x41, 0x1b, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x49, 0x44,
	0x12, 0x61, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53,
	0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53,
	0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41,
	0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x53, 0x49,
	0x44, 0x10, 0xd0, 0xe2, 0x8f, 0xe9, 0x01, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x49, 0x53, 0x5f, 0x52,
	0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x44, 0x4a, 0x5f,
	0x53, 0x49, 0x44, 0x12, 0x6f, 0x0a, 0x44, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53,
	0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x55, 0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xda, 0xb2, 0xef, 0xeb,
	0x01, 0x1a, 0x21, 0x82, 0x41, 0x1e, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x50,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x59, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49,
	0x53, 0x49, 0x53, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50,
	0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x41,
	0x47, 0x10, 0xeb, 0xc0, 0xb9, 0xef, 0x01, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x49, 0x50, 0x5f, 0x52,
	0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x41, 0x47, 0x12,
	0x7b, 0x0a, 0x4a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49,
	0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x53, 0x55,
	0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43,
	0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0xe5, 0xea,
	0xbd, 0xfe, 0x01, 0x1a, 0x27, 0x82, 0x41, 0x24, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x2a, 0x86, 0x12, 0x0a,
	0x22, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x69, 0x73, 0x4c,
	0x73, 0x64, 0x62, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x2c, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53,
	0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x3b, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53,
	0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x54, 0x5f, 0x49, 0x53, 0x4e, 0x10, 0xb9,
	0xd8, 0xcf, 0x05, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4d, 0x54, 0x5f, 0x49, 0x53, 0x4e, 0x12, 0x41,
	0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53,
	0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x53, 0x52, 0x4c, 0x47, 0x10, 0xdd,
	0xb7, 0xca, 0x10, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x53, 0x52, 0x4c,
	0x47, 0x12, 0x3f, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53,
	0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x52, 0x47, 0x45, 0x5f, 0x4f, 0x49,
	0x10, 0xb1, 0xac, 0xee, 0x27, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x50, 0x55, 0x52, 0x47, 0x45, 0x5f,
	0x4f, 0x49, 0x12, 0x39, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49,
	0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4c, 0x50, 0x49, 0x44, 0x10, 0xe6,
	0x83, 0xd8, 0x2e, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4e, 0x4c, 0x50, 0x49, 0x44, 0x12, 0x51, 0x0a,
	0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c,
	0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0xb4, 0xe3, 0x83, 0x3b, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x49,
	0x50, 0x56, 0x36, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x12, 0x57, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53,
	0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54,
	0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x54, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x52,
	0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0xd0, 0x84, 0xac, 0x4c,
	0x1a, 0x17, 0x82, 0x41, 0x14, 0x4d, 0x54, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x52, 0x45, 0x41,
	0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12, 0x63, 0x0a, 0x3d, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x98, 0x87, 0x84, 0x52, 0x1a,
	0x1d, 0x82, 0x41, 0x1a, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12, 0x4d,
	0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53,
	0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x53, 0x50, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f,
	0x53, 0x49, 0x5a, 0x45, 0x10, 0x8d, 0x90, 0x95, 0x53, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x4c, 0x53,
	0x50, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x12, 0x45, 0x0a,
	0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c,
	0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10,
	0x9c, 0xd5, 0x81, 0x5b, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49,
	0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x10, 0xe4, 0xc8, 0xd7, 0x63, 0x1a, 0x11,
	0x82, 0x41, 0x0e, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47,
	0x59, 0x12, 0x57, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53,
	0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x54, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0xc2, 0xa4, 0xdc,
	0x65, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x4d, 0x54, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12, 0x63, 0x0a, 0x3d, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52,
	0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0xc6, 0xd1, 0xe1, 0x66,
	0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12,
	0x4b, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49,
	0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c,
	0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x99, 0xed, 0x82, 0x6c, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x5f, 0x0a, 0x3b,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53,
	0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x45, 0x53, 0x10, 0xaf, 0x8d, 0xf4, 0x7d,
	0x1a, 0x1b, 0x82, 0x41, 0x18, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x45, 0x53, 0x12, 0x52, 0x0a,
	0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c,
	0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x82, 0xfd, 0xc8, 0x84, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11,
	0x49, 0x50, 0x56, 0x34, 0x5f, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49,
	0x44, 0x12, 0x60, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49,
	0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53,
	0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x45,
	0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45,
	0x10, 0xff, 0x9d, 0x8c, 0x8e, 0x01, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x4d, 0x54, 0x5f, 0x49, 0x53,
	0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x45, 0x12, 0x60, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53,
	0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x45, 0x53, 0x10, 0xa5, 0xdb, 0x92, 0x90, 0x01, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x49, 0x50, 0x56,
	0x34, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x45, 0x53, 0x12, 0x52, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x52, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0xe3, 0x8c,
	0xa7, 0xa5, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x43,
	0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12, 0x48, 0x0a, 0x2f, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xc6, 0x86, 0xeb,
	0xa7, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x12, 0x64, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53,
	0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x10, 0xea, 0xe4, 0xf0, 0xb2, 0x01, 0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x45,
	0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x52, 0x45, 0x41,
	0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12, 0x4a, 0x0a, 0x30, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x53, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x5f, 0x49, 0x44, 0x10, 0xd4, 0xfc,
	0xab, 0xb5, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x49,
	0x41, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x45, 0x53, 0x10, 0x8b, 0xd3, 0xf1, 0xbf, 0x01,
	0x1a, 0x11, 0x82, 0x41, 0x0e, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x45, 0x53, 0x12, 0x42, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53,
	0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x53,
	0x52, 0x4c, 0x47, 0x10, 0xe7, 0xa1, 0xa0, 0xc4, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x49, 0x50,
	0x56, 0x34, 0x5f, 0x53, 0x52, 0x4c, 0x47, 0x12, 0x4a, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x49,
	0x53, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x10, 0xee, 0x9b, 0xba, 0xde,
	0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x49, 0x53, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42,
	0x4f, 0x52, 0x53, 0x12, 0x52, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53,
	0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x54,
	0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0xe0, 0xa7, 0xf8, 0xe9,
	0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x54, 0x45, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x12, 0x60, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0xcd, 0x8f, 0x9d, 0xf4, 0x01, 0x1a, 0x1b, 0x82, 0x41,
	0x18, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41,
	0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12, 0x5a, 0x0a, 0x38, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x4c, 0x53, 0x44, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x53, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0xcb, 0xe0, 0xe4, 0xf5, 0x01, 0x1a, 0x18, 0x82, 0x41, 0x15,
	0x49, 0x53, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x49, 0x42, 0x55, 0x54, 0x45, 0x2a, 0xe7, 0x02, 0x0a, 0x1e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x46, 0x49,
	0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41,
	0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x47, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43,
	0x41, 0x53, 0x54, 0x10, 0x86, 0xc8, 0x8f, 0x13, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x49, 0x50, 0x56,
	0x36, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x12, 0x47, 0x0a, 0x2d, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50,
	0x56, 0x34, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0xa4, 0x95, 0xfe,
	0x4c, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x43, 0x41, 0x53, 0x54, 0x12, 0x43, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41,
	0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x55, 0x4e, 0x49, 0x43,
	0x41, 0x53, 0x54, 0x10, 0xed, 0xb2, 0xf2, 0x5d, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x49, 0x50, 0x56,
	0x34, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x12, 0x44, 0x0a, 0x2b, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36,
	0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0xd3, 0xb6, 0xf4, 0x80, 0x01, 0x1a, 0x0f,
	0x82, 0x41, 0x0c, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x2a,
	0xa4, 0x01, 0x0a, 0x1a, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73,
	0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x12, 0x24,
	0x0a, 0x20, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x81, 0xca, 0x88, 0x7a, 0x1a, 0x07, 0x82, 0x41,
	0x04, 0x49, 0x50, 0x56, 0x34, 0x12, 0x2f, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x83, 0xca, 0x88, 0x7a, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x49, 0x50, 0x56, 0x36, 0x2a, 0xa7, 0x01, 0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x55,
	0x54, 0x48, 0x4d, 0x4f, 0x44, 0x45, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x55, 0x54,
	0x48, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x30, 0x0a,
	0x20, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x41, 0x55, 0x54, 0x48, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x45, 0x58,
	0x54, 0x10, 0x9e, 0xd0, 0xd0, 0x1b, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x54, 0x45, 0x58, 0x54, 0x12,
	0x2f, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49,
	0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x55, 0x54, 0x48, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d,
	0x44, 0x35, 0x10, 0xbd, 0xce, 0xc5, 0xe1, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x4d, 0x44, 0x35,
	0x2a, 0xd8, 0x01, 0x0a, 0x24, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x73, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x49, 0x56, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3a, 0x0a, 0x2b, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x49, 0x56, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4c,
	0x49, 0x4e, 0x45, 0x41, 0x52, 0x12, 0x44, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x49, 0x56, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x0e, 0x82, 0x41, 0x0b,
	0x45, 0x58, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x2a, 0xcc, 0x01, 0x0a, 0x1e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x69, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x44, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43,
	0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x12, 0x3a,
	0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x02, 0x1a, 0x0c, 0x82, 0x41,
	0x09, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x2a, 0x95, 0x02, 0x0a, 0x23, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x69, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x39, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x50, 0x41,
	0x44, 0x44, 0x49, 0x4e, 0x47, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54,
	0x10, 0x00, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x12, 0x37, 0x0a,
	0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x53, 0x45, 0x10, 0x02, 0x1a, 0x08, 0x82, 0x41,
	0x05, 0x4c, 0x4f, 0x4f, 0x53, 0x45, 0x12, 0x3d, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x48, 0x45, 0x4c,
	0x4c, 0x4f, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x49, 0x56, 0x45, 0x12, 0x3b, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x48, 0x45, 0x4c, 0x4c,
	0x4f, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x2a, 0xce, 0x02, 0x0a, 0x28, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x73, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x73, 0x69, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x6a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x32, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49,
	0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x41, 0x44, 0x4a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x41, 0x44, 0x4a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x50, 0x10, 0x01, 0x1a, 0x05, 0x82, 0x41, 0x02, 0x55, 0x50, 0x12, 0x3a, 0x0a, 0x2d, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x41,
	0x44, 0x4a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x12, 0x3a, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53,
	0x49, 0x53, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x41, 0x44, 0x4a, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x03, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49,
	0x4e, 0x49, 0x54, 0x12, 0x3e, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x53, 0x49, 0x53, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x41, 0x44, 0x4a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x2a, 0xc4, 0x01, 0x0a, 0x1c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x73, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x5f, 0x32, 0x10, 0x00,
	0x1a, 0x0c, 0x82, 0x41, 0x09, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x5f, 0x32, 0x12, 0x34,
	0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x10, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x31, 0x12, 0x34, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x32, 0x10, 0x02, 0x1a, 0x0a,
	0x82, 0x41, 0x07, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x32, 0x2a, 0xce, 0x01, 0x0a, 0x1e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x69, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x28, 0x0a,
	0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x42, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x4e, 0x41, 0x52, 0x52, 0x4f, 0x57,
	0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x4e, 0x41,
	0x52, 0x52, 0x4f, 0x57, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x12, 0x3e, 0x0a, 0x2a, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x57, 0x49,
	0x44, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x02, 0x1a, 0x0e, 0x82, 0x41, 0x0b,
	0x57, 0x49, 0x44, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x2a, 0x8f, 0x02, 0x0a, 0x2b,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x69, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41, 0x44, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x12, 0x35, 0x0a, 0x31, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41, 0x44, 0x52, 0x45, 0x53, 0x45, 0x54, 0x54,
	0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x56, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41,
	0x44, 0x52, 0x45, 0x53, 0x45, 0x54, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x10, 0xba, 0x95, 0xee, 0x0d, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x57, 0x41, 0x49, 0x54, 0x5f,
	0x46, 0x4f, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x12, 0x51, 0x0a, 0x38, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41, 0x44, 0x52, 0x45, 0x53, 0x45, 0x54, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x46,
	0x4f, 0x52, 0x5f, 0x42, 0x47, 0x50, 0x10, 0xe0, 0xf8, 0xb6, 0xec, 0x01, 0x1a, 0x0f, 0x82, 0x41,
	0x0c, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x42, 0x47, 0x50, 0x2a, 0xb9, 0x01,
	0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x69, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x12, 0x25, 0x0a,
	0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x41, 0x46, 0x49, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0xb8, 0xc3, 0xa0, 0x27,
	0x1a, 0x0a, 0x82, 0x41, 0x07, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x12, 0x3b, 0x0a, 0x25,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x53, 0x49, 0x53, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x89, 0x9a, 0xe4, 0x83, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x2a, 0xcd, 0x01, 0x0a, 0x1f, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x55, 0x54, 0x48, 0x54, 0x59, 0x50, 0x45, 0x12, 0x29, 0x0a,
	0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4b, 0x45, 0x59, 0x43, 0x48,
	0x41, 0x49, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x55, 0x54, 0x48, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x40, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4b, 0x45, 0x59, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x41, 0x55, 0x54, 0x48, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4d, 0x50,
	0x4c, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0xfc, 0xfa, 0x97, 0x7e, 0x1a, 0x0d, 0x82, 0x41, 0x0a,
	0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x12, 0x3d, 0x0a, 0x28, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4b, 0x45, 0x59, 0x43, 0x48, 0x41, 0x49, 0x4e,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x55, 0x54, 0x48, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x45,
	0x59, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0xde, 0xd0, 0xb0, 0xe9, 0x01, 0x1a, 0x0b, 0x82, 0x41,
	0x08, 0x4b, 0x45, 0x59, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x2a, 0x82, 0x06, 0x0a, 0x21, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x2b, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4b, 0x45, 0x59,
	0x43, 0x48, 0x41, 0x49, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x38, 0x0a, 0x27,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4b, 0x45, 0x59, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x31, 0x10, 0xb5, 0x96, 0xa1, 0x1e, 0x1a, 0x08, 0x82, 0x41,
	0x05, 0x53, 0x48, 0x41, 0x5f, 0x31, 0x12, 0x34, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4b, 0x45, 0x59, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x44, 0x35, 0x10,
	0x97, 0xa3, 0x83, 0x28, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x4d, 0x44, 0x35, 0x12, 0x42, 0x0a, 0x2c,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4b, 0x45, 0x59, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x31, 0x10, 0x93, 0x82, 0x98,
	0x3d, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x31,
	0x12, 0x48, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4b, 0x45,
	0x59, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x52, 0x59, 0x50, 0x54,
	0x4f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x31,
	0x5f, 0x39, 0x36, 0x10, 0xd7, 0xa0, 0xda, 0x3f, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x48, 0x4d, 0x41,
	0x43, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x31, 0x5f, 0x39, 0x36, 0x12, 0x3f, 0x0a, 0x2a, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4b, 0x45, 0x59, 0x43, 0x48, 0x41, 0x49, 0x4e,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x48, 0x4d, 0x41, 0x43, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x8d, 0xeb, 0x8f, 0xb2, 0x01, 0x1a, 0x0b,
	0x82, 0x41, 0x08, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x4d, 0x44, 0x35, 0x12, 0x47, 0x0a, 0x2e, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4b, 0x45, 0x59, 0x43, 0x48, 0x41, 0x49,
	0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x10, 0xe9, 0x97,
	0xdf, 0xb5, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48, 0x41,
	0x5f, 0x32, 0x35, 0x36, 0x12, 0x49, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4b, 0x45, 0x59, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43,
	0x52, 0x59, 0x50, 0x54, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53,
	0x48, 0x41, 0x5f, 0x31, 0x5f, 0x32, 0x30, 0x10, 0xa0, 0xfe, 0xd9, 0xe7, 0x01, 0x1a, 0x10, 0x82,
	0x41, 0x0d, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x31, 0x5f, 0x32, 0x30, 0x12,
	0x4b, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4b, 0x45, 0x59,
	0x43, 0x48, 0x41, 0x49, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x38, 0x5f, 0x43, 0x4d, 0x41, 0x43,
	0x5f, 0x39, 0x36, 0x10, 0xc0, 0xdb, 0xac, 0xf0, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x41, 0x45,
	0x53, 0x5f, 0x32, 0x38, 0x5f, 0x43, 0x4d, 0x41, 0x43, 0x5f, 0x39, 0x36, 0x12, 0x45, 0x0a, 0x2d,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4b, 0x45, 0x59, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0xab, 0xa9,
	0x8e, 0xfb, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x12, 0x49, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4b, 0x45, 0x59, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x52,
	0x59, 0x50, 0x54, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48,
	0x41, 0x5f, 0x31, 0x5f, 0x31, 0x32, 0x10, 0xfb, 0x87, 0xda, 0xff, 0x01, 0x1a, 0x10, 0x82, 0x41,
	0x0d, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x31, 0x5f, 0x31, 0x32, 0x2a, 0xee,
	0x01, 0x0a, 0x29, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x12, 0x33, 0x0a, 0x2f,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x52,
	0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x4b, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0xa8, 0xf4, 0xe0, 0x9f, 0x01, 0x1a,
	0x0d, 0x82, 0x41, 0x0a, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x12, 0x3f,
	0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x10, 0xc3, 0xb2, 0xca, 0xe7, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x44, 0x52, 0x4f, 0x50, 0x2a,
	0x4a, 0x0a, 0x1e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x44, 0x45, 0x42, 0x55, 0x47, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x44, 0x45, 0x42, 0x55, 0x47, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x2a, 0xcc, 0x01, 0x0a, 0x1d,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x43, 0x73,
	0x70, 0x66, 0x54, 0x69, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a,
	0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x43,
	0x53, 0x50, 0x46, 0x54, 0x49, 0x45, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x52,
	0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x00, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x52, 0x41, 0x4e, 0x44,
	0x4f, 0x4d, 0x12, 0x3b, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4d, 0x50, 0x4c, 0x53, 0x43, 0x53, 0x50, 0x46, 0x54, 0x49, 0x45, 0x42, 0x52, 0x45, 0x41, 0x4b,
	0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x10, 0x02,
	0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x12,
	0x39, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c,
	0x53, 0x43, 0x53, 0x50, 0x46, 0x54, 0x49, 0x45, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x49, 0x4e, 0x47,
	0x5f, 0x4d, 0x4f, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x0c, 0x82, 0x41,
	0x09, 0x4d, 0x4f, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x2a, 0x96, 0x02, 0x0a, 0x27, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x64, 0x70,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x44, 0x50, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x5d, 0x0a, 0x3e, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x44, 0x50, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f,
	0x55, 0x4e, 0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x19, 0x82,
	0x41, 0x16, 0x44, 0x4f, 0x57, 0x4e, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x55, 0x4e, 0x53,
	0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x45, 0x44, 0x12, 0x59, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x44, 0x50, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x02, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x44,
	0x4f, 0x57, 0x4e, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4d,
	0x41, 0x4e, 0x44, 0x2a, 0xd2, 0x01, 0x0a, 0x25, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x64, 0x70, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x64, 0x70,
	0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a,
	0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x4c,
	0x44, 0x50, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x44, 0x50, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e,
	0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x37,
	0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53,
	0x4c, 0x44, 0x50, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x44, 0x50, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45,
	0x4e, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x01, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x4c, 0x49, 0x4e, 0x4b, 0x12, 0x3f, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x44, 0x50, 0x4d, 0x50, 0x4c, 0x53,
	0x4c, 0x44, 0x50, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0b, 0x82, 0x41, 0x08,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x45, 0x44, 0x2a, 0xa2, 0x01, 0x0a, 0x1b, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x64, 0x70, 0x4d, 0x70,
	0x6c, 0x73, 0x4c, 0x64, 0x70, 0x41, 0x66, 0x69, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x44, 0x50, 0x4d, 0x50, 0x4c,
	0x53, 0x4c, 0x44, 0x50, 0x41, 0x46, 0x49, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x2d, 0x0a, 0x20, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c,
	0x53, 0x4c, 0x44, 0x50, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x44, 0x50, 0x41, 0x46, 0x49, 0x5f, 0x49,
	0x50, 0x56, 0x34, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x34, 0x12, 0x2d,
	0x0a, 0x20, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53,
	0x4c, 0x44, 0x50, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x44, 0x50, 0x41, 0x46, 0x49, 0x5f, 0x49, 0x50,
	0x56, 0x36, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x36, 0x2a, 0xa0, 0x01,
	0x0a, 0x19, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73,
	0x4d, 0x70, 0x6c, 0x73, 0x48, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x4d, 0x50, 0x4c,
	0x53, 0x48, 0x4f, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x2d, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50,
	0x4c, 0x53, 0x4d, 0x50, 0x4c, 0x53, 0x48, 0x4f, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f,
	0x4f, 0x53, 0x45, 0x10, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4c, 0x4f, 0x4f, 0x53, 0x45, 0x12,
	0x2f, 0x0a, 0x20, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c,
	0x53, 0x4d, 0x50, 0x4c, 0x53, 0x48, 0x4f, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52,
	0x49, 0x43, 0x54, 0x10, 0x02, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54,
	0x2a, 0xae, 0x01, 0x0a, 0x22, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x70, 0x6c, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x53, 0x72, 0x6c, 0x67, 0x46, 0x6c, 0x6f, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x4d, 0x50, 0x4c, 0x53, 0x53, 0x52, 0x4c,
	0x47, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c,
	0x4f, 0x4f, 0x44, 0x45, 0x44, 0x5f, 0x53, 0x52, 0x4c, 0x47, 0x10, 0x00, 0x1a, 0x0f, 0x82, 0x41,
	0x0c, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x45, 0x44, 0x5f, 0x53, 0x52, 0x4c, 0x47, 0x12, 0x42, 0x0a,
	0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x4d,
	0x50, 0x4c, 0x53, 0x53, 0x52, 0x4c, 0x47, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x52, 0x4c, 0x47, 0x10,
	0x02, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x52, 0x4c,
	0x47, 0x2a, 0x8b, 0x01, 0x0a, 0x1d, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x45, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x1a, 0x0c, 0x82, 0x41, 0x09, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x12, 0x2f,
	0x0a, 0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53,
	0x54, 0x45, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x2a,
	0xd0, 0x02, 0x0a, 0x20, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70,
	0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x53, 0x50, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x2a, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x53, 0x50, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x55, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50,
	0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x53, 0x50, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x53, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f,
	0x49, 0x4e, 0x48, 0x45, 0x52, 0x49, 0x54, 0x45, 0x44, 0x10, 0xdb, 0x94, 0xc5, 0x36, 0x1a, 0x17,
	0x82, 0x41, 0x14, 0x4c, 0x53, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x49, 0x4e,
	0x48, 0x45, 0x52, 0x49, 0x54, 0x45, 0x44, 0x12, 0x53, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x53,
	0x50, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x53, 0x50, 0x5f,
	0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x10,
	0x94, 0xdb, 0x90, 0x72, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x4c, 0x53, 0x50, 0x5f, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x12, 0x54, 0x0a, 0x34,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4c, 0x53, 0x50, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x53, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x10, 0xcf, 0xa4, 0xd6, 0xc5, 0x01, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x4c,
	0x53, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x2a, 0xb9, 0x01, 0x0a, 0x20, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x53, 0x50, 0x4f, 0x50, 0x45,
	0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x2a, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x53,
	0x50, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x53, 0x50, 0x4f, 0x50, 0x45,
	0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x10, 0xad, 0xeb, 0xf5, 0x7d, 0x1a,
	0x05, 0x82, 0x41, 0x02, 0x55, 0x50, 0x12, 0x36, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x53, 0x50,
	0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10,
	0x86, 0xaf, 0x81, 0xa0, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x2a, 0xe7,
	0x01, 0x0a, 0x1a, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x53, 0x50, 0x52, 0x4f, 0x4c, 0x45, 0x12, 0x24, 0x0a,
	0x20, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4c, 0x53, 0x50, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x53, 0x50, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x10, 0xae, 0xe5, 0xd1, 0x69, 0x1a, 0x0a,
	0x82, 0x41, 0x07, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x12, 0x36, 0x0a, 0x22, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4c, 0x53, 0x50, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x10, 0xc2, 0xd1, 0xd6, 0xa0, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x4e, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x12, 0x34, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x53, 0x50, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0xd4, 0x8a, 0x8d, 0xb3, 0x01, 0x1a, 0x09, 0x82,
	0x41, 0x06, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x2a, 0x8e, 0x04, 0x0a, 0x20, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x2a, 0x0a,
	0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x4e, 0x0a, 0x33, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x49, 0x50,
	0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x10, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c,
	0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x42, 0x0a, 0x2d, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0x82, 0x41,
	0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0x4e, 0x0a,
	0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f,
	0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x36, 0x5f,
	0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x44, 0x0a,
	0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10,
	0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x12, 0x58, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10,
	0x08, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x12, 0x3a, 0x0a,
	0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41,
	0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a, 0xcd, 0x01, 0x0a, 0x20, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x4e, 0x55, 0x4c, 0x4c, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2a,
	0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x4e, 0x55, 0x4c, 0x4c, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3d, 0x0a, 0x29, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4e, 0x55, 0x4c, 0x4c, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x10, 0xdd, 0xd4, 0xdd, 0x0c, 0x1a, 0x0b, 0x82, 0x41,
	0x08, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x12, 0x3e, 0x0a, 0x29, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x4e, 0x55, 0x4c, 0x4c, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58,
	0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x10, 0x9c, 0xd1, 0xf9, 0xd1, 0x01, 0x1a, 0x0b, 0x82, 0x41,
	0x08, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x2a, 0xee, 0x02, 0x0a, 0x28, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x50, 0x41, 0x54, 0x48, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x12, 0x32, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x41, 0x54,
	0x48, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x5a, 0x0a, 0x3b, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x50, 0x41, 0x54, 0x48, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x4c,
	0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x49, 0x45, 0x44, 0x10, 0xbe, 0xb1, 0x85, 0xc7, 0x01, 0x1a,
	0x15, 0x82, 0x41, 0x12, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x49, 0x45, 0x44, 0x12, 0x5a, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x41, 0x54,
	0x48, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x4c, 0x59, 0x5f, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0xe3, 0xd7, 0xe0, 0xc9, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12,
	0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x4c, 0x59, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x12, 0x56, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x41, 0x54, 0x48, 0x43, 0x4f, 0x4d,
	0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x44, 0x10,
	0x8a, 0x96, 0xc7, 0xd4, 0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x4c,
	0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x44, 0x2a, 0xdf, 0x02, 0x0a, 0x21, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x50, 0x41, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45,
	0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50,
	0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x41, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x40, 0x0a,
	0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x50, 0x41, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0xb6, 0x94, 0xb3,
	0x60, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x12,
	0x41, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c,
	0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x41, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x9b,
	0xb8, 0xc1, 0xcc, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x48, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x12, 0x43, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x41, 0x54, 0x48, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x44, 0x45, 0x4c,
	0x41, 0x59, 0x10, 0xb7, 0xab, 0x92, 0xd7, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x50, 0x41, 0x54,
	0x48, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x12, 0x43, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x41,
	0x54, 0x48, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x47, 0x50,
	0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x95, 0xa2, 0x89, 0xde, 0x01, 0x1a, 0x0d, 0x82,
	0x41, 0x0a, 0x49, 0x47, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x2a, 0xc4, 0x02, 0x0a,
	0x24, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x50, 0x41, 0x54, 0x48, 0x53, 0x45, 0x54, 0x55, 0x50, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x41, 0x54, 0x48,
	0x53, 0x45, 0x54, 0x55, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x4f, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x41, 0x54, 0x48,
	0x53, 0x45, 0x54, 0x55, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x50, 0x41,
	0x54, 0x48, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x10, 0xea, 0x8b,
	0xbf, 0x0f, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x54, 0x55,
	0x50, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x12, 0x4b, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x41, 0x54,
	0x48, 0x53, 0x45, 0x54, 0x55, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x50,
	0x41, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x5f, 0x53, 0x52, 0x10, 0xea, 0xb9, 0xc9,
	0x7b, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50,
	0x5f, 0x53, 0x52, 0x12, 0x4e, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x41, 0x54, 0x48, 0x53, 0x45,
	0x54, 0x55, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x48,
	0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x5f, 0x4c, 0x44, 0x50, 0x10, 0x93, 0xed, 0xb2, 0xf9, 0x01,
	0x1a, 0x11, 0x82, 0x41, 0x0e, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x5f,
	0x4c, 0x44, 0x50, 0x2a, 0xe4, 0x02, 0x0a, 0x21, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x52, 0x4f, 0x54, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x44, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x52, 0x4f,
	0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x50, 0x52,
	0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0xc0, 0xa1, 0xeb, 0x19, 0x1a, 0x0e, 0x82, 0x41,
	0x0b, 0x55, 0x4e, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x12, 0x6b, 0x0a, 0x40,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44,
	0x10, 0xfd, 0xd8, 0xa2, 0x8e, 0x01, 0x1a, 0x21, 0x82, 0x41, 0x1e, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x12, 0x5f, 0x0a, 0x3a, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x81, 0x94, 0xff, 0xb9, 0x01, 0x1a, 0x1b, 0x82,
	0x41, 0x18, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x2a, 0xb0, 0x02, 0x0a, 0x2a, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x50, 0x53, 0x45, 0x55, 0x44, 0x4f, 0x57, 0x49, 0x52, 0x45, 0x45, 0x4e, 0x43, 0x41,
	0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x34, 0x0a, 0x30, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x50, 0x53, 0x45, 0x55, 0x44, 0x4f, 0x57, 0x49, 0x52, 0x45, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53,
	0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x62, 0x0a, 0x40, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c,
	0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x53, 0x45, 0x55, 0x44, 0x4f, 0x57, 0x49, 0x52, 0x45,
	0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x57,
	0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x5f, 0x52, 0x41, 0x57, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x10, 0xf6, 0xa9, 0xbc, 0xd1, 0x01, 0x1a, 0x18, 0x82, 0x41, 0x15, 0x50, 0x57,
	0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x5f, 0x52, 0x41, 0x57, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x12, 0x68, 0x0a, 0x43, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x53, 0x45, 0x55, 0x44, 0x4f,
	0x57, 0x49, 0x52, 0x45, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x57, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x5f, 0x54,
	0x41, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0xb8, 0xd1, 0x97, 0xdc, 0x01,
	0x1a, 0x1b, 0x82, 0x41, 0x18, 0x50, 0x57, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x2a, 0x95, 0x01,
	0x0a, 0x1f, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x53, 0x56, 0x50, 0x41, 0x55, 0x54, 0x48, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d,
	0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x52, 0x53, 0x56, 0x50, 0x41, 0x55, 0x54, 0x48,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x47, 0x0a, 0x2d,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x52, 0x53, 0x56, 0x50, 0x41, 0x55, 0x54, 0x48, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x53, 0x56, 0x50, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0xf7, 0x84,
	0xad, 0xda, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x52, 0x53, 0x56, 0x50, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x4d, 0x44, 0x35, 0x2a, 0xe0, 0x01, 0x0a, 0x24, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x55, 0x4e,
	0x4e, 0x45, 0x4c, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x2e,
	0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x41,
	0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x55, 0x50, 0x10,
	0xc3, 0x86, 0xbc, 0x23, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x55,
	0x50, 0x12, 0x45, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d,
	0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f,
	0x44, 0x4f, 0x57, 0x4e, 0x10, 0x80, 0x90, 0xb5, 0x43, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x2a, 0xaf, 0x01, 0x0a, 0x1d, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x32, 0x50, 0x10, 0xa4, 0x86, 0xe2, 0x6f, 0x1a, 0x06, 0x82,
	0x41, 0x03, 0x50, 0x32, 0x50, 0x12, 0x33, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x55, 0x4e, 0x4e,
	0x45, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x32, 0x4d, 0x50, 0x10, 0xeb, 0xa5, 0xda, 0xb9,
	0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x50, 0x32, 0x4d, 0x50, 0x2a, 0xec, 0x01, 0x0a, 0x2b, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x4e, 0x43,
	0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x35, 0x0a, 0x31, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x41,
	0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x41, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0xf7, 0x91, 0xbe, 0xae, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04,
	0x4d, 0x50, 0x4c, 0x53, 0x12, 0x43, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x10, 0x82, 0xd8, 0x91, 0xf7, 0x01, 0x1a,
	0x08, 0x82, 0x41, 0x05, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x2a, 0xec, 0x01, 0x0a, 0x2a, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x4e, 0x44, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x12, 0x34, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x44,
	0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4d,
	0x4f, 0x54, 0x45, 0x10, 0xdf, 0x8f, 0xa8, 0x96, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x52, 0x45,
	0x4d, 0x4f, 0x54, 0x45, 0x12, 0x42, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0xaa, 0xd9, 0xd5, 0xe1, 0x01, 0x1a, 0x08,
	0x82, 0x41, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x2a, 0xf6, 0x02, 0x0a, 0x31, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x4d, 0x4f, 0x44, 0x45, 0x12, 0x3b,
	0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x54, 0x0a, 0x3d, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x10, 0xe8, 0x8e, 0x96,
	0x14, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x50, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f,
	0x50, 0x12, 0x52, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49,
	0x58, 0x10, 0x88, 0xfa, 0xae, 0x46, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x50, 0x45, 0x52, 0x5f, 0x50,
	0x52, 0x45, 0x46, 0x49, 0x58, 0x12, 0x5a, 0x0a, 0x40, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x41, 0x4c, 0x4c, 0x4f,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0xca, 0x81, 0x83, 0x7c, 0x1a, 0x11,
	0x82, 0x41, 0x0e, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x2a, 0xf8, 0x03, 0x0a, 0x31, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x12, 0x3b, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x48, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x32, 0x50, 0x32, 0x50, 0x10,
	0xc0, 0xf7, 0xdd, 0x17, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4c, 0x32, 0x50, 0x32, 0x50, 0x12, 0x48,
	0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x32, 0x56, 0x53, 0x49, 0x10, 0xb0, 0xc9, 0xa2, 0x1f, 0x1a, 0x08,
	0x82, 0x41, 0x05, 0x4c, 0x32, 0x56, 0x53, 0x49, 0x12, 0x48, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x33,
	0x56, 0x52, 0x46, 0x10, 0xbb, 0xf9, 0xf3, 0x4c, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4c, 0x33, 0x56,
	0x52, 0x46, 0x12, 0x47, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x32, 0x4c, 0x33, 0x10, 0xad, 0xfa, 0xa7,
	0xc3, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4c, 0x32, 0x4c, 0x33, 0x12, 0x5f, 0x0a, 0x42, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0xb7, 0xc3, 0x9a, 0xe3, 0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x2a, 0xde, 0x02, 0x0a,
	0x23, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x47, 0x52, 0x41, 0x43, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x47, 0x52, 0x41, 0x43, 0x45,
	0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x58, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x47, 0x52, 0x41, 0x43, 0x45, 0x4c,
	0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x43, 0x45,
	0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10,
	0xbc, 0xe9, 0xa3, 0x22, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x47, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x12, 0x64, 0x0a,
	0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x47, 0x52, 0x41, 0x43, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x50, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10,
	0xaa, 0xa5, 0xc5, 0x48, 0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x47, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x49,
	0x50, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x12, 0x48, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x47, 0x52, 0x41, 0x43, 0x45, 0x4c,
	0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x43, 0x45,
	0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0xa7, 0xf2, 0xa6, 0x74, 0x1a, 0x0f, 0x82, 0x41,
	0x0c, 0x47, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x2a, 0xa8, 0x02,
	0x0a, 0x23, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x4d, 0x41, 0x58, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x49, 0x4e,
	0x43, 0x4c, 0x55, 0x44, 0x45, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4d, 0x41, 0x58, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x5e, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4d, 0x41, 0x58, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x53,
	0x54, 0x55, 0x42, 0x10, 0xb4, 0xf3, 0xb0, 0x17, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x4d, 0x41, 0x58,
	0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f,
	0x53, 0x54, 0x55, 0x42, 0x12, 0x72, 0x0a, 0x45, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4d, 0x41, 0x58, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x32, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0xc0, 0x88,
	0xfe, 0x52, 0x1a, 0x24, 0x82, 0x41, 0x21, 0x4d, 0x41, 0x58, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x32, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x2a, 0xb9, 0x01, 0x0a, 0x23, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x4d, 0x41, 0x58, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52,
	0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53,
	0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4d, 0x41, 0x58, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x63, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50,
	0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4d, 0x41, 0x58, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x54,
	0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x5f, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x42, 0x4f, 0x4f, 0x54,
	0x10, 0x8f, 0xa5, 0x8b, 0xcc, 0x01, 0x1a, 0x1c, 0x82, 0x41, 0x19, 0x4d, 0x41, 0x58, 0x5f, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x42, 0x4f, 0x4f, 0x54, 0x2a, 0xc2, 0x06, 0x0a, 0x1e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x53, 0x50, 0x46,
	0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53,
	0x50, 0x46, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x4b, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f,
	0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4c, 0x53, 0x41, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x53, 0x42, 0x52,
	0x5f, 0x4c, 0x53, 0x41, 0x10, 0x9d, 0xd5, 0xcf, 0x3b, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x53, 0x55,
	0x4d, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x53, 0x42, 0x52, 0x5f, 0x4c, 0x53, 0x41, 0x12, 0x63,
	0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x43, 0x4f,
	0x50, 0x45, 0x5f, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x5f, 0x4c, 0x53, 0x41, 0x10, 0x9e, 0xb2,
	0xbc, 0x41, 0x1a, 0x1f, 0x82, 0x41, 0x1c, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x5f,
	0x4c, 0x53, 0x41, 0x12, 0x5f, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4c, 0x53,
	0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x41, 0x53, 0x5f,
	0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x5f, 0x4c, 0x53, 0x41,
	0x10, 0x8a, 0xbc, 0x8e, 0x59, 0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32,
	0x5f, 0x41, 0x53, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45,
	0x5f, 0x4c, 0x53, 0x41, 0x12, 0x57, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4c,
	0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x49,
	0x50, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x53, 0x41, 0x10, 0xe1, 0xdd,
	0xf6, 0x59, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x49,
	0x50, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x53, 0x41, 0x12, 0x63, 0x0a,
	0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x53, 0x43, 0x4f, 0x50,
	0x45, 0x5f, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x5f, 0x4c, 0x53, 0x41, 0x10, 0xcf, 0xae, 0xd4,
	0x66, 0x1a, 0x1f, 0x82, 0x41, 0x1c, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x41, 0x52, 0x45,
	0x41, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x5f, 0x4c,
	0x53, 0x41, 0x12, 0x3f, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4c, 0x53, 0x41,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x53, 0x41, 0x10,
	0xb9, 0xfb, 0xff, 0x7b, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f,
	0x4c, 0x53, 0x41, 0x12, 0x42, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4c, 0x53,
	0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x53,
	0x41, 0x10, 0x8a, 0xc3, 0xae, 0xa7, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x53, 0x41, 0x12, 0x54, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53,
	0x50, 0x46, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x53, 0x53, 0x41, 0x5f, 0x41,
	0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x4c, 0x53, 0x41, 0x10, 0x84,
	0xe8, 0x87, 0xd4, 0x01, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x4e, 0x53, 0x53, 0x41, 0x5f, 0x41, 0x53,
	0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x4c, 0x53, 0x41, 0x12, 0x4a, 0x0a,
	0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x4c, 0x53, 0x41, 0x10,
	0xb2, 0xbf, 0xce, 0xea, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x41, 0x53, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x4c, 0x53, 0x41, 0x2a, 0xd2, 0x04, 0x0a, 0x24, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x4f, 0x53, 0x50, 0x46, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4e, 0x45, 0x49,
	0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x39, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4e, 0x45, 0x49,
	0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10,
	0xce, 0x92, 0xe8, 0x11, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x4e, 0x49, 0x54, 0x12, 0x39, 0x0a,
	0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0xaf, 0xf2, 0xeb, 0x1f, 0x1a,
	0x07, 0x82, 0x41, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x12, 0x3f, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f,
	0x53, 0x50, 0x46, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x10, 0xbb, 0x82, 0xfd, 0x36, 0x1a, 0x0a, 0x82,
	0x41, 0x07, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x12, 0x3f, 0x0a, 0x2c, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x4f, 0x53, 0x50, 0x46, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x54, 0x57, 0x4f, 0x5f, 0x57, 0x41, 0x59, 0x10, 0x8a, 0xd4, 0xc1, 0x44, 0x1a, 0x0a,
	0x82, 0x41, 0x07, 0x54, 0x57, 0x4f, 0x5f, 0x57, 0x41, 0x59, 0x12, 0x3a, 0x0a, 0x29, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4f, 0x53, 0x50, 0x46, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0xec, 0xb1, 0xe6, 0x9a, 0x01, 0x1a, 0x07, 0x82,
	0x41, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x12, 0x40, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50,
	0x46, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c,
	0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x8c, 0xdf, 0xbc, 0xb5, 0x01, 0x1a, 0x0a, 0x82, 0x41,
	0x07, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x12, 0x42, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f,
	0x53, 0x50, 0x46, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xe7, 0xd5, 0x97, 0xb7, 0x01, 0x1a,
	0x0b, 0x82, 0x41, 0x08, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x12, 0x40, 0x0a, 0x2c,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0xed, 0x9b, 0x96,
	0xcc, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x45, 0x58, 0x53, 0x54, 0x41, 0x52, 0x54, 0x2a, 0xdf,
	0x02, 0x0a, 0x22, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x53, 0x50, 0x46, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2c, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x5b, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x54, 0x4f, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x10, 0xd7, 0x97, 0xfd, 0x0f, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x54, 0x4f, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x12, 0x52, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53,
	0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0xed, 0x8b, 0xc8, 0x9d, 0x01, 0x1a, 0x14,
	0x82, 0x41, 0x11, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x12, 0x5a, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x42,
	0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x10, 0x99, 0xa7, 0xbd, 0xd6, 0x01, 0x1a, 0x18, 0x82, 0x41, 0x15, 0x4e, 0x4f, 0x4e, 0x5f, 0x42,
	0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x2a, 0x85, 0x04, 0x0a, 0x24, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f,
	0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x53, 0x50, 0x46, 0x4f, 0x50, 0x41, 0x51,
	0x55, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x4f, 0x53, 0x50, 0x46, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x5d, 0x0a, 0x3b, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x4f, 0x53, 0x50, 0x46, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x90, 0xdb, 0x88, 0x09, 0x1a, 0x19, 0x82,
	0x41, 0x16, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x12, 0x43, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f,
	0x53, 0x50, 0x46, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x47, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x53, 0x41, 0x10, 0xf0, 0xdc, 0xdd, 0x5d, 0x1a,
	0x0c, 0x82, 0x41, 0x09, 0x47, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x53, 0x41, 0x12, 0x57, 0x0a,
	0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x4c, 0x53,
	0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x45, 0x4e,
	0x47, 0x49, 0x4e, 0x45, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x86, 0xfa, 0xdc, 0x5e, 0x1a, 0x16,
	0x82, 0x41, 0x13, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e,
	0x45, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x12, 0x59, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50,
	0x46, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x53, 0x50, 0x46, 0x56, 0x32, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x10, 0x8c, 0xb8, 0xed, 0x65, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x4f, 0x53, 0x50,
	0x46, 0x56, 0x32, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x12, 0x55, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f,
	0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x4f, 0x50, 0x41, 0x51,
	0x55, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xd3, 0xf7, 0xc4,
	0x75, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x2a, 0xbf, 0x01, 0x0a, 0x2b, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x4f, 0x53, 0x50, 0x46, 0x52, 0x49, 0x53, 0x52, 0x53, 0x49, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x53, 0x12, 0x35, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f,
	0x53, 0x50, 0x46, 0x52, 0x49, 0x53, 0x52, 0x53, 0x49, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x54,
	0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x59, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50,
	0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x52, 0x49, 0x53, 0x52, 0x53, 0x49,
	0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x53,
	0x52, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x54, 0x4c, 0x56, 0x10,
	0xfc, 0x8c, 0x97, 0xc4, 0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x53, 0x52, 0x5f, 0x53, 0x49, 0x44,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x54, 0x4c, 0x56, 0x2a, 0x89, 0x07, 0x0a, 0x24, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x4c, 0x56, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45,
	0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x57, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45,
	0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0xde, 0xb8, 0xf0, 0x13, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x12, 0x79, 0x0a, 0x49,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x4c, 0x56,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4d, 0x41, 0x58,
	0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0xc5, 0xee, 0xdf, 0x26, 0x1a, 0x27,
	0x82, 0x41, 0x24, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4d, 0x41, 0x58, 0x49, 0x4d,
	0x55, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x41,
	0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x12, 0x69, 0x0a, 0x41, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53,
	0x50, 0x46, 0x54, 0x45, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x44, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0xda, 0xf0, 0xb2,
	0x71, 0x1a, 0x1f, 0x82, 0x41, 0x1c, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x55, 0x4e,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44,
	0x54, 0x48, 0x12, 0x4e, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c,
	0x49, 0x4e, 0x4b, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0xf1, 0x8c, 0x96, 0x83, 0x01, 0x1a,
	0x11, 0x82, 0x41, 0x0e, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x12, 0x64, 0x0a, 0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c,
	0x49, 0x4e, 0x4b, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x5f, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57,
	0x49, 0x44, 0x54, 0x48, 0x10, 0xc3, 0xb0, 0xad, 0xaa, 0x01, 0x1a, 0x1c, 0x82, 0x41, 0x19, 0x54,
	0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x42,
	0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x12, 0x52, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f,
	0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x49,
	0x50, 0x10, 0xbe, 0x8d, 0xd0, 0xbe, 0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x54, 0x45, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x50, 0x12, 0x46, 0x0a, 0x2f,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x4c, 0x56,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x49, 0x44, 0x10,
	0xa6, 0x8e, 0xab, 0xdd, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x49, 0x44, 0x12, 0x54, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54,
	0x45, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f,
	0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x49, 0x50, 0x10, 0xdd,
	0x8c, 0xf9, 0xdf, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x49, 0x50, 0x12, 0x4a, 0x0a, 0x31, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x4c, 0x56, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0xdd, 0xab, 0xca, 0xeb, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x2a, 0xca, 0x04, 0x0a, 0x23, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x53,
	0x50, 0x46, 0x54, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2d,
	0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x4c,
	0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x5c, 0x0a,
	0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49,
	0x50, 0x56, 0x36, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0xbe, 0xe2, 0xc7, 0x16,
	0x1a, 0x19, 0x82, 0x41, 0x16, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49,
	0x50, 0x56, 0x36, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x52, 0x0a, 0x35, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x45, 0x10, 0xc7, 0xb8, 0xed, 0x1c, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x54, 0x45,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x12,
	0x3e, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50,
	0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x53, 0x41, 0x54,
	0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0xd2,
	0xa4, 0xc0, 0x32, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x12,
	0x60, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50,
	0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x53, 0x41, 0x54,
	0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x10,
	0xef, 0xef, 0x83, 0x71, 0x1a, 0x1b, 0x82, 0x41, 0x18, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54,
	0x59, 0x12, 0x4b, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f,
	0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x53,
	0x41, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x9e, 0xc4, 0xaf, 0xa6, 0x01, 0x1a, 0x10, 0x82, 0x41,
	0x0d, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x12, 0x53,
	0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x45, 0x4c, 0x53, 0x41, 0x54, 0x4c,
	0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0xa0, 0xdd, 0xb2, 0xaf, 0x01, 0x1a, 0x14, 0x82,
	0x41, 0x11, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x2a, 0xc5, 0x01, 0x0a, 0x2f, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x53, 0x50, 0x46, 0x56,
	0x32, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x55, 0x42,
	0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x12, 0x39, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53,
	0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x4c, 0x49, 0x4e, 0x4b,
	0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x57, 0x0a, 0x3d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45,
	0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x55, 0x42, 0x54, 0x4c,
	0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x5f,
	0x53, 0x49, 0x44, 0x10, 0x93, 0xb3, 0xb4, 0x9f, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x41, 0x44,
	0x4a, 0x41, 0x43, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x53, 0x49, 0x44, 0x2a, 0xcb, 0x03, 0x0a, 0x40,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x49, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45,
	0x12, 0x4a, 0x0a, 0x46, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53,
	0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x49, 0x44, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x5c, 0x0a, 0x49,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x49, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x52, 0x4f, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x8a, 0xd8, 0x6f, 0x1a, 0x0b, 0x82,
	0x41, 0x08, 0x45, 0x52, 0x4f, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x12, 0x61, 0x0a, 0x4b, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x50,
	0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x49, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x42, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x52, 0x4f, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0xe3, 0x83, 0xaa, 0x17, 0x1a, 0x0d,
	0x82, 0x41, 0x0a, 0x45, 0x52, 0x4f, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x12, 0x7a, 0x0a,
	0x57, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x49, 0x44, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xd6, 0xf3, 0x95, 0xfb, 0x01, 0x1a, 0x19,
	0x82, 0x41, 0x16, 0x53, 0x49, 0x44, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x2a, 0x90, 0x03, 0x0a, 0x31, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x50,
	0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x3b, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50,
	0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x45,
	0x4e, 0x44, 0x45, 0x44, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x60, 0x0a, 0x43,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x42, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0xbd, 0xb2, 0xb5, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x53, 0x49, 0x44,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x12, 0x68,
	0x0a, 0x47, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x44, 0x45, 0x44, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45,
	0x46, 0x49, 0x58, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xc8, 0xf2, 0xfb, 0x60, 0x1a, 0x18,
	0x82, 0x41, 0x15, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x46,
	0x49, 0x58, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x12, 0x52, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f,
	0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x50, 0x52, 0x45,
	0x46, 0x49, 0x58, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52,
	0x45, 0x46, 0x49, 0x58, 0x5f, 0x53, 0x49, 0x44, 0x10, 0xb1, 0xf0, 0xab, 0x71, 0x1a, 0x0d, 0x82,
	0x41, 0x0a, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x53, 0x49, 0x44, 0x2a, 0xeb, 0x02, 0x0a,
	0x3b, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x50, 0x52, 0x45,
	0x46, 0x49, 0x58, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x4f, 0x50, 0x41, 0x54,
	0x48, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x12, 0x45, 0x0a, 0x41,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x50, 0x52, 0x45, 0x46,
	0x49, 0x58, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x4f, 0x50, 0x41, 0x54, 0x48,
	0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x61, 0x0a, 0x48, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32,
	0x45, 0x58, 0x54, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x45, 0x52, 0x4f, 0x50, 0x41, 0x54, 0x48, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0xaa, 0xf9, 0x90, 0xa2, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x53,
	0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x12, 0x81, 0x01, 0x0a, 0x58, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53,
	0x50, 0x46, 0x56, 0x32, 0x45, 0x58, 0x54, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x42, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x4f, 0x50, 0x41, 0x54, 0x48, 0x53, 0x45, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x45,
	0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0xae, 0xcd, 0xcd, 0xef, 0x01, 0x1a, 0x1f, 0x82, 0x41, 0x1c, 0x55, 0x4e,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x2a, 0xbd, 0x03, 0x0a, 0x27, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x4c, 0x49,
	0x4e, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50,
	0x46, 0x56, 0x32, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x56, 0x0a, 0x39, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x4c, 0x49, 0x4e, 0x4b,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x55, 0x42, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0xcd, 0xb3, 0x80, 0x2d, 0x1a, 0x14, 0x82, 0x41, 0x11,
	0x53, 0x54, 0x55, 0x42, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x12, 0x4c, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f,
	0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x52,
	0x54, 0x55, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x81, 0x93, 0x9d, 0x52, 0x1a, 0x0f,
	0x82, 0x41, 0x0c, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x12,
	0x5a, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50,
	0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x52, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0xcf,
	0xdd, 0xd1, 0x74, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x4f,
	0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x12, 0x5d, 0x0a, 0x3c, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x32, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x4c, 0x49,
	0x4e, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0xd4, 0x86, 0x8c, 0xf6,
	0x01, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x2a, 0x93, 0x04, 0x0a, 0x20, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x49, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x53, 0x12,
	0x2a, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50,
	0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x52, 0x49, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x4f, 0x0a, 0x32, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x52, 0x49, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f,
	0x52, 0x49, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x54, 0x41,
	0x47, 0x10, 0xe5, 0x9d, 0xda, 0x2e, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x52, 0x49, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x12, 0x61, 0x0a, 0x3b,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x52, 0x49, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x5f, 0x52, 0x49, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x43,
	0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0xec, 0x85, 0x8b, 0x3a,
	0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x52, 0x49, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x12,
	0x67, 0x0a, 0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50,
	0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x52, 0x49, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x5f, 0x52, 0x49, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45,
	0x53, 0x10, 0xc2, 0xf2, 0xad, 0x6e, 0x1a, 0x20, 0x82, 0x41, 0x1d, 0x52, 0x49, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x12, 0x4c, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x52,
	0x49, 0x4c, 0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x52, 0x49, 0x5f,
	0x53, 0x52, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x10, 0x99, 0xf3, 0x9b,
	0x97, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x52, 0x49, 0x5f, 0x53, 0x52, 0x5f, 0x41, 0x4c, 0x47,
	0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x12, 0x58, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x52, 0x49, 0x4c,
	0x53, 0x41, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x52, 0x49, 0x5f, 0x53, 0x52,
	0x5f, 0x53, 0x49, 0x44, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x9f, 0xe3, 0xbf, 0xbd, 0x01, 0x1a, 0x18, 0x82, 0x41, 0x15, 0x52, 0x49, 0x5f, 0x53, 0x52,
	0x5f, 0x53, 0x49, 0x44, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x2a, 0xbd, 0x03, 0x0a, 0x21, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f,
	0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x4c, 0x53,
	0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x52, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x5c, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52,
	0x4c, 0x53, 0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f,
	0x4c, 0x53, 0x41, 0x5f, 0x53, 0x54, 0x55, 0x42, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x10, 0x8d, 0xdf, 0x92, 0x20, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52,
	0x5f, 0x4c, 0x53, 0x41, 0x5f, 0x53, 0x54, 0x55, 0x42, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x12, 0x4a, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f,
	0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x4c, 0x53,
	0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x53,
	0x41, 0x5f, 0x50, 0x32, 0x50, 0x10, 0xa0, 0xae, 0xe7, 0x23, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x53, 0x41, 0x5f, 0x50, 0x32, 0x50, 0x12, 0x62, 0x0a,
	0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x4c, 0x53, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x53, 0x41, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0xd4, 0xd8,
	0xb8, 0x5c, 0x1a, 0x1d, 0x82, 0x41, 0x1a, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x53,
	0x41, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x12, 0x5d, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f,
	0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x4c, 0x53,
	0x41, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x53,
	0x41, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x82,
	0x87, 0xcb, 0xa5, 0x01, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f,
	0x4c, 0x53, 0x41, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x2a, 0xbf, 0x01, 0x0a, 0x1e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f,
	0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x52, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49,
	0x54, 0x48, 0x4d, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x52, 0x41, 0x4c, 0x47, 0x4f,
	0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x31, 0x0a,
	0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x53, 0x52, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f,
	0x53, 0x50, 0x46, 0x10, 0xd9, 0xaa, 0x88, 0x75, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x53, 0x50, 0x46,
	0x12, 0x40, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53,
	0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x52, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54,
	0x48, 0x4d, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x53, 0x50, 0x46, 0x10, 0xbf, 0x92,
	0xe1, 0xcf, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x53,
	0x50, 0x46, 0x2a, 0xa6, 0x01, 0x0a, 0x1c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x72, 0x53, 0x69, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x52, 0x53, 0x49, 0x44, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x22, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x53, 0x52, 0x53, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x10, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x12, 0x2c, 0x0a,
	0x20, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x53, 0x52, 0x53, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49,
	0x44, 0x10, 0x02, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x53, 0x49, 0x44, 0x2a, 0xac, 0x02, 0x0a, 0x29,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x73, 0x70, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x54, 0x45, 0x4e, 0x4f, 0x44, 0x45, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x45, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x12, 0x33, 0x0a, 0x2f, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x54, 0x45, 0x4e, 0x4f, 0x44, 0x45, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x54,
	0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x64,
	0x0a, 0x41, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4f, 0x53, 0x50, 0x46,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x45, 0x4e, 0x4f, 0x44, 0x45, 0x41, 0x54, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x45, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45,
	0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x10, 0xbb, 0xd0, 0xc5, 0x51, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x4e, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x12, 0x64, 0x0a, 0x41, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4f, 0x53, 0x50, 0x46, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x45, 0x4e, 0x4f, 0x44,
	0x45, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x85, 0xeb, 0xa8, 0x57, 0x1a, 0x1a,
	0x82, 0x41, 0x17, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x2a, 0xf7, 0x04, 0x0a, 0x23, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x4c, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x4f, 0x43, 0x45, 0x10, 0x91, 0xe4, 0xdb, 0x06, 0x1a, 0x11, 0x82, 0x41,
	0x0e, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x43, 0x45, 0x12,
	0x4c, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x4c, 0x44, 0x50, 0x10, 0x80, 0xf0, 0xb9, 0x1e, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4c, 0x44, 0x50, 0x12, 0x4c, 0x0a,
	0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x50, 0x56, 0x34, 0x10, 0xf5, 0xfd, 0xe7, 0x42, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x12, 0x4c, 0x0a, 0x32, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56,
	0x36, 0x10, 0xf7, 0xfd, 0xe7, 0x42, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x12, 0x4b, 0x0a, 0x31, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x50, 0x10, 0xff,
	0xa5, 0xe1, 0xb6, 0x01, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x52, 0x50, 0x12, 0x4d, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0xec, 0xae, 0x84,
	0xcc, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x12, 0x4d, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x10, 0xdb, 0x92, 0xa8, 0xf9,
	0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x56, 0x4c, 0x41, 0x4e, 0x2a, 0xe0, 0x05, 0x0a, 0x24, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x12, 0x2e, 0x0a,
	0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3d, 0x0a,
	0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x47, 0x52, 0x45, 0x10, 0xd7, 0xf2, 0xbb,
	0x0b, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x49, 0x50, 0x5f, 0x47, 0x52, 0x45, 0x12, 0x3d, 0x0a, 0x2b,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x8a, 0xb2, 0xbb, 0x12,
	0x1a, 0x09, 0x82, 0x41, 0x06, 0x49, 0x50, 0x5f, 0x54, 0x43, 0x50, 0x12, 0x3f, 0x0a, 0x2c, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x4c, 0x32, 0x54, 0x50, 0x10, 0xb3, 0x82, 0x87, 0x27,
	0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x50, 0x5f, 0x4c, 0x32, 0x54, 0x50, 0x12, 0x3f, 0x0a, 0x2c,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0xc7, 0xa9, 0x9d,
	0x61, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x50, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x12, 0x3e, 0x0a,
	0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x50, 0x49, 0x4d, 0x10, 0xe5, 0xdf, 0x90,
	0x82, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x49, 0x50, 0x5f, 0x50, 0x49, 0x4d, 0x12, 0x42, 0x0a,
	0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x49, 0x50, 0x10, 0xc4,
	0x83, 0xd5, 0x93, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x49,
	0x50, 0x12, 0x40, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49,
	0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x49, 0x47, 0x4d,
	0x50, 0x10, 0xfa, 0xcb, 0xa2, 0xf4, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x50, 0x5f, 0x49,
	0x47, 0x4d, 0x50, 0x12, 0x40, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x49,
	0x43, 0x4d, 0x50, 0x10, 0xd6, 0xc0, 0xc6, 0xf4, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x50,
	0x5f, 0x49, 0x43, 0x4d, 0x50, 0x12, 0x3e, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50,
	0x5f, 0x55, 0x44, 0x50, 0x10, 0xfa, 0xc7, 0xb1, 0xfa, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x49,
	0x50, 0x5f, 0x55, 0x44, 0x50, 0x12, 0x40, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50,
	0x5f, 0x52, 0x53, 0x56, 0x50, 0x10, 0xea, 0xf6, 0xe0, 0xfc, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07,
	0x49, 0x50, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x2a, 0x9e, 0x01, 0x0a, 0x2a, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x4e, 0x55, 0x4d, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3a, 0x0a, 0x2e,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x4e, 0x55,
	0x4d, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01,
	0x1a, 0x06, 0x82, 0x41, 0x03, 0x41, 0x4e, 0x59, 0x2a, 0xcc, 0x04, 0x0a, 0x22, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x12,
	0x2c, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x43, 0x50,
	0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3d, 0x0a,
	0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x43, 0x50, 0x46, 0x4c,
	0x41, 0x47, 0x53, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x43, 0x57, 0x52, 0x10, 0xd2, 0xa4, 0xba, 0x03,
	0x1a, 0x0a, 0x82, 0x41, 0x07, 0x54, 0x43, 0x50, 0x5f, 0x43, 0x57, 0x52, 0x12, 0x3d, 0x0a, 0x2a,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41,
	0x47, 0x53, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0xd1, 0xd9, 0xce, 0x23, 0x1a,
	0x0a, 0x82, 0x41, 0x07, 0x54, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x4b, 0x12, 0x3d, 0x0a, 0x2a, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41, 0x47,
	0x53, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x52, 0x53, 0x54, 0x10, 0xb1, 0x9b, 0xcf, 0x24, 0x1a, 0x0a,
	0x82, 0x41, 0x07, 0x54, 0x43, 0x50, 0x5f, 0x52, 0x53, 0x54, 0x12, 0x3d, 0x0a, 0x2a, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53,
	0x5f, 0x54, 0x43, 0x50, 0x5f, 0x45, 0x43, 0x45, 0x10, 0xb3, 0x98, 0xaa, 0x63, 0x1a, 0x0a, 0x82,
	0x41, 0x07, 0x54, 0x43, 0x50, 0x5f, 0x45, 0x43, 0x45, 0x12, 0x3d, 0x0a, 0x2a, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f,
	0x54, 0x43, 0x50, 0x5f, 0x50, 0x53, 0x48, 0x10, 0xa3, 0x8b, 0xe6, 0x64, 0x1a, 0x0a, 0x82, 0x41,
	0x07, 0x54, 0x43, 0x50, 0x5f, 0x50, 0x53, 0x48, 0x12, 0x3d, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x54,
	0x43, 0x50, 0x5f, 0x53, 0x59, 0x4e, 0x10, 0xb4, 0x94, 0xdd, 0x74, 0x1a, 0x0a, 0x82, 0x41, 0x07,
	0x54, 0x43, 0x50, 0x5f, 0x53, 0x59, 0x4e, 0x12, 0x3e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x54, 0x43,
	0x50, 0x5f, 0x46, 0x49, 0x4e, 0x10, 0xed, 0x8e, 0x89, 0x93, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07,
	0x54, 0x43, 0x50, 0x5f, 0x46, 0x49, 0x4e, 0x12, 0x3e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x54, 0x43,
	0x50, 0x5f, 0x55, 0x52, 0x47, 0x10, 0x8e, 0x88, 0xc6, 0xec, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07,
	0x54, 0x43, 0x50, 0x5f, 0x55, 0x52, 0x47, 0x2a, 0x92, 0x02, 0x0a, 0x1c, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x63, 0x65, 0x70, 0x4c, 0x73, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x43, 0x45, 0x50, 0x4c, 0x53, 0x50, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x40, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x43,
	0x45, 0x50, 0x4c, 0x53, 0x50, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x1a, 0x10, 0x82, 0x41, 0x0d, 0x50, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54,
	0x45, 0x44, 0x12, 0x42, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x50, 0x43, 0x45, 0x50, 0x4c, 0x53, 0x50, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x43, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x02, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x50, 0x43, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x12, 0x44, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x50, 0x43, 0x45, 0x50, 0x4c, 0x53, 0x50, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x43, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x50, 0x43, 0x43,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x2a, 0xff, 0x01, 0x0a,
	0x19, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x63, 0x65, 0x70, 0x50,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x43, 0x45, 0x50, 0x50, 0x43, 0x45, 0x4d,
	0x4f, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x35, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x43, 0x45,
	0x50, 0x50, 0x43, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x01, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x12, 0x43, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x50, 0x43, 0x45, 0x50, 0x50, 0x43, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x50, 0x41, 0x53,
	0x53, 0x49, 0x56, 0x45, 0x10, 0x02, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x46, 0x55, 0x4c, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x12, 0x41, 0x0a, 0x29, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x43, 0x45, 0x50, 0x50, 0x43, 0x45,
	0x4d, 0x4f, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x2a, 0xcc,
	0x01, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x69, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x49, 0x4d, 0x4d, 0x4f, 0x44, 0x45, 0x12, 0x23, 0x0a, 0x1f,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x49, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x50, 0x49, 0x4d, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x43, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50,
	0x49, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x49, 0x4d, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50,
	0x49, 0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x4e, 0x53, 0x45, 0x10, 0xa1, 0xe3,
	0xdb, 0x88, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x50, 0x49, 0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x44, 0x45, 0x4e, 0x53, 0x45, 0x12, 0x45, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x50, 0x49, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x50, 0x49, 0x4d, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x50, 0x49, 0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x50, 0x41,
	0x52, 0x53, 0x45, 0x10, 0xa0, 0xe5, 0x9f, 0xff, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x50, 0x49,
	0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x52, 0x53, 0x45, 0x2a, 0xbb, 0x02,
	0x0a, 0x2a, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x34, 0x0a, 0x30,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f,
	0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x47, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x95, 0xbe, 0xca, 0x1f, 0x1a, 0x0b,
	0x82, 0x41, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x12, 0x44, 0x0a, 0x31, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x4f,
	0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0xa4, 0xde, 0x92, 0xa7, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x12, 0x48, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0xc6, 0xad, 0x95, 0xd6, 0x01, 0x1a, 0x0b,
	0x82, 0x41, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x2a, 0x95, 0x03, 0x0a, 0x2c,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x12, 0x36, 0x0a, 0x32,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f,
	0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x61, 0x0a, 0x41, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0xcf, 0xf9, 0xb7, 0x73, 0x1a, 0x17,
	0x82, 0x41, 0x14, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x12, 0x64, 0x0a, 0x42, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x52, 0x45, 0x42, 0x4f, 0x4f,
	0x54, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x43,
	0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xc5, 0xa8,
	0xab, 0x8e, 0x01, 0x1a, 0x18, 0x82, 0x41, 0x15, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x43,
	0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x64, 0x0a,
	0x42, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x54, 0x45, 0x44, 0x10, 0xbe, 0xe8, 0xd3, 0xbe, 0x01, 0x1a, 0x18, 0x82, 0x41, 0x15, 0x52, 0x45,
	0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x54, 0x45, 0x44, 0x2a, 0xfa, 0x01, 0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x52, 0x45, 0x44, 0x55, 0x4e, 0x44, 0x41,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x45,
	0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54,
	0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x52, 0x45, 0x44, 0x55, 0x4e, 0x44, 0x41, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x50, 0x52,
	0x49, 0x4d, 0x41, 0x52, 0x59, 0x12, 0x49, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x52, 0x45, 0x44, 0x55, 0x4e, 0x44, 0x41,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59,
	0x10, 0x02, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59,
	0x2a, 0xf2, 0x02, 0x0a, 0x44, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x4a, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x52, 0x45, 0x44,
	0x55, 0x4e, 0x44, 0x41, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x4f, 0x56, 0x45, 0x52, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x6a, 0x0a, 0x53, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x52, 0x45, 0x44,
	0x55, 0x4e, 0x44, 0x41, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x4f, 0x56, 0x45, 0x52, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45,
	0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x54, 0x45, 0x44, 0x12, 0x6e, 0x0a, 0x55, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x52, 0x45, 0x44, 0x55, 0x4e, 0x44, 0x41,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x4f, 0x56, 0x45, 0x52,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x1a, 0x13, 0x82, 0x41, 0x10, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x54, 0x45, 0x44, 0x2a, 0xa9, 0x0b, 0x0a, 0x32, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48, 0x41, 0x52, 0x44, 0x57,
	0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x12, 0x3c, 0x0a, 0x38,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f,
	0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x5d, 0x0a, 0x42, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48,
	0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x10, 0x96, 0x94, 0xb2, 0x08, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x12, 0x4b, 0x0a, 0x39, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48, 0x41,
	0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x10, 0x95, 0xc0, 0xbe, 0x22, 0x1a, 0x09, 0x82, 0x41, 0x06,
	0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x12, 0x57, 0x0a, 0x3f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48, 0x41, 0x52, 0x44, 0x57,
	0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x57,
	0x45, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x81, 0x9a, 0xd1, 0x4a, 0x1a, 0x0f,
	0x82, 0x41, 0x0c, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x12,
	0x4b, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x10, 0xb8, 0xc8, 0xf5,
	0x4d, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x12, 0x4d, 0x0a, 0x3a,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f,
	0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0xc9, 0x81, 0xe4, 0x50, 0x1a,
	0x0a, 0x82, 0x41, 0x07, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x12, 0x47, 0x0a, 0x37, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0xe3, 0x86, 0xca, 0x63, 0x1a, 0x07, 0x82, 0x41, 0x04,
	0x50, 0x4f, 0x52, 0x54, 0x12, 0x45, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52,
	0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x4e, 0x10, 0xe5,
	0xac, 0xb0, 0x76, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x46, 0x41, 0x4e, 0x12, 0x61, 0x0a, 0x44, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x10, 0xc1, 0xb0, 0xbf, 0x76, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x57, 0x49, 0x46,
	0x49, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x12, 0x51,
	0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54,
	0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0xcf,
	0xb7, 0xd1, 0x7f, 0x1a, 0x0c, 0x82, 0x41, 0x09, 0x42, 0x41, 0x43, 0x4b, 0x50, 0x4c, 0x41, 0x4e,
	0x45, 0x12, 0x50, 0x0a, 0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x43, 0x41, 0x52, 0x44,
	0x10, 0xae, 0x83, 0xc2, 0x8a, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4c, 0x49, 0x4e, 0x45, 0x43,
	0x41, 0x52, 0x44, 0x12, 0x64, 0x0a, 0x45, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x10, 0xc1, 0xe3, 0xb9,
	0xa4, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x12, 0x4e, 0x0a, 0x3a, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48, 0x41,
	0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x10, 0x82, 0xbe, 0xb1, 0xb7, 0x01, 0x1a, 0x0a, 0x82,
	0x41, 0x07, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x12, 0x5e, 0x0a, 0x42, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48, 0x41,
	0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10,
	0x87, 0x8e, 0xbf, 0xdc, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x12, 0x46, 0x0a, 0x36, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48, 0x41,
	0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x50, 0x55, 0x10, 0x80, 0xb6, 0xe5, 0xde, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x43, 0x50,
	0x55, 0x12, 0x56, 0x0a, 0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x45, 0x49,
	0x56, 0x45, 0x52, 0x10, 0xb0, 0xae, 0xd8, 0xe6, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x12, 0x46, 0x0a, 0x36, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x48, 0x41,
	0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x46, 0x52, 0x55, 0x10, 0xbb, 0xe1, 0xb0, 0xfe, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x46, 0x52,
	0x55, 0x2a, 0xc3, 0x04, 0x0a, 0x32, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x12, 0x3c, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x4f, 0x46,
	0x54, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x5f, 0x0a, 0x43, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x4f, 0x46, 0x54, 0x57,
	0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0xf2, 0xb1,
	0xb4, 0x04, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x12, 0x55, 0x0a, 0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x4f, 0x46, 0x54,
	0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4f,
	0x4f, 0x54, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x52, 0x10, 0xf9, 0xf2, 0xdf, 0x05, 0x1a, 0x0e,
	0x82, 0x41, 0x0b, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x52, 0x12, 0x5d,
	0x0a, 0x42, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54,
	0x46, 0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x10, 0xd9, 0xb0, 0xb3, 0x29, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x53, 0x4f,
	0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x12, 0x6e, 0x0a,
	0x4a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x8e, 0x8b, 0xa3, 0xa7,
	0x01, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x48, 0x0a,
	0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4f, 0x53, 0x10, 0xc0, 0xc2, 0xf6, 0xcb, 0x01, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x42, 0x49, 0x4f, 0x53, 0x2a, 0x91, 0x07, 0x0a, 0x28, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x32, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3f, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x91, 0xf7, 0xc2, 0x16, 0x1a,
	0x08, 0x82, 0x41, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x12, 0x41, 0x0a, 0x2f, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x8a, 0xed, 0xa5,
	0x4e, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x12, 0x53, 0x0a, 0x38,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0xd5, 0xe1, 0xdf, 0x4f, 0x1a, 0x12, 0x82,
	0x41, 0x0f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54,
	0x45, 0x12, 0x3d, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c,
	0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x53,
	0x50, 0x46, 0x10, 0xf0, 0xfb, 0x95, 0x59, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4f, 0x53, 0x50, 0x46,
	0x12, 0x3b, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x49, 0x4d,
	0x10, 0xde, 0xce, 0xa2, 0x61, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x50, 0x49, 0x4d, 0x12, 0x40, 0x0a,
	0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x49, 0x42, 0x49, 0x10,
	0xd3, 0xa4, 0xe3, 0x89, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x47, 0x52, 0x49, 0x42, 0x49, 0x12,
	0x3e, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x49, 0x53,
	0x10, 0xf8, 0x90, 0x90, 0x93, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x53, 0x49, 0x53, 0x12,
	0x3e, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x43, 0x45, 0x50,
	0x10, 0xac, 0xd5, 0xdd, 0xb0, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x50, 0x43, 0x45, 0x50, 0x12,
	0x3e, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x47, 0x4d, 0x50,
	0x10, 0xb3, 0x84, 0xd9, 0xb4, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x47, 0x4d, 0x50, 0x12,
	0x3c, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x47, 0x50, 0x10,
	0xab, 0x83, 0x9b, 0xd0, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x42, 0x47, 0x50, 0x12, 0x5a, 0x0a,
	0x3b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0xce, 0x82, 0xeb,
	0xdc, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4c, 0x59, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x12, 0x40, 0x0a, 0x2e, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x33, 0x10, 0xe3, 0x81, 0x95, 0xe0,
	0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x4f, 0x53, 0x50, 0x46, 0x33, 0x2a, 0xc2, 0x01, 0x0a, 0x32,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x42, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x53, 0x45, 0x54, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49,
	0x43, 0x54, 0x45, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x1a, 0x06,
	0x82, 0x41, 0x03, 0x41, 0x4e, 0x59, 0x12, 0x48, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x53, 0x45, 0x54, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x52, 0x45,
	0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x54,
	0x2a, 0xbe, 0x03, 0x0a, 0x27, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x12, 0x31, 0x0a, 0x2d,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x53, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42,
	0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x41, 0x53, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x10, 0xe8, 0xa0, 0xb8, 0x86, 0x01,
	0x1a, 0x12, 0x82, 0x41, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x53, 0x5f,
	0x4c, 0x4f, 0x4f, 0x50, 0x12, 0x59, 0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x54,
	0x4f, 0x52, 0x10, 0xa1, 0xde, 0x91, 0x9d, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x12,
	0x5d, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42,
	0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x10,
	0x80, 0xc1, 0xad, 0xad, 0x01, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x12, 0x51,
	0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x44, 0x10, 0xd6, 0xb7, 0xd2, 0xc0, 0x01, 0x1a, 0x11,
	0x82, 0x41, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45,
	0x44, 0x2a, 0xdf, 0x04, 0x0a, 0x32, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x55,
	0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x12, 0x3c, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x5d, 0x0a, 0x42, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54,
	0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x52, 0x54,
	0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0xee, 0xd3, 0xc3,
	0x20, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x53, 0x52, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x45, 0x4e, 0x43, 0x45, 0x12, 0x60, 0x0a, 0x43, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x52, 0x54, 0x45,
	0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x49, 0x44, 0x10, 0x85, 0xc8, 0x9d,
	0xae, 0x01, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x53, 0x52, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x49, 0x44, 0x12, 0x6c, 0x0a, 0x49, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x10, 0xed, 0xfd, 0xf9, 0xc2, 0x01, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x54,
	0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x44,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x12, 0x62, 0x0a, 0x44, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x52, 0x54, 0x45,
	0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x9b, 0xb9,
	0xf5, 0xe0, 0x01, 0x1a, 0x14, 0x82, 0x41, 0x11, 0x53, 0x52, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x58, 0x0a, 0x3f, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x55, 0x42, 0x54, 0x4c, 0x56, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x86, 0xf2, 0xe5,
	0xeb, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x2a, 0xc5, 0x01, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x55, 0x4e,
	0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x36, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x55, 0x4e,
	0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x5d, 0x0a, 0x3f,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x45, 0x4e, 0x43, 0x41, 0x50,
	0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x52, 0x54,
	0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10,
	0xe9, 0xb1, 0xa7, 0x5a, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x53, 0x52, 0x54, 0x45, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x2a, 0xc2, 0x01, 0x0a, 0x28,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x10, 0x00, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x12, 0x4a, 0x0a, 0x35, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x01, 0x1a,
	0x0f, 0x82, 0x41, 0x0c, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x2a, 0x8e, 0x02, 0x0a, 0x27, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x36,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x4e, 0x45, 0x58,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x12, 0x49, 0x0a, 0x34, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x10, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x12, 0x49, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x02,
	0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x2a, 0xc8, 0x03, 0x0a, 0x25, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x45, 0x6e, 0x6c, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x2b, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54,
	0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x4e, 0x4c, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x5d, 0x0a, 0x3d,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x4e, 0x4c,
	0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f,
	0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a,
	0x1a, 0x82, 0x41, 0x17, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58,
	0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x5d, 0x0a, 0x3d, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54,
	0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x4e, 0x4c, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45,
	0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x1a, 0x1a,
	0x82, 0x41, 0x17, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x5f, 0x0a, 0x3e, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52,
	0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x4e, 0x4c, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x36, 0x5f, 0x45,
	0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x1b,
	0x82, 0x41, 0x18, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x36, 0x5f, 0x45, 0x58,
	0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x4f, 0x0a, 0x36, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54,
	0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x45, 0x4e, 0x4c, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x13, 0x82, 0x41, 0x10, 0x4e, 0x4f, 0x5f, 0x45,
	0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x2a, 0xe6, 0x01, 0x0a,
	0x2c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a,
	0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x45, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3e, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x52, 0x44, 0x41, 0x54, 0x41, 0x50, 0x4c, 0x41, 0x4e,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41,
	0x04, 0x4d, 0x50, 0x4c, 0x53, 0x12, 0x3e, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x52, 0x44, 0x41, 0x54, 0x41, 0x50, 0x4c, 0x41, 0x4e,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x1a, 0x07, 0x82, 0x41,
	0x04, 0x49, 0x50, 0x56, 0x36, 0x2a, 0xba, 0x04, 0x0a, 0x30, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x72, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x53, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x36, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52,
	0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x52, 0x54, 0x45, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x53, 0x4c, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x4a, 0x0a, 0x39, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49,
	0x4e, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x52, 0x54, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x53, 0x4c, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59,
	0x5f, 0x53, 0x4c, 0x10, 0x01, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f,
	0x53, 0x4c, 0x12, 0x50, 0x0a, 0x3c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x53, 0x52, 0x54, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x53, 0x4c,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x57, 0x45, 0x49, 0x47,
	0x48, 0x54, 0x10, 0x02, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x57, 0x45,
	0x49, 0x47, 0x48, 0x54, 0x12, 0x66, 0x0a, 0x47, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x52, 0x54, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x53, 0x4c, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x53,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x03, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x53, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x12, 0x66, 0x0a, 0x47,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x52, 0x54,
	0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x53, 0x4c, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x53,
	0x4f, 0x4c, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x1a, 0x19, 0x82, 0x41, 0x16, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56,
	0x41, 0x42, 0x4c, 0x45, 0x12, 0x5c, 0x0a, 0x42, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x52, 0x54, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x53, 0x4c, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x05, 0x1a, 0x14, 0x82, 0x41,
	0x11, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x2a, 0xad, 0x02, 0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x53, 0x72, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x52, 0x54, 0x45, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3f, 0x0a,
	0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x45, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x52,
	0x54, 0x45, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x43, 0x45, 0x50, 0x10, 0x0b, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x50, 0x43, 0x45, 0x50, 0x12, 0x3d,
	0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x45, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53,
	0x52, 0x54, 0x45, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x47, 0x50, 0x10, 0x15, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x42, 0x47, 0x50, 0x12, 0x43, 0x0a,
	0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x45, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x53, 0x52,
	0x54, 0x45, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x1f, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x2a, 0x99, 0x0a, 0x0a, 0x25, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x59,
	0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12, 0x2f, 0x0a, 0x2b,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x41, 0x0a,
	0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41,
	0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x50, 0x52, 0x49, 0x56, 0x10,
	0x9f, 0xcb, 0x79, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x41, 0x55, 0x54, 0x48, 0x50, 0x52, 0x49, 0x56,
	0x12, 0x3a, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f,
	0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0xaf,
	0x9a, 0xcc, 0x34, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4d, 0x41, 0x49, 0x4c, 0x12, 0x3e, 0x0a, 0x2c,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x35, 0x10, 0xd0, 0xad, 0xf3,
	0x5d, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x35, 0x12, 0x3e, 0x0a, 0x2c,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x34, 0x10, 0xd1, 0xad, 0xf3,
	0x5d, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x34, 0x12, 0x3e, 0x0a, 0x2c,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x37, 0x10, 0xd2, 0xad, 0xf3,
	0x5d, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x37, 0x12, 0x3e, 0x0a, 0x2c,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x36, 0x10, 0xd3, 0xad, 0xf3,
	0x5d, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x36, 0x12, 0x3e, 0x0a, 0x2c,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x31, 0x10, 0xd4, 0xad, 0xf3,
	0x5d, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x31, 0x12, 0x3e, 0x0a, 0x2c,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x30, 0x10, 0xd5, 0xad, 0xf3,
	0x5d, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x30, 0x12, 0x3e, 0x0a, 0x2c,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x33, 0x10, 0xd6, 0xad, 0xf3,
	0x5d, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x33, 0x12, 0x3e, 0x0a, 0x2c,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x32, 0x10, 0xd7, 0xad, 0xf3,
	0x5d, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x32, 0x12, 0x38, 0x0a, 0x29,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x9f, 0xa4, 0xa4, 0x78, 0x1a, 0x06,
	0x82, 0x41, 0x03, 0x41, 0x4c, 0x4c, 0x12, 0x41, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e,
	0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x4f, 0x4c, 0x45, 0x10, 0xfd, 0xb9, 0xb7, 0xa0, 0x01, 0x1a, 0x0a, 0x82,
	0x41, 0x07, 0x43, 0x4f, 0x4e, 0x53, 0x4f, 0x4c, 0x45, 0x12, 0x39, 0x0a, 0x29, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47,
	0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x4e, 0x54, 0x50, 0x10, 0xfc, 0xb9, 0x8c, 0xa7, 0x01, 0x1a, 0x06, 0x82, 0x41,
	0x03, 0x4e, 0x54, 0x50, 0x12, 0x3f, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53,
	0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x10, 0xad, 0xa2, 0xe4, 0xbd, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x12, 0x3d, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47,
	0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x55, 0x44, 0x49, 0x54, 0x10, 0xc3, 0xc9, 0xf4, 0xe3, 0x01, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x41,
	0x55, 0x44, 0x49, 0x54, 0x12, 0x3b, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53,
	0x59, 0x53, 0x4c, 0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x10, 0x9c, 0xb8, 0x85, 0xe4, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x41, 0x55, 0x54,
	0x48, 0x12, 0x4d, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c,
	0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x44, 0x41, 0x45, 0x4d, 0x4f, 0x4e, 0x10, 0xc4, 0x9d, 0x96, 0xee, 0x01, 0x1a, 0x10,
	0x82, 0x41, 0x0d, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x41, 0x45, 0x4d, 0x4f, 0x4e,
	0x12, 0x3f, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f,
	0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47,
	0x10, 0xe9, 0xab, 0xd5, 0xf2, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x53, 0x59, 0x53, 0x4c, 0x4f,
	0x47, 0x12, 0x3b, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c,
	0x4f, 0x47, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10,
	0xcb, 0xfc, 0xe7, 0xf9, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x55, 0x53, 0x45, 0x52, 0x2a, 0xd4,
	0x04, 0x0a, 0x25, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47,
	0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x41, 0x0a, 0x2f, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47,
	0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x01, 0x1a, 0x0c,
	0x82, 0x41, 0x09, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x12, 0x39, 0x0a, 0x2b,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x08, 0x82,
	0x41, 0x05, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0x3f, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49,
	0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x1a, 0x0b, 0x82, 0x41, 0x08,
	0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x12, 0x39, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47,
	0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a, 0x08, 0x82, 0x41, 0x05, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x12, 0x3d, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59,
	0x53, 0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x41, 0x52,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49,
	0x4e, 0x47, 0x12, 0x3b, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53,
	0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x49,
	0x43, 0x45, 0x10, 0x06, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x12,
	0x49, 0x0a, 0x33, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x07, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x12, 0x39, 0x0a, 0x2b, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4c, 0x4f,
	0x47, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x08, 0x1a, 0x08, 0x82, 0x41, 0x05,
	0x44, 0x45, 0x42, 0x55, 0x47, 0x2a, 0x86, 0x01, 0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x54, 0x50, 0x41, 0x55, 0x54,
	0x48, 0x54, 0x59, 0x50, 0x45, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x4e, 0x54, 0x50, 0x41, 0x55, 0x54, 0x48,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x40, 0x0a, 0x28,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x4e, 0x54, 0x50, 0x41, 0x55, 0x54, 0x48, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x54, 0x50, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x8b, 0xa4, 0xf7, 0x43, 0x1a, 0x0f, 0x82,
	0x41, 0x0c, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x44, 0x35, 0x2a, 0xee,
	0x01, 0x0a, 0x28, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x6f, 0x6f, 0x70, 0x62,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x2d, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x4d,
	0x4f, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x12, 0x42, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x4d, 0x4f, 0x44, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x02, 0x1a, 0x0b,
	0x82, 0x41, 0x08, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12, 0x42, 0x0a, 0x31, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x54, 0x59, 0x50, 0x45, 0x53, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x4d,
	0x4f, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x4c,
	0x10, 0x03, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x2a,
	0xa2, 0x02, 0x0a, 0x1c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59,
	0x12, 0x26, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0xd9, 0xec,
	0x9b, 0x70, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x36, 0x12, 0x31, 0x0a, 0x21, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x34,
	0x10, 0xdb, 0xec, 0x9b, 0x70, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x34, 0x12, 0x32,
	0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x4d,
	0x50, 0x4c, 0x53, 0x10, 0xc2, 0x85, 0x95, 0xd3, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4d, 0x50,
	0x4c, 0x53, 0x12, 0x40, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x46, 0x41, 0x4d, 0x49,
	0x4c, 0x59, 0x5f, 0x4c, 0x32, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0xfa,
	0xfd, 0x8a, 0xf1, 0x01, 0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x4c, 0x32, 0x5f, 0x45, 0x54, 0x48, 0x45,
	0x52, 0x4e, 0x45, 0x54, 0x2a, 0x87, 0x03, 0x0a, 0x1c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x50, 0x49, 0x44,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x56, 0x4c, 0x41, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x50, 0x49, 0x44,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3f, 0x0a,
	0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x56, 0x4c, 0x41, 0x4e, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x54, 0x50, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x54, 0x50,
	0x49, 0x44, 0x5f, 0x30, 0x58, 0x39, 0x31, 0x30, 0x30, 0x10, 0x80, 0xf3, 0xd6, 0x14, 0x1a, 0x0e,
	0x82, 0x41, 0x0b, 0x54, 0x50, 0x49, 0x44, 0x5f, 0x30, 0x58, 0x39, 0x31, 0x30, 0x30, 0x12, 0x3f,
	0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x56, 0x4c, 0x41, 0x4e,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x50, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x54,
	0x50, 0x49, 0x44, 0x5f, 0x30, 0x58, 0x38, 0x38, 0x41, 0x38, 0x10, 0xf1, 0x92, 0xfb, 0x4f, 0x1a,
	0x0e, 0x82, 0x41, 0x0b, 0x54, 0x50, 0x49, 0x44, 0x5f, 0x30, 0x58, 0x38, 0x38, 0x41, 0x38, 0x12,
	0x3f, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x56, 0x4c, 0x41,
	0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x50, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f,
	0x54, 0x50, 0x49, 0x44, 0x5f, 0x30, 0x58, 0x38, 0x31, 0x30, 0x30, 0x10, 0xe7, 0xa6, 0xd6, 0x78,
	0x1a, 0x0e, 0x82, 0x41, 0x0b, 0x54, 0x50, 0x49, 0x44, 0x5f, 0x30, 0x58, 0x38, 0x31, 0x30, 0x30,
	0x12, 0x3a, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x56, 0x4c,
	0x41, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x54, 0x50, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x5f, 0x54, 0x50, 0x49, 0x44, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0xc4, 0xd0, 0x8e, 0x89, 0x01, 0x1a,
	0x0b, 0x82, 0x41, 0x08, 0x54, 0x50, 0x49, 0x44, 0x5f, 0x41, 0x4e, 0x59, 0x12, 0x40, 0x0a, 0x28,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x56, 0x4c, 0x41, 0x4e, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x54, 0x50, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x54, 0x50, 0x49,
	0x44, 0x5f, 0x30, 0x58, 0x39, 0x32, 0x30, 0x30, 0x10, 0xfb, 0xb6, 0xf5, 0xa4, 0x01, 0x1a, 0x0e,
	0x82, 0x41, 0x0b, 0x54, 0x50, 0x49, 0x44, 0x5f, 0x30, 0x58, 0x39, 0x32, 0x30, 0x30, 0x2a, 0xb8,
	0x01, 0x0a, 0x1f, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6c, 0x61,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x56, 0x4c, 0x41, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x56, 0x4c, 0x41, 0x4e, 0x4d, 0x4f, 0x44,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x35, 0x0a,
	0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x56, 0x4c, 0x41, 0x4e, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x56, 0x4c, 0x41, 0x4e, 0x4d, 0x4f, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x12, 0x33, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x56, 0x4c, 0x41, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x56, 0x4c, 0x41, 0x4e, 0x4d,
	0x4f, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x02, 0x1a,
	0x08, 0x82, 0x41, 0x05, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x2a, 0xf2, 0x01, 0x0a, 0x22, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x56, 0x4c,
	0x41, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x56, 0x4c, 0x41, 0x4e, 0x53, 0x54, 0x41, 0x43, 0x4b,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x34,
	0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x56, 0x4c, 0x41, 0x4e,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x56, 0x4c, 0x41, 0x4e, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04,
	0x50, 0x55, 0x53, 0x48, 0x12, 0x32, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x56, 0x4c, 0x41, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x56, 0x4c, 0x41, 0x4e, 0x53,
	0x54, 0x41, 0x43, 0x4b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x50, 0x10, 0x02,
	0x1a, 0x06, 0x82, 0x41, 0x03, 0x50, 0x4f, 0x50, 0x12, 0x34, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x56, 0x4c, 0x41, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x53, 0x56,
	0x4c, 0x41, 0x4e, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x57, 0x41, 0x50, 0x10, 0x03, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x53, 0x57, 0x41, 0x50, 0x42, 0x41,
	0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x72, 0x69,
	0x72, 0x61, 0x6d, 0x79, 0x2f, 0x76, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2d, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_managed_element_enums_enums_proto_rawDescOnce sync.Once
	file_managed_element_enums_enums_proto_rawDescData = file_managed_element_enums_enums_proto_rawDesc
)

func file_managed_element_enums_enums_proto_rawDescGZIP() []byte {
	file_managed_element_enums_enums_proto_rawDescOnce.Do(func() {
		file_managed_element_enums_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_managed_element_enums_enums_proto_rawDescData)
	})
	return file_managed_element_enums_enums_proto_rawDescData
}

var file_managed_element_enums_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 128)
var file_managed_element_enums_enums_proto_goTypes = []interface{}{
	(IETFInterfacesInterfaceType)(0),                                          // 0: managed_element.enums.IETFInterfacesInterfaceType
	(OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE)(0),                             // 1: managed_element.enums.OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE
	(OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE)(0),                          // 2: managed_element.enums.OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE
	(OpenconfigAaaTypesAAAMETHODTYPE)(0),                                      // 3: managed_element.enums.OpenconfigAaaTypesAAAMETHODTYPE
	(OpenconfigAaaTypesAAASERVERTYPE)(0),                                      // 4: managed_element.enums.OpenconfigAaaTypesAAASERVERTYPE
	(OpenconfigAaaTypesSYSTEMDEFINEDROLES)(0),                                 // 5: managed_element.enums.OpenconfigAaaTypesSYSTEMDEFINEDROLES
	(OpenconfigAclACLCOUNTERCAPABILITY)(0),                                    // 6: managed_element.enums.OpenconfigAclACLCOUNTERCAPABILITY
	(OpenconfigAclACLTYPE)(0),                                                 // 7: managed_element.enums.OpenconfigAclACLTYPE
	(OpenconfigAclFORWARDINGACTION)(0),                                        // 8: managed_element.enums.OpenconfigAclFORWARDINGACTION
	(OpenconfigAclLOGACTION)(0),                                               // 9: managed_element.enums.OpenconfigAclLOGACTION
	(OpenconfigAftTypesEncapsulationHeaderType)(0),                            // 10: managed_element.enums.OpenconfigAftTypesEncapsulationHeaderType
	(OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY)(0),                          // 11: managed_element.enums.OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY
	(OpenconfigAlarmTypesOPENCONFIGALARMTYPEID)(0),                            // 12: managed_element.enums.OpenconfigAlarmTypesOPENCONFIGALARMTYPEID
	(OpenconfigBfdBfdDiagnosticCode)(0),                                       // 13: managed_element.enums.OpenconfigBfdBfdDiagnosticCode
	(OpenconfigBfdBfdSessionState)(0),                                         // 14: managed_element.enums.OpenconfigBfdBfdSessionState
	(OpenconfigBgpTypesAFISAFITYPE)(0),                                        // 15: managed_element.enums.OpenconfigBgpTypesAFISAFITYPE
	(OpenconfigBgpTypesAsPathSegmentType)(0),                                  // 16: managed_element.enums.OpenconfigBgpTypesAsPathSegmentType
	(OpenconfigBgpTypesBGPCAPABILITY)(0),                                      // 17: managed_element.enums.OpenconfigBgpTypesBGPCAPABILITY
	(OpenconfigBgpTypesBGPERRORCODE)(0),                                       // 18: managed_element.enums.OpenconfigBgpTypesBGPERRORCODE
	(OpenconfigBgpTypesBGPERRORSUBCODE)(0),                                    // 19: managed_element.enums.OpenconfigBgpTypesBGPERRORSUBCODE
	(OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY)(0),                           // 20: managed_element.enums.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY
	(OpenconfigBgpTypesBgpOriginAttrType)(0),                                  // 21: managed_element.enums.OpenconfigBgpTypesBgpOriginAttrType
	(OpenconfigBgpTypesCommunityType)(0),                                      // 22: managed_element.enums.OpenconfigBgpTypesCommunityType
	(OpenconfigBgpTypesPeerType)(0),                                           // 23: managed_element.enums.OpenconfigBgpTypesPeerType
	(OpenconfigBgpTypesRemovePrivateAsOption)(0),                              // 24: managed_element.enums.OpenconfigBgpTypesRemovePrivateAsOption
	(OpenconfigEvpnTypesEVPNTYPE)(0),                                          // 25: managed_element.enums.OpenconfigEvpnTypesEVPNTYPE
	(OpenconfigEvpnTypesLearningMode)(0),                                      // 26: managed_element.enums.OpenconfigEvpnTypesLearningMode
	(OpenconfigIcmpv4TypesCODE)(0),                                            // 27: managed_element.enums.OpenconfigIcmpv4TypesCODE
	(OpenconfigIcmpv4TypesTYPE)(0),                                            // 28: managed_element.enums.OpenconfigIcmpv4TypesTYPE
	(OpenconfigIcmpv6TypesCODE)(0),                                            // 29: managed_element.enums.OpenconfigIcmpv6TypesCODE
	(OpenconfigIcmpv6TypesTYPE)(0),                                            // 30: managed_element.enums.OpenconfigIcmpv6TypesTYPE
	(OpenconfigIfAggregateAggregationType)(0),                                 // 31: managed_element.enums.OpenconfigIfAggregateAggregationType
	(OpenconfigIfEthernetETHERNETSPEED)(0),                                    // 32: managed_element.enums.OpenconfigIfEthernetETHERNETSPEED
	(OpenconfigIfEthernetINTERFACEFEC)(0),                                     // 33: managed_element.enums.OpenconfigIfEthernetINTERFACEFEC
	(OpenconfigIsisIsisMetricFlags)(0),                                        // 34: managed_element.enums.OpenconfigIsisIsisMetricFlags
	(OpenconfigIsisLsdbTypesISISSUBTLVTYPE)(0),                                // 35: managed_element.enums.OpenconfigIsisLsdbTypesISISSUBTLVTYPE
	(OpenconfigIsisLsdbTypesISISTLVTYPE)(0),                                   // 36: managed_element.enums.OpenconfigIsisLsdbTypesISISTLVTYPE
	(OpenconfigIsisTypesAFISAFITYPE)(0),                                       // 37: managed_element.enums.OpenconfigIsisTypesAFISAFITYPE
	(OpenconfigIsisTypesAFITYPE)(0),                                           // 38: managed_element.enums.OpenconfigIsisTypesAFITYPE
	(OpenconfigIsisTypesAUTHMODE)(0),                                          // 39: managed_element.enums.OpenconfigIsisTypesAUTHMODE
	(OpenconfigIsisTypesAdaptiveTimerType)(0),                                 // 40: managed_element.enums.OpenconfigIsisTypesAdaptiveTimerType
	(OpenconfigIsisTypesCircuitType)(0),                                       // 41: managed_element.enums.OpenconfigIsisTypesCircuitType
	(OpenconfigIsisTypesHelloPaddingType)(0),                                  // 42: managed_element.enums.OpenconfigIsisTypesHelloPaddingType
	(OpenconfigIsisTypesIsisInterfaceAdjState)(0),                             // 43: managed_element.enums.OpenconfigIsisTypesIsisInterfaceAdjState
	(OpenconfigIsisTypesLevelType)(0),                                         // 44: managed_element.enums.OpenconfigIsisTypesLevelType
	(OpenconfigIsisTypesMetricStyle)(0),                                       // 45: managed_element.enums.OpenconfigIsisTypesMetricStyle
	(OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE)(0),                          // 46: managed_element.enums.OpenconfigIsisTypesOVERLOADRESETTRIGGERTYPE
	(OpenconfigIsisTypesSAFITYPE)(0),                                          // 47: managed_element.enums.OpenconfigIsisTypesSAFITYPE
	(OpenconfigKeychainTypesAUTHTYPE)(0),                                      // 48: managed_element.enums.OpenconfigKeychainTypesAUTHTYPE
	(OpenconfigKeychainTypesCRYPTOTYPE)(0),                                    // 49: managed_element.enums.OpenconfigKeychainTypesCRYPTOTYPE
	(OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP)(0),                            // 50: managed_element.enums.OpenconfigLocalRoutingLOCALDEFINEDNEXTHOP
	(OpenconfigMessagesDEBUGSERVICE)(0),                                       // 51: managed_element.enums.OpenconfigMessagesDEBUGSERVICE
	(OpenconfigMplsCspfTieBreaking)(0),                                        // 52: managed_element.enums.OpenconfigMplsCspfTieBreaking
	(OpenconfigMplsLdpLabelAdvertisementMode)(0),                              // 53: managed_element.enums.OpenconfigMplsLdpLabelAdvertisementMode
	(OpenconfigMplsLdpMplsLdpAdjacencyType)(0),                                // 54: managed_element.enums.OpenconfigMplsLdpMplsLdpAdjacencyType
	(OpenconfigMplsLdpMplsLdpAfi)(0),                                          // 55: managed_element.enums.OpenconfigMplsLdpMplsLdpAfi
	(OpenconfigMplsMplsHopType)(0),                                            // 56: managed_element.enums.OpenconfigMplsMplsHopType
	(OpenconfigMplsMplsSrlgFloodingType)(0),                                   // 57: managed_element.enums.OpenconfigMplsMplsSrlgFloodingType
	(OpenconfigMplsTeBandwidthType)(0),                                        // 58: managed_element.enums.OpenconfigMplsTeBandwidthType
	(OpenconfigMplsTypesLSPMETRICTYPE)(0),                                     // 59: managed_element.enums.OpenconfigMplsTypesLSPMETRICTYPE
	(OpenconfigMplsTypesLSPOPERSTATUS)(0),                                     // 60: managed_element.enums.OpenconfigMplsTypesLSPOPERSTATUS
	(OpenconfigMplsTypesLSPROLE)(0),                                           // 61: managed_element.enums.OpenconfigMplsTypesLSPROLE
	(OpenconfigMplsTypesMplsLabelEnum)(0),                                     // 62: managed_element.enums.OpenconfigMplsTypesMplsLabelEnum
	(OpenconfigMplsTypesNULLLABELTYPE)(0),                                     // 63: managed_element.enums.OpenconfigMplsTypesNULLLABELTYPE
	(OpenconfigMplsTypesPATHCOMPUTATIONMETHOD)(0),                             // 64: managed_element.enums.OpenconfigMplsTypesPATHCOMPUTATIONMETHOD
	(OpenconfigMplsTypesPATHMETRICTYPE)(0),                                    // 65: managed_element.enums.OpenconfigMplsTypesPATHMETRICTYPE
	(OpenconfigMplsTypesPATHSETUPPROTOCOL)(0),                                 // 66: managed_element.enums.OpenconfigMplsTypesPATHSETUPPROTOCOL
	(OpenconfigMplsTypesPROTECTIONTYPE)(0),                                    // 67: managed_element.enums.OpenconfigMplsTypesPROTECTIONTYPE
	(OpenconfigMplsTypesPSEUDOWIREENCAPSULATION)(0),                           // 68: managed_element.enums.OpenconfigMplsTypesPSEUDOWIREENCAPSULATION
	(OpenconfigMplsTypesRSVPAUTHTYPE)(0),                                      // 69: managed_element.enums.OpenconfigMplsTypesRSVPAUTHTYPE
	(OpenconfigMplsTypesTUNNELADMINSTATUS)(0),                                 // 70: managed_element.enums.OpenconfigMplsTypesTUNNELADMINSTATUS
	(OpenconfigMplsTypesTUNNELTYPE)(0),                                        // 71: managed_element.enums.OpenconfigMplsTypesTUNNELTYPE
	(OpenconfigNetworkInstanceTypesENCAPSULATION)(0),                          // 72: managed_element.enums.OpenconfigNetworkInstanceTypesENCAPSULATION
	(OpenconfigNetworkInstanceTypesENDPOINTTYPE)(0),                           // 73: managed_element.enums.OpenconfigNetworkInstanceTypesENDPOINTTYPE
	(OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE)(0),                    // 74: managed_element.enums.OpenconfigNetworkInstanceTypesLABELALLOCATIONMODE
	(OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE)(0),                    // 75: managed_element.enums.OpenconfigNetworkInstanceTypesNETWORKINSTANCETYPE
	(OpenconfigOspfTypesGRACELSATLVTYPES)(0),                                  // 76: managed_element.enums.OpenconfigOspfTypesGRACELSATLVTYPES
	(OpenconfigOspfTypesMAXMETRICINCLUDE)(0),                                  // 77: managed_element.enums.OpenconfigOspfTypesMAXMETRICINCLUDE
	(OpenconfigOspfTypesMAXMETRICTRIGGER)(0),                                  // 78: managed_element.enums.OpenconfigOspfTypesMAXMETRICTRIGGER
	(OpenconfigOspfTypesOSPFLSATYPE)(0),                                       // 79: managed_element.enums.OpenconfigOspfTypesOSPFLSATYPE
	(OpenconfigOspfTypesOSPFNEIGHBORSTATE)(0),                                 // 80: managed_element.enums.OpenconfigOspfTypesOSPFNEIGHBORSTATE
	(OpenconfigOspfTypesOSPFNETWORKTYPE)(0),                                   // 81: managed_element.enums.OpenconfigOspfTypesOSPFNETWORKTYPE
	(OpenconfigOspfTypesOSPFOPAQUELSATYPE)(0),                                 // 82: managed_element.enums.OpenconfigOspfTypesOSPFOPAQUELSATYPE
	(OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES)(0),                          // 83: managed_element.enums.OpenconfigOspfTypesOSPFRISRSIDLABELTLVTYPES
	(OpenconfigOspfTypesOSPFTELINKTLVTYPE)(0),                                 // 84: managed_element.enums.OpenconfigOspfTypesOSPFTELINKTLVTYPE
	(OpenconfigOspfTypesOSPFTELSATLVTYPE)(0),                                  // 85: managed_element.enums.OpenconfigOspfTypesOSPFTELSATLVTYPE
	(OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE)(0),                      // 86: managed_element.enums.OpenconfigOspfTypesOSPFV2EXTENDEDLINKSUBTLVTYPE
	(OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE)(0),     // 87: managed_element.enums.OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSIDLABELBINDINGSUBTLVTYPE
	(OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE)(0),                    // 88: managed_element.enums.OpenconfigOspfTypesOSPFV2EXTENDEDPREFIXSUBTLVTYPE
	(OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE)(0),          // 89: managed_element.enums.OpenconfigOspfTypesOSPFV2EXTPREFIXBINDINGEROPATHSEGMENTTYPE
	(OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE)(0),                              // 90: managed_element.enums.OpenconfigOspfTypesOSPFV2ROUTERLINKTYPE
	(OpenconfigOspfTypesRILSATLVTYPES)(0),                                     // 91: managed_element.enums.OpenconfigOspfTypesRILSATLVTYPES
	(OpenconfigOspfTypesROUTERLSATYPES)(0),                                    // 92: managed_element.enums.OpenconfigOspfTypesROUTERLSATYPES
	(OpenconfigOspfTypesSRALGORITHM)(0),                                       // 93: managed_element.enums.OpenconfigOspfTypesSRALGORITHM
	(OpenconfigOspfTypesSrSidType)(0),                                         // 94: managed_element.enums.OpenconfigOspfTypesSrSidType
	(OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE)(0),                            // 95: managed_element.enums.OpenconfigOspfTypesTENODEATTRIBUTETLVTYPE
	(OpenconfigPacketMatchTypesETHERTYPE)(0),                                  // 96: managed_element.enums.OpenconfigPacketMatchTypesETHERTYPE
	(OpenconfigPacketMatchTypesIPPROTOCOL)(0),                                 // 97: managed_element.enums.OpenconfigPacketMatchTypesIPPROTOCOL
	(OpenconfigPacketMatchTypesPortNumRangeEnum)(0),                           // 98: managed_element.enums.OpenconfigPacketMatchTypesPortNumRangeEnum
	(OpenconfigPacketMatchTypesTCPFLAGS)(0),                                   // 99: managed_element.enums.OpenconfigPacketMatchTypesTCPFLAGS
	(OpenconfigPcepLspControlType)(0),                                         // 100: managed_element.enums.OpenconfigPcepLspControlType
	(OpenconfigPcepPceModeType)(0),                                            // 101: managed_element.enums.OpenconfigPcepPceModeType
	(OpenconfigPimTypesPIMMODE)(0),                                            // 102: managed_element.enums.OpenconfigPimTypesPIMMODE
	(OpenconfigPlatformTypesCOMPONENTOPERSTATUS)(0),                           // 103: managed_element.enums.OpenconfigPlatformTypesCOMPONENTOPERSTATUS
	(OpenconfigPlatformTypesCOMPONENTREBOOTREASON)(0),                         // 104: managed_element.enums.OpenconfigPlatformTypesCOMPONENTREBOOTREASON
	(OpenconfigPlatformTypesComponentRedundantRole)(0),                        // 105: managed_element.enums.OpenconfigPlatformTypesComponentRedundantRole
	(OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger)(0), // 106: managed_element.enums.OpenconfigPlatformTypesComponentRedundantRoleSwitchoverReasonTrigger
	(OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT)(0),                   // 107: managed_element.enums.OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT
	(OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT)(0),                   // 108: managed_element.enums.OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT
	(OpenconfigPolicyTypesINSTALLPROTOCOLTYPE)(0),                             // 109: managed_element.enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE
	(OpenconfigPolicyTypesMatchSetOptionsRestrictedType)(0),                   // 110: managed_element.enums.OpenconfigPolicyTypesMatchSetOptionsRestrictedType
	(OpenconfigRibBgpTypesINVALIDROUTEREASON)(0),                              // 111: managed_element.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON
	(OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE)(0),                   // 112: managed_element.enums.OpenconfigRibBgpTypesTUNNELENCAPSULATIONSUBTLVTYPE
	(OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE)(0),                         // 113: managed_element.enums.OpenconfigRibBgpTypesTUNNELENCAPSULATIONTYPE
	(OpenconfigRoutingPolicyDefaultPolicyType)(0),                             // 114: managed_element.enums.OpenconfigRoutingPolicyDefaultPolicyType
	(OpenconfigRoutingPolicyPolicyResultType)(0),                              // 115: managed_element.enums.OpenconfigRoutingPolicyPolicyResultType
	(OpenconfigSegmentRoutingTypesEnlpType)(0),                                // 116: managed_element.enums.OpenconfigSegmentRoutingTypesEnlpType
	(OpenconfigSegmentRoutingTypesSrDataplaneType)(0),                         // 117: managed_element.enums.OpenconfigSegmentRoutingTypesSrDataplaneType
	(OpenconfigSegmentRoutingTypesSrteInvalidSlReason)(0),                     // 118: managed_element.enums.OpenconfigSegmentRoutingTypesSrteInvalidSlReason
	(OpenconfigSegmentRoutingTypesSrteProtocolType)(0),                        // 119: managed_element.enums.OpenconfigSegmentRoutingTypesSrteProtocolType
	(OpenconfigSystemLoggingSYSLOGFACILITY)(0),                                // 120: managed_element.enums.OpenconfigSystemLoggingSYSLOGFACILITY
	(OpenconfigSystemLoggingSyslogSeverity)(0),                                // 121: managed_element.enums.OpenconfigSystemLoggingSyslogSeverity
	(OpenconfigSystemNTPAUTHTYPE)(0),                                          // 122: managed_element.enums.OpenconfigSystemNTPAUTHTYPE
	(OpenconfigTransportTypesLoopbackModeType)(0),                             // 123: managed_element.enums.OpenconfigTransportTypesLoopbackModeType
	(OpenconfigTypesADDRESSFAMILY)(0),                                         // 124: managed_element.enums.OpenconfigTypesADDRESSFAMILY
	(OpenconfigVlanTypesTPIDTYPES)(0),                                         // 125: managed_element.enums.OpenconfigVlanTypesTPIDTYPES
	(OpenconfigVlanTypesVlanModeType)(0),                                      // 126: managed_element.enums.OpenconfigVlanTypesVlanModeType
	(OpenconfigVlanTypesVlanStackAction)(0),                                   // 127: managed_element.enums.OpenconfigVlanTypesVlanStackAction
}
var file_managed_element_enums_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_managed_element_enums_enums_proto_init() }
func file_managed_element_enums_enums_proto_init() {
	if File_managed_element_enums_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_managed_element_enums_enums_proto_rawDesc,
			NumEnums:      128,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_managed_element_enums_enums_proto_goTypes,
		DependencyIndexes: file_managed_element_enums_enums_proto_depIdxs,
		EnumInfos:         file_managed_element_enums_enums_proto_enumTypes,
	}.Build()
	File_managed_element_enums_enums_proto = out.File
	file_managed_element_enums_enums_proto_rawDesc = nil
	file_managed_element_enums_enums_proto_goTypes = nil
	file_managed_element_enums_enums_proto_depIdxs = nil
}
